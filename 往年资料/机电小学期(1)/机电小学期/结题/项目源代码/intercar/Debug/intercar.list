
intercar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b80  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08007d68  08007d68  00017d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d9c  08007d9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007d9c  08007d9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d9c  08007d9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000010  08007db0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08007db0  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016373  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302d  00000000  00000000  000363a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  000393d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  0003a260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf15  00000000  00000000  0003afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013036  00000000  00000000  00056ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a3ac  00000000  00000000  00069efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001042a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d34  00000000  00000000  001042fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	08007d50 	.word	0x08007d50

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	08007d50 	.word	0x08007d50

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d92:	2afd      	cmp	r2, #253	; 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	; 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	; 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	; 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__gesf2>:
 8000fe0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe4:	e006      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__lesf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	e002      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__cmpsf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ffc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001004:	bf18      	it	ne
 8001006:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100a:	d011      	beq.n	8001030 <__cmpsf2+0x40>
 800100c:	b001      	add	sp, #4
 800100e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001012:	bf18      	it	ne
 8001014:	ea90 0f01 	teqne	r0, r1
 8001018:	bf58      	it	pl
 800101a:	ebb2 0003 	subspl.w	r0, r2, r3
 800101e:	bf88      	it	hi
 8001020:	17c8      	asrhi	r0, r1, #31
 8001022:	bf38      	it	cc
 8001024:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001028:	bf18      	it	ne
 800102a:	f040 0001 	orrne.w	r0, r0, #1
 800102e:	4770      	bx	lr
 8001030:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001034:	d102      	bne.n	800103c <__cmpsf2+0x4c>
 8001036:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103a:	d105      	bne.n	8001048 <__cmpsf2+0x58>
 800103c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001040:	d1e4      	bne.n	800100c <__cmpsf2+0x1c>
 8001042:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001046:	d0e1      	beq.n	800100c <__cmpsf2+0x1c>
 8001048:	f85d 0b04 	ldr.w	r0, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <__aeabi_cfrcmple>:
 8001050:	4684      	mov	ip, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4661      	mov	r1, ip
 8001056:	e7ff      	b.n	8001058 <__aeabi_cfcmpeq>

08001058 <__aeabi_cfcmpeq>:
 8001058:	b50f      	push	{r0, r1, r2, r3, lr}
 800105a:	f7ff ffc9 	bl	8000ff0 <__cmpsf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	bf48      	it	mi
 8001062:	f110 0f00 	cmnmi.w	r0, #0
 8001066:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001068 <__aeabi_fcmpeq>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff fff4 	bl	8001058 <__aeabi_cfcmpeq>
 8001070:	bf0c      	ite	eq
 8001072:	2001      	moveq	r0, #1
 8001074:	2000      	movne	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmplt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffea 	bl	8001058 <__aeabi_cfcmpeq>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmple>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffe0 	bl	8001058 <__aeabi_cfcmpeq>
 8001098:	bf94      	ite	ls
 800109a:	2001      	movls	r0, #1
 800109c:	2000      	movhi	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmpge>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffd2 	bl	8001050 <__aeabi_cfrcmple>
 80010ac:	bf94      	ite	ls
 80010ae:	2001      	movls	r0, #1
 80010b0:	2000      	movhi	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmpgt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffc8 	bl	8001050 <__aeabi_cfrcmple>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_f2iz>:
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d4:	d30f      	bcc.n	80010f6 <__aeabi_f2iz+0x2a>
 80010d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d90d      	bls.n	80010fc <__aeabi_f2iz+0x30>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	bf18      	it	ne
 80010f2:	4240      	negne	r0, r0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2iz+0x3a>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d105      	bne.n	8001112 <__aeabi_f2iz+0x46>
 8001106:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110a:	bf08      	it	eq
 800110c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001110:	4770      	bx	lr
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	4770      	bx	lr

08001118 <extract_RX>:
 *      Author: 86152
 */
#include "servo.h"

void extract_RX()    //蓝牙遥控命令提取函数
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0;i<Rx_len-1;i++){
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e035      	b.n	8001190 <extract_RX+0x78>
		if((Rx_buffer[i]=='A')&&(Rx_buffer[i+1]=='T')&&(i<4)){
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <extract_RX+0x90>)
 8001128:	5cd3      	ldrb	r3, [r2, r3]
 800112a:	2b41      	cmp	r3, #65	; 0x41
 800112c:	d12d      	bne.n	800118a <extract_RX+0x72>
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	3301      	adds	r3, #1
 8001132:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <extract_RX+0x90>)
 8001134:	5cd3      	ldrb	r3, [r2, r3]
 8001136:	2b54      	cmp	r3, #84	; 0x54
 8001138:	d127      	bne.n	800118a <extract_RX+0x72>
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b03      	cmp	r3, #3
 800113e:	d824      	bhi.n	800118a <extract_RX+0x72>
			if(Rx_buffer[i+3]=='E'&&Rx_buffer[i+4]=='D'){
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3303      	adds	r3, #3
 8001144:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <extract_RX+0x90>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	2b45      	cmp	r3, #69	; 0x45
 800114a:	d11e      	bne.n	800118a <extract_RX+0x72>
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	3304      	adds	r3, #4
 8001150:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <extract_RX+0x90>)
 8001152:	5cd3      	ldrb	r3, [r2, r3]
 8001154:	2b44      	cmp	r3, #68	; 0x44
 8001156:	d118      	bne.n	800118a <extract_RX+0x72>
                Rx_command = Rx_buffer[i+2];
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	3302      	adds	r3, #2
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <extract_RX+0x90>)
 800115e:	5cd2      	ldrb	r2, [r2, r3]
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <extract_RX+0x94>)
 8001162:	701a      	strb	r2, [r3, #0]
                for(uint8_t j=0;j<Rx_len;j++)
 8001164:	2300      	movs	r3, #0
 8001166:	71bb      	strb	r3, [r7, #6]
 8001168:	e006      	b.n	8001178 <extract_RX+0x60>
                {Rx_buffer[j] = 0;}
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <extract_RX+0x90>)
 800116e:	2100      	movs	r1, #0
 8001170:	54d1      	strb	r1, [r2, r3]
                for(uint8_t j=0;j<Rx_len;j++)
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	3301      	adds	r3, #1
 8001176:	71bb      	strb	r3, [r7, #6]
 8001178:	79ba      	ldrb	r2, [r7, #6]
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <extract_RX+0x98>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	dbf3      	blt.n	800116a <extract_RX+0x52>
                Rx_len=0;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <extract_RX+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
                break;
 8001188:	e009      	b.n	800119e <extract_RX+0x86>
	for(uint8_t i = 0;i<Rx_len-1;i++){
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	3301      	adds	r3, #1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	79fa      	ldrb	r2, [r7, #7]
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <extract_RX+0x98>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3b01      	subs	r3, #1
 8001198:	429a      	cmp	r2, r3
 800119a:	dbc3      	blt.n	8001124 <extract_RX+0xc>
			}
		}
	}
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	2000011c 	.word	0x2000011c
 80011ac:	200000ea 	.word	0x200000ea
 80011b0:	2000010c 	.word	0x2000010c

080011b4 <mode_switch>:
void mode_switch(char command)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	if(command== '1')//开关(打开后默认进入遥控模式)，在其他模式下按此键回到遥控状态，再按即可关闭
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b31      	cmp	r3, #49	; 0x31
 80011c2:	d119      	bne.n	80011f8 <mode_switch+0x44>
	{
		setspeed(0,0);
 80011c4:	2100      	movs	r1, #0
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f930 	bl	800142c <setspeed>
		if(mode!=1){
 80011cc:	4b50      	ldr	r3, [pc, #320]	; (8001310 <mode_switch+0x15c>)
 80011ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d006      	beq.n	80011e4 <mode_switch+0x30>
			mode=1;
 80011d6:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <mode_switch+0x15c>)
 80011d8:	2201      	movs	r2, #1
 80011da:	801a      	strh	r2, [r3, #0]
			is_down=0;
 80011dc:	4b4d      	ldr	r3, [pc, #308]	; (8001314 <mode_switch+0x160>)
 80011de:	2200      	movs	r2, #0
 80011e0:	801a      	strh	r2, [r3, #0]
				mode=4;
				avoid_dir=0;
				servo3_init();
			}
		}
}
 80011e2:	e090      	b.n	8001306 <mode_switch+0x152>
		else if(mode==1){mode=0;}
 80011e4:	4b4a      	ldr	r3, [pc, #296]	; (8001310 <mode_switch+0x15c>)
 80011e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	f040 808b 	bne.w	8001306 <mode_switch+0x152>
 80011f0:	4b47      	ldr	r3, [pc, #284]	; (8001310 <mode_switch+0x15c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	801a      	strh	r2, [r3, #0]
}
 80011f6:	e086      	b.n	8001306 <mode_switch+0x152>
    else if(command== '2')//自动巡线模式
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b32      	cmp	r3, #50	; 0x32
 80011fc:	d130      	bne.n	8001260 <mode_switch+0xac>
		if(mode!=0){
 80011fe:	4b44      	ldr	r3, [pc, #272]	; (8001310 <mode_switch+0x15c>)
 8001200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d07e      	beq.n	8001306 <mode_switch+0x152>
			MODE=1;
 8001208:	4b43      	ldr	r3, [pc, #268]	; (8001318 <mode_switch+0x164>)
 800120a:	2201      	movs	r2, #1
 800120c:	801a      	strh	r2, [r3, #0]
			uint8_t  CO1AskBuffer[3]={0xb3,1,0xb4};
 800120e:	4a43      	ldr	r2, [pc, #268]	; (800131c <mode_switch+0x168>)
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	4611      	mov	r1, r2
 8001218:	8019      	strh	r1, [r3, #0]
 800121a:	3302      	adds	r3, #2
 800121c:	0c12      	lsrs	r2, r2, #16
 800121e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)CO1AskBuffer, sizeof(CO1AskBuffer));
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2203      	movs	r2, #3
 8001226:	4619      	mov	r1, r3
 8001228:	483d      	ldr	r0, [pc, #244]	; (8001320 <mode_switch+0x16c>)
 800122a:	f006 f8c9 	bl	80073c0 <HAL_UART_Transmit_IT>
			for(int i=0;i<16;i++)
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	e00e      	b.n	8001252 <mode_switch+0x9e>
			{servo4_turn(90-3*i);}
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	b29b      	uxth	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	b29b      	uxth	r3, r3
 8001240:	335a      	adds	r3, #90	; 0x5a
 8001242:	b29b      	uxth	r3, r3
 8001244:	b21b      	sxth	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f002 fa78 	bl	800373c <servo4_turn>
			for(int i=0;i<16;i++)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	dded      	ble.n	8001234 <mode_switch+0x80>
			mode=2;
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <mode_switch+0x15c>)
 800125a:	2202      	movs	r2, #2
 800125c:	801a      	strh	r2, [r3, #0]
}
 800125e:	e052      	b.n	8001306 <mode_switch+0x152>
	else if(command== '3')//自动避障模式
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b33      	cmp	r3, #51	; 0x33
 8001264:	d130      	bne.n	80012c8 <mode_switch+0x114>
		if(mode!=0){
 8001266:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <mode_switch+0x15c>)
 8001268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d04a      	beq.n	8001306 <mode_switch+0x152>
			MODE=2;
 8001270:	4b29      	ldr	r3, [pc, #164]	; (8001318 <mode_switch+0x164>)
 8001272:	2202      	movs	r2, #2
 8001274:	801a      	strh	r2, [r3, #0]
			uint8_t  CO2AskBuffer[3]={0xb3,2,0xb4};
 8001276:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <mode_switch+0x170>)
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	4611      	mov	r1, r2
 8001280:	8019      	strh	r1, [r3, #0]
 8001282:	3302      	adds	r3, #2
 8001284:	0c12      	lsrs	r2, r2, #16
 8001286:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)CO2AskBuffer, sizeof(CO2AskBuffer));
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	2203      	movs	r2, #3
 800128e:	4619      	mov	r1, r3
 8001290:	4823      	ldr	r0, [pc, #140]	; (8001320 <mode_switch+0x16c>)
 8001292:	f006 f895 	bl	80073c0 <HAL_UART_Transmit_IT>
			for(int i=0;i<16;i++)
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	e00e      	b.n	80012ba <mode_switch+0x106>
			{servo4_turn(90-3*i);}
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	335a      	adds	r3, #90	; 0x5a
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fa44 	bl	800373c <servo4_turn>
			for(int i=0;i<16;i++)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	3301      	adds	r3, #1
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	dded      	ble.n	800129c <mode_switch+0xe8>
			mode=2;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <mode_switch+0x15c>)
 80012c2:	2202      	movs	r2, #2
 80012c4:	801a      	strh	r2, [r3, #0]
}
 80012c6:	e01e      	b.n	8001306 <mode_switch+0x152>
	else if(command== '4')//测试模式
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	2b34      	cmp	r3, #52	; 0x34
 80012cc:	d10b      	bne.n	80012e6 <mode_switch+0x132>
		if(mode!=0){
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <mode_switch+0x15c>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d016      	beq.n	8001306 <mode_switch+0x152>
			mode=3;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <mode_switch+0x15c>)
 80012da:	2203      	movs	r2, #3
 80012dc:	801a      	strh	r2, [r3, #0]
			avoid_dir=0;
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <mode_switch+0x174>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	801a      	strh	r2, [r3, #0]
}
 80012e4:	e00f      	b.n	8001306 <mode_switch+0x152>
	else if(command== '5')//测试模式
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b35      	cmp	r3, #53	; 0x35
 80012ea:	d10c      	bne.n	8001306 <mode_switch+0x152>
			if(mode!=0){
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <mode_switch+0x15c>)
 80012ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d007      	beq.n	8001306 <mode_switch+0x152>
				mode=4;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <mode_switch+0x15c>)
 80012f8:	2204      	movs	r2, #4
 80012fa:	801a      	strh	r2, [r3, #0]
				avoid_dir=0;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <mode_switch+0x174>)
 80012fe:	2200      	movs	r2, #0
 8001300:	801a      	strh	r2, [r3, #0]
				servo3_init();
 8001302:	f002 f98f 	bl	8003624 <servo3_init>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000c4 	.word	0x200000c4
 8001314:	200000a8 	.word	0x200000a8
 8001318:	20000084 	.word	0x20000084
 800131c:	08007d68 	.word	0x08007d68
 8001320:	20000384 	.word	0x20000384
 8001324:	08007d6c 	.word	0x08007d6c
 8001328:	20000110 	.word	0x20000110
 800132c:	00000000 	.word	0x00000000

08001330 <remote_control>:
void remote_control(char command)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	if(command== 'w'){setspeed(targetspeed,0);}//前进
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b77      	cmp	r3, #119	; 0x77
 800133e:	d106      	bne.n	800134e <remote_control+0x1e>
 8001340:	4b37      	ldr	r3, [pc, #220]	; (8001420 <remote_control+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f870 	bl	800142c <setspeed>
	}
	else{                        //运动状态归零
	    setspeed(0,0);
	    spin(0);
	}
}
 800134c:	e05f      	b.n	800140e <remote_control+0xde>
	else if(command== 's'){setspeed(-0.6*targetspeed,0);}//后退
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b73      	cmp	r3, #115	; 0x73
 8001352:	d115      	bne.n	8001380 <remote_control+0x50>
 8001354:	4b32      	ldr	r3, [pc, #200]	; (8001420 <remote_control+0xf0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f8b7 	bl	80004cc <__aeabi_i2d>
 800135e:	a32e      	add	r3, pc, #184	; (adr r3, 8001418 <remote_control+0xe8>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff f91c 	bl	80005a0 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fbb0 	bl	8000ad4 <__aeabi_d2iz>
 8001374:	4603      	mov	r3, r0
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f857 	bl	800142c <setspeed>
}
 800137e:	e046      	b.n	800140e <remote_control+0xde>
	else if(command== 'a'){spin(1);}//左转
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b61      	cmp	r3, #97	; 0x61
 8001384:	d103      	bne.n	800138e <remote_control+0x5e>
 8001386:	2001      	movs	r0, #1
 8001388:	f000 f946 	bl	8001618 <spin>
}
 800138c:	e03f      	b.n	800140e <remote_control+0xde>
	else if(command== 'd'){spin(2);}//右转
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b64      	cmp	r3, #100	; 0x64
 8001392:	d103      	bne.n	800139c <remote_control+0x6c>
 8001394:	2002      	movs	r0, #2
 8001396:	f000 f93f 	bl	8001618 <spin>
}
 800139a:	e038      	b.n	800140e <remote_control+0xde>
	else if(command== 'j'){        //机械臂升降
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	2b6a      	cmp	r3, #106	; 0x6a
 80013a0:	d115      	bne.n	80013ce <remote_control+0x9e>
		servo1_down();
 80013a2:	f002 f9ef 	bl	8003784 <servo1_down>
	    if(is_down==0){is_down=1;}
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <remote_control+0xf4>)
 80013a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d103      	bne.n	80013b8 <remote_control+0x88>
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <remote_control+0xf4>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	801a      	strh	r2, [r3, #0]
 80013b6:	e007      	b.n	80013c8 <remote_control+0x98>
	    else if(is_down==1){is_down=0;}
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <remote_control+0xf4>)
 80013ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d102      	bne.n	80013c8 <remote_control+0x98>
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <remote_control+0xf4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	801a      	strh	r2, [r3, #0]
	    command= 'q';
 80013c8:	2371      	movs	r3, #113	; 0x71
 80013ca:	71fb      	strb	r3, [r7, #7]
}
 80013cc:	e01f      	b.n	800140e <remote_control+0xde>
	else if(command== 'k'){       //机械爪开合
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b6b      	cmp	r3, #107	; 0x6b
 80013d2:	d115      	bne.n	8001400 <remote_control+0xd0>
	    servo2_shut();
 80013d4:	f002 fa10 	bl	80037f8 <servo2_shut>
		if(is_shut==0){is_shut=1;}
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <remote_control+0xf8>)
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d103      	bne.n	80013ea <remote_control+0xba>
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <remote_control+0xf8>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	801a      	strh	r2, [r3, #0]
 80013e8:	e007      	b.n	80013fa <remote_control+0xca>
	    else if(is_shut==1){is_shut=0;}
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <remote_control+0xf8>)
 80013ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <remote_control+0xca>
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <remote_control+0xf8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	801a      	strh	r2, [r3, #0]
		command= 'q';
 80013fa:	2371      	movs	r3, #113	; 0x71
 80013fc:	71fb      	strb	r3, [r7, #7]
}
 80013fe:	e006      	b.n	800140e <remote_control+0xde>
	    setspeed(0,0);
 8001400:	2100      	movs	r1, #0
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f812 	bl	800142c <setspeed>
	    spin(0);
 8001408:	2000      	movs	r0, #0
 800140a:	f000 f905 	bl	8001618 <spin>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	33333333 	.word	0x33333333
 800141c:	bfe33333 	.word	0xbfe33333
 8001420:	2000008c 	.word	0x2000008c
 8001424:	200000a8 	.word	0x200000a8
 8001428:	20000126 	.word	0x20000126

0800142c <setspeed>:
 *  Created on: 2022年7月9日
 *      Author: 86152
 */

void setspeed(int targetspeed,int curvature)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
	double omega = (float)targetspeed*curvature/10000;//计算角速度
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fc2e 	bl	8000c98 <__aeabi_i2f>
 800143c:	4604      	mov	r4, r0
 800143e:	6838      	ldr	r0, [r7, #0]
 8001440:	f7ff fc2a 	bl	8000c98 <__aeabi_i2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff fc79 	bl	8000d40 <__aeabi_fmul>
 800144e:	4603      	mov	r3, r0
 8001450:	4926      	ldr	r1, [pc, #152]	; (80014ec <setspeed+0xc0>)
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fd28 	bl	8000ea8 <__aeabi_fdiv>
 8001458:	4603      	mov	r3, r0
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f848 	bl	80004f0 <__aeabi_f2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	e9c7 2302 	strd	r2, r3, [r7, #8]
	lefttarget = targetspeed - (int)omega*width/2;
 8001468:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800146c:	f7ff fb32 	bl	8000ad4 <__aeabi_d2iz>
 8001470:	4603      	mov	r3, r0
 8001472:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8001476:	fb02 f203 	mul.w	r2, r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <setspeed+0xc4>)
 8001480:	6013      	str	r3, [r2, #0]
	righttarget = targetspeed + (int)omega*width/2;
 8001482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001486:	f7ff fb25 	bl	8000ad4 <__aeabi_d2iz>
 800148a:	4602      	mov	r2, r0
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	011a      	lsls	r2, r3, #4
 8001494:	441a      	add	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a16      	ldr	r2, [pc, #88]	; (80014f4 <setspeed+0xc8>)
 800149c:	6013      	str	r3, [r2, #0]
	if (lefttarget > maxtarget)
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <setspeed+0xc4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014a6:	dd03      	ble.n	80014b0 <setspeed+0x84>
		{lefttarget = maxtarget;}
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <setspeed+0xc4>)
 80014aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014ae:	601a      	str	r2, [r3, #0]
	if (righttarget > maxtarget)
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <setspeed+0xc8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b8:	dd03      	ble.n	80014c2 <setspeed+0x96>
		{righttarget = maxtarget;}
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <setspeed+0xc8>)
 80014bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014c0:	601a      	str	r2, [r3, #0]
	if (lefttarget < -maxtarget)
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <setspeed+0xc4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80014ca:	da02      	bge.n	80014d2 <setspeed+0xa6>
		{lefttarget = -maxtarget;}
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <setspeed+0xc4>)
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <setspeed+0xcc>)
 80014d0:	601a      	str	r2, [r3, #0]
	if (righttarget < -maxtarget)
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <setspeed+0xc8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80014da:	da02      	bge.n	80014e2 <setspeed+0xb6>
		{righttarget = -maxtarget;}
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <setspeed+0xc8>)
 80014de:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <setspeed+0xcc>)
 80014e0:	601a      	str	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	461c4000 	.word	0x461c4000
 80014f0:	20000108 	.word	0x20000108
 80014f4:	20000094 	.word	0x20000094
 80014f8:	fffffc18 	.word	0xfffffc18
 80014fc:	00000000 	.word	0x00000000

08001500 <roundPID>:
double roundPID(double targetposition,double position,double *error)
{
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800150a:	e9c7 2300 	strd	r2, r3, [r7]
	double errorpos = targetposition - position;
 800150e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001516:	f7fe fe8b 	bl	8000230 <__aeabi_dsub>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	static double errorpos_last = 0,errorpos_prev = 0;
	double pos_pid =0;
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*error = errorpos;
 800152e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001534:	e9c1 2300 	strd	r2, r3, [r1]
	pos_pid = KPR*(errorpos - errorpos_last) + KIR*errorpos
 8001538:	4b35      	ldr	r3, [pc, #212]	; (8001610 <roundPID+0x110>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001542:	f7fe fe75 	bl	8000230 <__aeabi_dsub>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	a32a      	add	r3, pc, #168	; (adr r3, 80015f8 <roundPID+0xf8>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f824 	bl	80005a0 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4614      	mov	r4, r2
 800155e:	461d      	mov	r5, r3
 8001560:	a327      	add	r3, pc, #156	; (adr r3, 8001600 <roundPID+0x100>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800156a:	f7ff f819 	bl	80005a0 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4620      	mov	r0, r4
 8001574:	4629      	mov	r1, r5
 8001576:	f7fe fe5d 	bl	8000234 <__adddf3>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4614      	mov	r4, r2
 8001580:	461d      	mov	r5, r3
			+ KDR*(errorpos-2*errorpos_last+errorpos_prev);
 8001582:	4b23      	ldr	r3, [pc, #140]	; (8001610 <roundPID+0x110>)
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	f7fe fe52 	bl	8000234 <__adddf3>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001598:	f7fe fe4a 	bl	8000230 <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <roundPID+0x114>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7fe fe43 	bl	8000234 <__adddf3>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	a314      	add	r3, pc, #80	; (adr r3, 8001608 <roundPID+0x108>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f7fe fff0 	bl	80005a0 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
	pos_pid = KPR*(errorpos - errorpos_last) + KIR*errorpos
 80015c4:	4620      	mov	r0, r4
 80015c6:	4629      	mov	r1, r5
 80015c8:	f7fe fe34 	bl	8000234 <__adddf3>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	errorpos_prev = errorpos_last;	  	    // 保存上上次误差
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <roundPID+0x110>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	490e      	ldr	r1, [pc, #56]	; (8001614 <roundPID+0x114>)
 80015dc:	e9c1 2300 	strd	r2, r3, [r1]
	errorpos_last = errorpos;	              // 保存上次偏差
 80015e0:	490b      	ldr	r1, [pc, #44]	; (8001610 <roundPID+0x110>)
 80015e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015e6:	e9c1 2300 	strd	r2, r3, [r1]
	return pos_pid;
 80015ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bdb0      	pop	{r4, r5, r7, pc}
 80015f8:	b851eb85 	.word	0xb851eb85
 80015fc:	3fff851e 	.word	0x3fff851e
 8001600:	47ae147b 	.word	0x47ae147b
 8001604:	3fa47ae1 	.word	0x3fa47ae1
 8001608:	eb851eb8 	.word	0xeb851eb8
 800160c:	3faeb851 	.word	0x3faeb851
 8001610:	20000030 	.word	0x20000030
 8001614:	20000038 	.word	0x20000038

08001618 <spin>:
void spin(short spin_dir)//spin_dir=1:left   spin_dir=2:right
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
	if(spin_dir==1)
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d106      	bne.n	8001638 <spin+0x20>
	{
		lefttarget = -spinspeed;
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <spin+0x98>)
 800162c:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <spin+0x9c>)
 800162e:	601a      	str	r2, [r3, #0]
		righttarget = spinspeed;
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <spin+0xa0>)
 8001632:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001636:	601a      	str	r2, [r3, #0]
	}
	if(spin_dir==2)
 8001638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d106      	bne.n	800164e <spin+0x36>
	{
		lefttarget = spinspeed;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <spin+0x98>)
 8001642:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001646:	601a      	str	r2, [r3, #0]
		righttarget = -spinspeed;
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <spin+0xa0>)
 800164a:	4a1a      	ldr	r2, [pc, #104]	; (80016b4 <spin+0x9c>)
 800164c:	601a      	str	r2, [r3, #0]
	}
	if(spin_dir==0)
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d105      	bne.n	8001662 <spin+0x4a>
	{
		lefttarget = 0;
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <spin+0x98>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
		righttarget =0;
 800165c:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <spin+0xa0>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
	}
	if (lefttarget > maxtarget)
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <spin+0x98>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800166a:	dd03      	ble.n	8001674 <spin+0x5c>
		{lefttarget = maxtarget;}
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <spin+0x98>)
 800166e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001672:	601a      	str	r2, [r3, #0]
	if (righttarget > maxtarget)
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <spin+0xa0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800167c:	dd03      	ble.n	8001686 <spin+0x6e>
		{righttarget = maxtarget;}
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <spin+0xa0>)
 8001680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001684:	601a      	str	r2, [r3, #0]
	if (lefttarget < -maxtarget)
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <spin+0x98>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800168e:	da02      	bge.n	8001696 <spin+0x7e>
		{lefttarget = -maxtarget;}
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <spin+0x98>)
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <spin+0xa4>)
 8001694:	601a      	str	r2, [r3, #0]
	if (righttarget < -maxtarget)
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <spin+0xa0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800169e:	da02      	bge.n	80016a6 <spin+0x8e>
		{righttarget = -maxtarget;}
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <spin+0xa0>)
 80016a2:	4a06      	ldr	r2, [pc, #24]	; (80016bc <spin+0xa4>)
 80016a4:	601a      	str	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000108 	.word	0x20000108
 80016b4:	fffffefc 	.word	0xfffffefc
 80016b8:	20000094 	.word	0x20000094
 80016bc:	fffffc18 	.word	0xfffffc18

080016c0 <groundturn>:
void groundturn(short spin_dir,short angle)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	460a      	mov	r2, r1
 80016ca:	80fb      	strh	r3, [r7, #6]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80bb      	strh	r3, [r7, #4]
	avoid_stop();
 80016d0:	f000 fbe6 	bl	8001ea0 <avoid_stop>
	spin(spin_dir);
 80016d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff9d 	bl	8001618 <spin>
	is_groundturn=spin_dir;
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <groundturn+0x60>)
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	8013      	strh	r3, [r2, #0]
	turn_target=(short)angle/6.8;
 80016e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe feef 	bl	80004cc <__aeabi_i2d>
 80016ee:	a30a      	add	r3, pc, #40	; (adr r3, 8001718 <groundturn+0x58>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7ff f87e 	bl	80007f4 <__aeabi_ddiv>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff f9e8 	bl	8000ad4 <__aeabi_d2iz>
 8001704:	4603      	mov	r3, r0
 8001706:	b21a      	sxth	r2, r3
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <groundturn+0x64>)
 800170a:	801a      	strh	r2, [r3, #0]
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	f3af 8000 	nop.w
 8001718:	33333333 	.word	0x33333333
 800171c:	401b3333 	.word	0x401b3333
 8001720:	20000124 	.word	0x20000124
 8001724:	200000f4 	.word	0x200000f4

08001728 <fetchplace>:
void fetchplace()
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	if(is_fetch==0){
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <fetchplace+0x80>)
 800172e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d118      	bne.n	8001768 <fetchplace+0x40>
		is_down=0;
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <fetchplace+0x84>)
 8001738:	2200      	movs	r2, #0
 800173a:	801a      	strh	r2, [r3, #0]
		is_shut=0;
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <fetchplace+0x88>)
 800173e:	2200      	movs	r2, #0
 8001740:	801a      	strh	r2, [r3, #0]
		servo1_down();
 8001742:	f002 f81f 	bl	8003784 <servo1_down>
		servo2_shut();
 8001746:	f002 f857 	bl	80037f8 <servo2_shut>
		is_down=1;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <fetchplace+0x84>)
 800174c:	2201      	movs	r2, #1
 800174e:	801a      	strh	r2, [r3, #0]
		is_shut=1;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <fetchplace+0x88>)
 8001752:	2201      	movs	r2, #1
 8001754:	801a      	strh	r2, [r3, #0]
		servo1_down();
 8001756:	f002 f815 	bl	8003784 <servo1_down>
		is_fetch=1;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <fetchplace+0x80>)
 800175c:	2201      	movs	r2, #1
 800175e:	801a      	strh	r2, [r3, #0]
		is_down=0;
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <fetchplace+0x84>)
 8001762:	2200      	movs	r2, #0
 8001764:	801a      	strh	r2, [r3, #0]
		is_shut=0;
		servo1_down();
		is_fetch=0;
		is_down=0;
	}
}
 8001766:	e01c      	b.n	80017a2 <fetchplace+0x7a>
	else if(is_fetch==1){
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <fetchplace+0x80>)
 800176a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d117      	bne.n	80017a2 <fetchplace+0x7a>
		is_down=0;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <fetchplace+0x84>)
 8001774:	2200      	movs	r2, #0
 8001776:	801a      	strh	r2, [r3, #0]
		is_shut=1;
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <fetchplace+0x88>)
 800177a:	2201      	movs	r2, #1
 800177c:	801a      	strh	r2, [r3, #0]
		servo1_down();
 800177e:	f002 f801 	bl	8003784 <servo1_down>
		servo2_shut();
 8001782:	f002 f839 	bl	80037f8 <servo2_shut>
		is_down=1;
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <fetchplace+0x84>)
 8001788:	2201      	movs	r2, #1
 800178a:	801a      	strh	r2, [r3, #0]
		is_shut=0;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <fetchplace+0x88>)
 800178e:	2200      	movs	r2, #0
 8001790:	801a      	strh	r2, [r3, #0]
		servo1_down();
 8001792:	f001 fff7 	bl	8003784 <servo1_down>
		is_fetch=0;
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <fetchplace+0x80>)
 8001798:	2200      	movs	r2, #0
 800179a:	801a      	strh	r2, [r3, #0]
		is_down=0;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <fetchplace+0x84>)
 800179e:	2200      	movs	r2, #0
 80017a0:	801a      	strh	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000112 	.word	0x20000112
 80017ac:	200000a8 	.word	0x200000a8
 80017b0:	20000126 	.word	0x20000126

080017b4 <alongside>:
void alongside(double deviation)
{
 80017b4:	b5b0      	push	{r4, r5, r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	e9c7 0100 	strd	r0, r1, [r7]
	double curvdifference = roundPID(0,deviation,&curv_error);
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <alongside+0xac>)
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017c6:	f04f 0000 	mov.w	r0, #0
 80017ca:	f04f 0100 	mov.w	r1, #0
 80017ce:	f7ff fe97 	bl	8001500 <roundPID>
 80017d2:	e9c7 0104 	strd	r0, r1, [r7, #16]
	curvature +=(short)curvdifference;
 80017d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017da:	f7ff f97b 	bl	8000ad4 <__aeabi_d2iz>
 80017de:	4603      	mov	r3, r0
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <alongside+0xb0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <alongside+0xb0>)
 80017ec:	6013      	str	r3, [r2, #0]
	int target=(int)(targetspeed-0.5*curvature);
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <alongside+0xb4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fe6a 	bl	80004cc <__aeabi_i2d>
 80017f8:	4604      	mov	r4, r0
 80017fa:	460d      	mov	r5, r1
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <alongside+0xb0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fe63 	bl	80004cc <__aeabi_i2d>
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <alongside+0xb8>)
 800180c:	f7fe fec8 	bl	80005a0 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4620      	mov	r0, r4
 8001816:	4629      	mov	r1, r5
 8001818:	f7fe fd0a 	bl	8000230 <__aeabi_dsub>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f956 	bl	8000ad4 <__aeabi_d2iz>
 8001828:	4603      	mov	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]
	if(curvature>maxcurvature)
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <alongside+0xb0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b64      	cmp	r3, #100	; 0x64
 8001832:	dd02      	ble.n	800183a <alongside+0x86>
		{curvature = maxcurvature;}
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <alongside+0xb0>)
 8001836:	2264      	movs	r2, #100	; 0x64
 8001838:	601a      	str	r2, [r3, #0]
	if(curvature<-maxcurvature)
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <alongside+0xb0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001842:	da03      	bge.n	800184c <alongside+0x98>
		{curvature = -maxcurvature;}
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <alongside+0xb0>)
 8001846:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800184a:	601a      	str	r2, [r3, #0]
	setspeed(target,curvature);
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <alongside+0xb0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7ff fdea 	bl	800142c <setspeed>
}
 8001858:	bf00      	nop
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bdb0      	pop	{r4, r5, r7, pc}
 8001860:	200000d8 	.word	0x200000d8
 8001864:	200000f0 	.word	0x200000f0
 8001868:	2000008c 	.word	0x2000008c
 800186c:	3fe00000 	.word	0x3fe00000

08001870 <avoidance>:
void avoidance()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	is_close1=get_distance1();
 8001874:	f002 f812 	bl	800389c <get_distance1>
 8001878:	4603      	mov	r3, r0
 800187a:	4aa2      	ldr	r2, [pc, #648]	; (8001b04 <avoidance+0x294>)
 800187c:	6013      	str	r3, [r2, #0]
	if((is_close1<20)||(is_close1>1000)){is_close1=1000;}
 800187e:	4ba1      	ldr	r3, [pc, #644]	; (8001b04 <avoidance+0x294>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b13      	cmp	r3, #19
 8001884:	dd04      	ble.n	8001890 <avoidance+0x20>
 8001886:	4b9f      	ldr	r3, [pc, #636]	; (8001b04 <avoidance+0x294>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800188e:	dd03      	ble.n	8001898 <avoidance+0x28>
 8001890:	4b9c      	ldr	r3, [pc, #624]	; (8001b04 <avoidance+0x294>)
 8001892:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001896:	601a      	str	r2, [r3, #0]
	is_close2=get_distance2();
 8001898:	f002 f82c 	bl	80038f4 <get_distance2>
 800189c:	4603      	mov	r3, r0
 800189e:	4a9a      	ldr	r2, [pc, #616]	; (8001b08 <avoidance+0x298>)
 80018a0:	6013      	str	r3, [r2, #0]
	if((is_close2<20)||(is_close2>1000)){is_close2=1000;}
 80018a2:	4b99      	ldr	r3, [pc, #612]	; (8001b08 <avoidance+0x298>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b13      	cmp	r3, #19
 80018a8:	dd04      	ble.n	80018b4 <avoidance+0x44>
 80018aa:	4b97      	ldr	r3, [pc, #604]	; (8001b08 <avoidance+0x298>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018b2:	dd03      	ble.n	80018bc <avoidance+0x4c>
 80018b4:	4b94      	ldr	r3, [pc, #592]	; (8001b08 <avoidance+0x298>)
 80018b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ba:	601a      	str	r2, [r3, #0]
	is_close3=get_distance3();
 80018bc:	f002 f846 	bl	800394c <get_distance3>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4a92      	ldr	r2, [pc, #584]	; (8001b0c <avoidance+0x29c>)
 80018c4:	6013      	str	r3, [r2, #0]
	if((is_close3<20)||(is_close3>1000)){is_close3=1000;}
 80018c6:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <avoidance+0x29c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b13      	cmp	r3, #19
 80018cc:	dd04      	ble.n	80018d8 <avoidance+0x68>
 80018ce:	4b8f      	ldr	r3, [pc, #572]	; (8001b0c <avoidance+0x29c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018d6:	dd03      	ble.n	80018e0 <avoidance+0x70>
 80018d8:	4b8c      	ldr	r3, [pc, #560]	; (8001b0c <avoidance+0x29c>)
 80018da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018de:	601a      	str	r2, [r3, #0]
	is_close4=get_distance4();
 80018e0:	f002 f860 	bl	80039a4 <get_distance4>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a8a      	ldr	r2, [pc, #552]	; (8001b10 <avoidance+0x2a0>)
 80018e8:	6013      	str	r3, [r2, #0]
	if((is_close4<10)||(is_close4>1000)){is_close4=1000;}
 80018ea:	4b89      	ldr	r3, [pc, #548]	; (8001b10 <avoidance+0x2a0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	dd04      	ble.n	80018fc <avoidance+0x8c>
 80018f2:	4b87      	ldr	r3, [pc, #540]	; (8001b10 <avoidance+0x2a0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018fa:	dd03      	ble.n	8001904 <avoidance+0x94>
 80018fc:	4b84      	ldr	r3, [pc, #528]	; (8001b10 <avoidance+0x2a0>)
 80018fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001902:	601a      	str	r2, [r3, #0]
	if (avoid_dir==0){
 8001904:	4b83      	ldr	r3, [pc, #524]	; (8001b14 <avoidance+0x2a4>)
 8001906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8116 	bne.w	8001b3c <avoidance+0x2cc>
		if (((is_close2<260)&&(is_close1<220))||(is_close2<50)){
 8001910:	4b7d      	ldr	r3, [pc, #500]	; (8001b08 <avoidance+0x298>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001918:	da03      	bge.n	8001922 <avoidance+0xb2>
 800191a:	4b7a      	ldr	r3, [pc, #488]	; (8001b04 <avoidance+0x294>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2bdb      	cmp	r3, #219	; 0xdb
 8001920:	dd03      	ble.n	800192a <avoidance+0xba>
 8001922:	4b79      	ldr	r3, [pc, #484]	; (8001b08 <avoidance+0x298>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b31      	cmp	r3, #49	; 0x31
 8001928:	dc07      	bgt.n	800193a <avoidance+0xca>
			avoid_dir = 2;
 800192a:	4b7a      	ldr	r3, [pc, #488]	; (8001b14 <avoidance+0x2a4>)
 800192c:	2202      	movs	r2, #2
 800192e:	801a      	strh	r2, [r3, #0]
			groundturn(2,90);			//原地右转并前进
 8001930:	215a      	movs	r1, #90	; 0x5a
 8001932:	2002      	movs	r0, #2
 8001934:	f7ff fec4 	bl	80016c0 <groundturn>
 8001938:	e2a4      	b.n	8001e84 <avoidance+0x614>
		}
		else if (((is_close3<260)&&(is_close1<220))||(is_close3<50)){
 800193a:	4b74      	ldr	r3, [pc, #464]	; (8001b0c <avoidance+0x29c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001942:	da03      	bge.n	800194c <avoidance+0xdc>
 8001944:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <avoidance+0x294>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2bdb      	cmp	r3, #219	; 0xdb
 800194a:	dd03      	ble.n	8001954 <avoidance+0xe4>
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <avoidance+0x29c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b31      	cmp	r3, #49	; 0x31
 8001952:	dc07      	bgt.n	8001964 <avoidance+0xf4>
			avoid_dir = 1;
 8001954:	4b6f      	ldr	r3, [pc, #444]	; (8001b14 <avoidance+0x2a4>)
 8001956:	2201      	movs	r2, #1
 8001958:	801a      	strh	r2, [r3, #0]
			groundturn(1,90);	     //原地左转并前进
 800195a:	215a      	movs	r1, #90	; 0x5a
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff feaf 	bl	80016c0 <groundturn>
 8001962:	e28f      	b.n	8001e84 <avoidance+0x614>
		}
		else if ((is_close1<200)&&(is_close1>=60)){  //任意左右转
 8001964:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <avoidance+0x294>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2bc7      	cmp	r3, #199	; 0xc7
 800196a:	dc28      	bgt.n	80019be <avoidance+0x14e>
 800196c:	4b65      	ldr	r3, [pc, #404]	; (8001b04 <avoidance+0x294>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b3b      	cmp	r3, #59	; 0x3b
 8001972:	dd24      	ble.n	80019be <avoidance+0x14e>
			avoid_comfirm= 1-avoid_comfirm;
 8001974:	4b68      	ldr	r3, [pc, #416]	; (8001b18 <avoidance+0x2a8>)
 8001976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197a:	b29b      	uxth	r3, r3
 800197c:	f1c3 0301 	rsb	r3, r3, #1
 8001980:	b29b      	uxth	r3, r3
 8001982:	b21a      	sxth	r2, r3
 8001984:	4b64      	ldr	r3, [pc, #400]	; (8001b18 <avoidance+0x2a8>)
 8001986:	801a      	strh	r2, [r3, #0]
			if(avoid_comfirm==0){
 8001988:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <avoidance+0x2a8>)
 800198a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d107      	bne.n	80019a2 <avoidance+0x132>
				avoid_dir=1;
 8001992:	4b60      	ldr	r3, [pc, #384]	; (8001b14 <avoidance+0x2a4>)
 8001994:	2201      	movs	r2, #1
 8001996:	801a      	strh	r2, [r3, #0]
				groundturn(1,90);
 8001998:	215a      	movs	r1, #90	; 0x5a
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff fe90 	bl	80016c0 <groundturn>
			if(avoid_comfirm==0){
 80019a0:	e26d      	b.n	8001e7e <avoidance+0x60e>
			}   //左转并前进
			else if(avoid_comfirm==1){
 80019a2:	4b5d      	ldr	r3, [pc, #372]	; (8001b18 <avoidance+0x2a8>)
 80019a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	f040 8268 	bne.w	8001e7e <avoidance+0x60e>
				avoid_dir=2;
 80019ae:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <avoidance+0x2a4>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	801a      	strh	r2, [r3, #0]
				groundturn(2,90);
 80019b4:	215a      	movs	r1, #90	; 0x5a
 80019b6:	2002      	movs	r0, #2
 80019b8:	f7ff fe82 	bl	80016c0 <groundturn>
			if(avoid_comfirm==0){
 80019bc:	e25f      	b.n	8001e7e <avoidance+0x60e>
			}  //右转并前进
		}
		else if((is_close1<60)||(is_close2<40)||(is_close3<40)){
 80019be:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <avoidance+0x294>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b3b      	cmp	r3, #59	; 0x3b
 80019c4:	dd07      	ble.n	80019d6 <avoidance+0x166>
 80019c6:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <avoidance+0x298>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b27      	cmp	r3, #39	; 0x27
 80019cc:	dd03      	ble.n	80019d6 <avoidance+0x166>
 80019ce:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <avoidance+0x29c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b27      	cmp	r3, #39	; 0x27
 80019d4:	dc3e      	bgt.n	8001a54 <avoidance+0x1e4>
			if(back_flag==0){
 80019d6:	4b51      	ldr	r3, [pc, #324]	; (8001b1c <avoidance+0x2ac>)
 80019d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d112      	bne.n	8001a06 <avoidance+0x196>
			    avoid_stop();
 80019e0:	f000 fa5e 	bl	8001ea0 <avoid_stop>
			    setspeed(-targetspeed,0);
 80019e4:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <avoidance+0x2b0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	425b      	negs	r3, r3
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fd1d 	bl	800142c <setspeed>
			    back_flag+=1;
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <avoidance+0x2ac>)
 80019f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <avoidance+0x2ac>)
 8001a02:	801a      	strh	r2, [r3, #0]
			if(back_flag==0){
 8001a04:	e23d      	b.n	8001e82 <avoidance+0x612>
			}
			else if((back_flag>0)&&(back_flag<10)){
 8001a06:	4b45      	ldr	r3, [pc, #276]	; (8001b1c <avoidance+0x2ac>)
 8001a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	dd15      	ble.n	8001a3c <avoidance+0x1cc>
 8001a10:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <avoidance+0x2ac>)
 8001a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a16:	2b09      	cmp	r3, #9
 8001a18:	dc10      	bgt.n	8001a3c <avoidance+0x1cc>
				setspeed(-targetspeed,0);
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <avoidance+0x2b0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	425b      	negs	r3, r3
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fd02 	bl	800142c <setspeed>
				back_flag+=1;
 8001a28:	4b3c      	ldr	r3, [pc, #240]	; (8001b1c <avoidance+0x2ac>)
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3301      	adds	r3, #1
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <avoidance+0x2ac>)
 8001a38:	801a      	strh	r2, [r3, #0]
			if(back_flag==0){
 8001a3a:	e222      	b.n	8001e82 <avoidance+0x612>
			}
			else if(back_flag==10){
 8001a3c:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <avoidance+0x2ac>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	2b0a      	cmp	r3, #10
 8001a44:	f040 821d 	bne.w	8001e82 <avoidance+0x612>
				avoid_stop();
 8001a48:	f000 fa2a 	bl	8001ea0 <avoid_stop>
				back_flag=0;
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <avoidance+0x2ac>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	801a      	strh	r2, [r3, #0]
			if(back_flag==0){
 8001a52:	e216      	b.n	8001e82 <avoidance+0x612>
			}
		}
		else {
			if(check_flag==20){
 8001a54:	4b33      	ldr	r3, [pc, #204]	; (8001b24 <avoidance+0x2b4>)
 8001a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5a:	2b14      	cmp	r3, #20
 8001a5c:	d142      	bne.n	8001ae4 <avoidance+0x274>
			    if ((theta<320)&&(theta>180)){groundturn(1,360-theta);}//左转回正
 8001a5e:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <avoidance+0x2b8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4932      	ldr	r1, [pc, #200]	; (8001b2c <avoidance+0x2bc>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fb09 	bl	800107c <__aeabi_fcmplt>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d019      	beq.n	8001aa4 <avoidance+0x234>
 8001a70:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <avoidance+0x2b8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	492e      	ldr	r1, [pc, #184]	; (8001b30 <avoidance+0x2c0>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fb1e 	bl	80010b8 <__aeabi_fcmpgt>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d010      	beq.n	8001aa4 <avoidance+0x234>
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <avoidance+0x2b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	482a      	ldr	r0, [pc, #168]	; (8001b34 <avoidance+0x2c4>)
 8001a8a:	f7ff f84f 	bl	8000b2c <__aeabi_fsub>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fb1b 	bl	80010cc <__aeabi_f2iz>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7ff fe0f 	bl	80016c0 <groundturn>
 8001aa2:	e01c      	b.n	8001ade <avoidance+0x26e>
				else if ((theta>40)&&(theta<=180)){groundturn(2,theta);}//右转回正
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <avoidance+0x2b8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4923      	ldr	r1, [pc, #140]	; (8001b38 <avoidance+0x2c8>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fb04 	bl	80010b8 <__aeabi_fcmpgt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d013      	beq.n	8001ade <avoidance+0x26e>
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <avoidance+0x2b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	491d      	ldr	r1, [pc, #116]	; (8001b30 <avoidance+0x2c0>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fae7 	bl	8001090 <__aeabi_fcmple>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00a      	beq.n	8001ade <avoidance+0x26e>
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <avoidance+0x2b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fafd 	bl	80010cc <__aeabi_f2iz>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	b21b      	sxth	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f7ff fdf1 	bl	80016c0 <groundturn>
			    check_flag=0;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <avoidance+0x2b4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	801a      	strh	r2, [r3, #0]
			}
			check_flag+=1;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <avoidance+0x2b4>)
 8001ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <avoidance+0x2b4>)
 8001af4:	801a      	strh	r2, [r3, #0]
			setspeed(targetspeed,0);
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <avoidance+0x2b0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fc95 	bl	800142c <setspeed>
			avoid_dir = 2;
			groundturn(1,90);     //左转，即向右走
		}
		else {setspeed(targetspeed,0);}     //不改变方向
	}
}
 8001b02:	e1bf      	b.n	8001e84 <avoidance+0x614>
 8001b04:	20000088 	.word	0x20000088
 8001b08:	200000b8 	.word	0x200000b8
 8001b0c:	200000ac 	.word	0x200000ac
 8001b10:	2000007c 	.word	0x2000007c
 8001b14:	20000110 	.word	0x20000110
 8001b18:	200000ec 	.word	0x200000ec
 8001b1c:	20000078 	.word	0x20000078
 8001b20:	2000008c 	.word	0x2000008c
 8001b24:	200000d0 	.word	0x200000d0
 8001b28:	200000b4 	.word	0x200000b4
 8001b2c:	43a00000 	.word	0x43a00000
 8001b30:	43340000 	.word	0x43340000
 8001b34:	43b40000 	.word	0x43b40000
 8001b38:	42200000 	.word	0x42200000
	else if (avoid_dir==1){
 8001b3c:	4b9d      	ldr	r3, [pc, #628]	; (8001db4 <avoidance+0x544>)
 8001b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d144      	bne.n	8001bd0 <avoidance+0x360>
		if ((is_close3>230)&&(is_close4>400)&&(is_close4<=1000)&&(servo_angle==180)){
 8001b46:	4b9c      	ldr	r3, [pc, #624]	; (8001db8 <avoidance+0x548>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2be6      	cmp	r3, #230	; 0xe6
 8001b4c:	dd16      	ble.n	8001b7c <avoidance+0x30c>
 8001b4e:	4b9b      	ldr	r3, [pc, #620]	; (8001dbc <avoidance+0x54c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001b56:	dd11      	ble.n	8001b7c <avoidance+0x30c>
 8001b58:	4b98      	ldr	r3, [pc, #608]	; (8001dbc <avoidance+0x54c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b60:	dc0c      	bgt.n	8001b7c <avoidance+0x30c>
 8001b62:	4b97      	ldr	r3, [pc, #604]	; (8001dc0 <avoidance+0x550>)
 8001b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b68:	2bb4      	cmp	r3, #180	; 0xb4
 8001b6a:	d107      	bne.n	8001b7c <avoidance+0x30c>
			avoid_dir= 0;
 8001b6c:	4b91      	ldr	r3, [pc, #580]	; (8001db4 <avoidance+0x544>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	801a      	strh	r2, [r3, #0]
			groundturn(2,90);           //右转，即恢复向前走
 8001b72:	215a      	movs	r1, #90	; 0x5a
 8001b74:	2002      	movs	r0, #2
 8001b76:	f7ff fda3 	bl	80016c0 <groundturn>
 8001b7a:	e183      	b.n	8001e84 <avoidance+0x614>
		else if(((is_close1<230)&&(is_close3<230))||(is_close1<100)){
 8001b7c:	4b91      	ldr	r3, [pc, #580]	; (8001dc4 <avoidance+0x554>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2be5      	cmp	r3, #229	; 0xe5
 8001b82:	dc03      	bgt.n	8001b8c <avoidance+0x31c>
 8001b84:	4b8c      	ldr	r3, [pc, #560]	; (8001db8 <avoidance+0x548>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2be5      	cmp	r3, #229	; 0xe5
 8001b8a:	dd03      	ble.n	8001b94 <avoidance+0x324>
 8001b8c:	4b8d      	ldr	r3, [pc, #564]	; (8001dc4 <avoidance+0x554>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b63      	cmp	r3, #99	; 0x63
 8001b92:	dc11      	bgt.n	8001bb8 <avoidance+0x348>
			avoid_dir=3;
 8001b94:	4b87      	ldr	r3, [pc, #540]	; (8001db4 <avoidance+0x544>)
 8001b96:	2203      	movs	r2, #3
 8001b98:	801a      	strh	r2, [r3, #0]
			avoid_stop();
 8001b9a:	f000 f981 	bl	8001ea0 <avoid_stop>
			setspeed(-targetspeed,0);//后退，退退退！
 8001b9e:	4b8a      	ldr	r3, [pc, #552]	; (8001dc8 <avoidance+0x558>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	425b      	negs	r3, r3
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fc40 	bl	800142c <setspeed>
			total_distance-=1;
 8001bac:	4b87      	ldr	r3, [pc, #540]	; (8001dcc <avoidance+0x55c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	4a86      	ldr	r2, [pc, #536]	; (8001dcc <avoidance+0x55c>)
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e165      	b.n	8001e84 <avoidance+0x614>
			setspeed(targetspeed,0);    //继续直走，即向左走
 8001bb8:	4b83      	ldr	r3, [pc, #524]	; (8001dc8 <avoidance+0x558>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fc34 	bl	800142c <setspeed>
			total_distance+=1;
 8001bc4:	4b81      	ldr	r3, [pc, #516]	; (8001dcc <avoidance+0x55c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4a80      	ldr	r2, [pc, #512]	; (8001dcc <avoidance+0x55c>)
 8001bcc:	6013      	str	r3, [r2, #0]
}
 8001bce:	e159      	b.n	8001e84 <avoidance+0x614>
	else if (avoid_dir==2){
 8001bd0:	4b78      	ldr	r3, [pc, #480]	; (8001db4 <avoidance+0x544>)
 8001bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d144      	bne.n	8001c64 <avoidance+0x3f4>
		if((is_close2>230)&&(is_close4>400)&&(is_close4<=1000)&&(0==servo_angle)){
 8001bda:	4b7d      	ldr	r3, [pc, #500]	; (8001dd0 <avoidance+0x560>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2be6      	cmp	r3, #230	; 0xe6
 8001be0:	dd16      	ble.n	8001c10 <avoidance+0x3a0>
 8001be2:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <avoidance+0x54c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001bea:	dd11      	ble.n	8001c10 <avoidance+0x3a0>
 8001bec:	4b73      	ldr	r3, [pc, #460]	; (8001dbc <avoidance+0x54c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bf4:	dc0c      	bgt.n	8001c10 <avoidance+0x3a0>
 8001bf6:	4b72      	ldr	r3, [pc, #456]	; (8001dc0 <avoidance+0x550>)
 8001bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <avoidance+0x3a0>
			avoid_dir= 0;
 8001c00:	4b6c      	ldr	r3, [pc, #432]	; (8001db4 <avoidance+0x544>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	801a      	strh	r2, [r3, #0]
			groundturn(1,90);	 		//左转，即恢复向前走
 8001c06:	215a      	movs	r1, #90	; 0x5a
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff fd59 	bl	80016c0 <groundturn>
 8001c0e:	e139      	b.n	8001e84 <avoidance+0x614>
		else if(((is_close1<230)&&(is_close2<230))||(is_close1<100)){
 8001c10:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <avoidance+0x554>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2be5      	cmp	r3, #229	; 0xe5
 8001c16:	dc03      	bgt.n	8001c20 <avoidance+0x3b0>
 8001c18:	4b6d      	ldr	r3, [pc, #436]	; (8001dd0 <avoidance+0x560>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2be5      	cmp	r3, #229	; 0xe5
 8001c1e:	dd03      	ble.n	8001c28 <avoidance+0x3b8>
 8001c20:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <avoidance+0x554>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b63      	cmp	r3, #99	; 0x63
 8001c26:	dc11      	bgt.n	8001c4c <avoidance+0x3dc>
			avoid_dir=4;
 8001c28:	4b62      	ldr	r3, [pc, #392]	; (8001db4 <avoidance+0x544>)
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	801a      	strh	r2, [r3, #0]
			avoid_stop();
 8001c2e:	f000 f937 	bl	8001ea0 <avoid_stop>
			setspeed(-targetspeed,0);		//后退，退退退！
 8001c32:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <avoidance+0x558>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	425b      	negs	r3, r3
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fbf6 	bl	800142c <setspeed>
			total_distance+=1;
 8001c40:	4b62      	ldr	r3, [pc, #392]	; (8001dcc <avoidance+0x55c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3301      	adds	r3, #1
 8001c46:	4a61      	ldr	r2, [pc, #388]	; (8001dcc <avoidance+0x55c>)
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e11b      	b.n	8001e84 <avoidance+0x614>
			setspeed(targetspeed,0);     //继续直走，即向右走
 8001c4c:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <avoidance+0x558>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fbea 	bl	800142c <setspeed>
			total_distance-=1;
 8001c58:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <avoidance+0x55c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	4a5b      	ldr	r2, [pc, #364]	; (8001dcc <avoidance+0x55c>)
 8001c60:	6013      	str	r3, [r2, #0]
}
 8001c62:	e10f      	b.n	8001e84 <avoidance+0x614>
	else if (avoid_dir==3){
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <avoidance+0x544>)
 8001c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d140      	bne.n	8001cf0 <avoidance+0x480>
		if ((is_close3>230)&&(is_close4>300)&&(servo_angle==180)){
 8001c6e:	4b52      	ldr	r3, [pc, #328]	; (8001db8 <avoidance+0x548>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2be6      	cmp	r3, #230	; 0xe6
 8001c74:	dd11      	ble.n	8001c9a <avoidance+0x42a>
 8001c76:	4b51      	ldr	r3, [pc, #324]	; (8001dbc <avoidance+0x54c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c7e:	dd0c      	ble.n	8001c9a <avoidance+0x42a>
 8001c80:	4b4f      	ldr	r3, [pc, #316]	; (8001dc0 <avoidance+0x550>)
 8001c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c86:	2bb4      	cmp	r3, #180	; 0xb4
 8001c88:	d107      	bne.n	8001c9a <avoidance+0x42a>
			avoid_dir= 0;
 8001c8a:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <avoidance+0x544>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	801a      	strh	r2, [r3, #0]
			groundturn(2,90);		//右转，即恢复向前走
 8001c90:	215a      	movs	r1, #90	; 0x5a
 8001c92:	2002      	movs	r0, #2
 8001c94:	f7ff fd14 	bl	80016c0 <groundturn>
 8001c98:	e0f4      	b.n	8001e84 <avoidance+0x614>
		else if (((is_close3<230)&&(is_close4<120)&&(servo_angle==90))||((is_close4<80)&&(servo_angle==90))){
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <avoidance+0x548>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2be5      	cmp	r3, #229	; 0xe5
 8001ca0:	dc08      	bgt.n	8001cb4 <avoidance+0x444>
 8001ca2:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <avoidance+0x54c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b77      	cmp	r3, #119	; 0x77
 8001ca8:	dc04      	bgt.n	8001cb4 <avoidance+0x444>
 8001caa:	4b45      	ldr	r3, [pc, #276]	; (8001dc0 <avoidance+0x550>)
 8001cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb0:	2b5a      	cmp	r3, #90	; 0x5a
 8001cb2:	d008      	beq.n	8001cc6 <avoidance+0x456>
 8001cb4:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <avoidance+0x54c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b4f      	cmp	r3, #79	; 0x4f
 8001cba:	dc0c      	bgt.n	8001cd6 <avoidance+0x466>
 8001cbc:	4b40      	ldr	r3, [pc, #256]	; (8001dc0 <avoidance+0x550>)
 8001cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc2:	2b5a      	cmp	r3, #90	; 0x5a
 8001cc4:	d107      	bne.n	8001cd6 <avoidance+0x466>
			avoid_dir = 5;
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <avoidance+0x544>)
 8001cc8:	2205      	movs	r2, #5
 8001cca:	801a      	strh	r2, [r3, #0]
			groundturn(1,90);      //左转，即向起点方向走
 8001ccc:	215a      	movs	r1, #90	; 0x5a
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff fcf6 	bl	80016c0 <groundturn>
 8001cd4:	e0d6      	b.n	8001e84 <avoidance+0x614>
	    	setspeed(-targetspeed,0);   //继续退！
 8001cd6:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <avoidance+0x558>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	425b      	negs	r3, r3
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fba4 	bl	800142c <setspeed>
	    	total_distance-=1;
 8001ce4:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <avoidance+0x55c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	4a38      	ldr	r2, [pc, #224]	; (8001dcc <avoidance+0x55c>)
 8001cec:	6013      	str	r3, [r2, #0]
}
 8001cee:	e0c9      	b.n	8001e84 <avoidance+0x614>
	else if (avoid_dir==4){
 8001cf0:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <avoidance+0x544>)
 8001cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d140      	bne.n	8001d7c <avoidance+0x50c>
		if ((is_close2>230)&&(is_close4>300)&&(0==servo_angle)){
 8001cfa:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <avoidance+0x560>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2be6      	cmp	r3, #230	; 0xe6
 8001d00:	dd11      	ble.n	8001d26 <avoidance+0x4b6>
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <avoidance+0x54c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d0a:	dd0c      	ble.n	8001d26 <avoidance+0x4b6>
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <avoidance+0x550>)
 8001d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <avoidance+0x4b6>
			avoid_dir= 0;
 8001d16:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <avoidance+0x544>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	801a      	strh	r2, [r3, #0]
			groundturn(1,90);		//左转，即恢复向前走
 8001d1c:	215a      	movs	r1, #90	; 0x5a
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7ff fcce 	bl	80016c0 <groundturn>
 8001d24:	e0ae      	b.n	8001e84 <avoidance+0x614>
		else if (((is_close2<230)&&(is_close4<120)&&(servo_angle==90))||((is_close4<80)&&(servo_angle==90))) {
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <avoidance+0x560>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2be5      	cmp	r3, #229	; 0xe5
 8001d2c:	dc08      	bgt.n	8001d40 <avoidance+0x4d0>
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <avoidance+0x54c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b77      	cmp	r3, #119	; 0x77
 8001d34:	dc04      	bgt.n	8001d40 <avoidance+0x4d0>
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <avoidance+0x550>)
 8001d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3c:	2b5a      	cmp	r3, #90	; 0x5a
 8001d3e:	d008      	beq.n	8001d52 <avoidance+0x4e2>
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <avoidance+0x54c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b4f      	cmp	r3, #79	; 0x4f
 8001d46:	dc0c      	bgt.n	8001d62 <avoidance+0x4f2>
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <avoidance+0x550>)
 8001d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4e:	2b5a      	cmp	r3, #90	; 0x5a
 8001d50:	d107      	bne.n	8001d62 <avoidance+0x4f2>
			avoid_dir = 6;
 8001d52:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <avoidance+0x544>)
 8001d54:	2206      	movs	r2, #6
 8001d56:	801a      	strh	r2, [r3, #0]
			groundturn(2,90);      //右转，即向起点方向走
 8001d58:	215a      	movs	r1, #90	; 0x5a
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f7ff fcb0 	bl	80016c0 <groundturn>
 8001d60:	e090      	b.n	8001e84 <avoidance+0x614>
			setspeed(-targetspeed,0);   //继续退！
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <avoidance+0x558>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	425b      	negs	r3, r3
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fb5e 	bl	800142c <setspeed>
			total_distance+=1;
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <avoidance+0x55c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	4a15      	ldr	r2, [pc, #84]	; (8001dcc <avoidance+0x55c>)
 8001d78:	6013      	str	r3, [r2, #0]
}
 8001d7a:	e083      	b.n	8001e84 <avoidance+0x614>
	else if (avoid_dir == 5) {
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <avoidance+0x544>)
 8001d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d143      	bne.n	8001e0e <avoidance+0x59e>
		if ((is_close2 > 230) && (is_close4 > 400) && (servo_angle ==0) ) {
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <avoidance+0x560>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2be6      	cmp	r3, #230	; 0xe6
 8001d8c:	dd22      	ble.n	8001dd4 <avoidance+0x564>
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <avoidance+0x54c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001d96:	dd1d      	ble.n	8001dd4 <avoidance+0x564>
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <avoidance+0x550>)
 8001d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d118      	bne.n	8001dd4 <avoidance+0x564>
			avoid_dir = 2;
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <avoidance+0x544>)
 8001da4:	2202      	movs	r2, #2
 8001da6:	801a      	strh	r2, [r3, #0]
			groundturn(1,90);     //左转，即向右走
 8001da8:	215a      	movs	r1, #90	; 0x5a
 8001daa:	2001      	movs	r0, #1
 8001dac:	f7ff fc88 	bl	80016c0 <groundturn>
 8001db0:	e068      	b.n	8001e84 <avoidance+0x614>
 8001db2:	bf00      	nop
 8001db4:	20000110 	.word	0x20000110
 8001db8:	200000ac 	.word	0x200000ac
 8001dbc:	2000007c 	.word	0x2000007c
 8001dc0:	200000be 	.word	0x200000be
 8001dc4:	20000088 	.word	0x20000088
 8001dc8:	2000008c 	.word	0x2000008c
 8001dcc:	20000104 	.word	0x20000104
 8001dd0:	200000b8 	.word	0x200000b8
		else if((is_close3 > 230) && (is_close4 > 400) && (servo_angle ==180)){
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <avoidance+0x618>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2be6      	cmp	r3, #230	; 0xe6
 8001dda:	dd11      	ble.n	8001e00 <avoidance+0x590>
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <avoidance+0x61c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001de4:	dd0c      	ble.n	8001e00 <avoidance+0x590>
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <avoidance+0x620>)
 8001de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dec:	2bb4      	cmp	r3, #180	; 0xb4
 8001dee:	d107      	bne.n	8001e00 <avoidance+0x590>
			avoid_dir = 1;
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <avoidance+0x624>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	801a      	strh	r2, [r3, #0]
			groundturn(1,90);     //左转，即向右走
 8001df6:	215a      	movs	r1, #90	; 0x5a
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f7ff fc61 	bl	80016c0 <groundturn>
 8001dfe:	e041      	b.n	8001e84 <avoidance+0x614>
		else {setspeed(targetspeed,0);}   //不改变方向
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <avoidance+0x628>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fb10 	bl	800142c <setspeed>
}
 8001e0c:	e03a      	b.n	8001e84 <avoidance+0x614>
	else if (avoid_dir == 6) {
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <avoidance+0x624>)
 8001e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e14:	2b06      	cmp	r3, #6
 8001e16:	d135      	bne.n	8001e84 <avoidance+0x614>
		if ((is_close3 > 230) && (is_close4 > 700) && (servo_angle == 180) ) {
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <avoidance+0x618>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2be6      	cmp	r3, #230	; 0xe6
 8001e1e:	dd11      	ble.n	8001e44 <avoidance+0x5d4>
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <avoidance+0x61c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001e28:	dd0c      	ble.n	8001e44 <avoidance+0x5d4>
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <avoidance+0x620>)
 8001e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e30:	2bb4      	cmp	r3, #180	; 0xb4
 8001e32:	d107      	bne.n	8001e44 <avoidance+0x5d4>
			avoid_dir = 1;
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <avoidance+0x624>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	801a      	strh	r2, [r3, #0]
			groundturn(2,90);    //右转，即向左走
 8001e3a:	215a      	movs	r1, #90	; 0x5a
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	f7ff fc3f 	bl	80016c0 <groundturn>
 8001e42:	e01f      	b.n	8001e84 <avoidance+0x614>
		else if((is_close2 > 230) && (is_close4 > 700) && (servo_angle ==0)){
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <avoidance+0x62c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2be6      	cmp	r3, #230	; 0xe6
 8001e4a:	dd11      	ble.n	8001e70 <avoidance+0x600>
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <avoidance+0x61c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001e54:	dd0c      	ble.n	8001e70 <avoidance+0x600>
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <avoidance+0x620>)
 8001e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d107      	bne.n	8001e70 <avoidance+0x600>
			avoid_dir = 2;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <avoidance+0x624>)
 8001e62:	2202      	movs	r2, #2
 8001e64:	801a      	strh	r2, [r3, #0]
			groundturn(1,90);     //左转，即向右走
 8001e66:	215a      	movs	r1, #90	; 0x5a
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff fc29 	bl	80016c0 <groundturn>
 8001e6e:	e009      	b.n	8001e84 <avoidance+0x614>
		else {setspeed(targetspeed,0);}     //不改变方向
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <avoidance+0x628>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fad8 	bl	800142c <setspeed>
}
 8001e7c:	e002      	b.n	8001e84 <avoidance+0x614>
			if(avoid_comfirm==0){
 8001e7e:	bf00      	nop
 8001e80:	e000      	b.n	8001e84 <avoidance+0x614>
			if(back_flag==0){
 8001e82:	bf00      	nop
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200000ac 	.word	0x200000ac
 8001e8c:	2000007c 	.word	0x2000007c
 8001e90:	200000be 	.word	0x200000be
 8001e94:	20000110 	.word	0x20000110
 8001e98:	2000008c 	.word	0x2000008c
 8001e9c:	200000b8 	.word	0x200000b8

08001ea0 <avoid_stop>:
void avoid_stop()
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	is_stopping=1;
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <avoid_stop+0x18>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	801a      	strh	r2, [r3, #0]
	setspeed(0,0);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff fabd 	bl	800142c <setspeed>
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200000e8 	.word	0x200000e8

08001ebc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec2:	f107 0318 	add.w	r3, r7, #24
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ed0:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a3c      	ldr	r2, [pc, #240]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b37      	ldr	r3, [pc, #220]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a36      	ldr	r2, [pc, #216]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a30      	ldr	r2, [pc, #192]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a2a      	ldr	r2, [pc, #168]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001f1e:	f043 0320 	orr.w	r3, r3, #32
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a24      	ldr	r2, [pc, #144]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001f36:	f043 0310 	orr.w	r3, r3, #16
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <MX_GPIO_Init+0x10c>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|TRIG1_Pin
 8001f48:	2200      	movs	r2, #0
 8001f4a:	217e      	movs	r1, #126	; 0x7e
 8001f4c:	481f      	ldr	r0, [pc, #124]	; (8001fcc <MX_GPIO_Init+0x110>)
 8001f4e:	f003 f821 	bl	8004f94 <HAL_GPIO_WritePin>
                          |TRIG2_Pin|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG3_Pin|TRIG4_Pin, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2130      	movs	r1, #48	; 0x30
 8001f56:	481e      	ldr	r0, [pc, #120]	; (8001fd0 <MX_GPIO_Init+0x114>)
 8001f58:	f003 f81c 	bl	8004f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f62:	481c      	ldr	r0, [pc, #112]	; (8001fd4 <MX_GPIO_Init+0x118>)
 8001f64:	f003 f816 	bl	8004f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PEPin
                           PEPin PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|TRIG1_Pin
 8001f68:	237e      	movs	r3, #126	; 0x7e
 8001f6a:	61bb      	str	r3, [r7, #24]
                          |TRIG2_Pin|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2302      	movs	r3, #2
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f78:	f107 0318 	add.w	r3, r7, #24
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4813      	ldr	r0, [pc, #76]	; (8001fcc <MX_GPIO_Init+0x110>)
 8001f80:	f002 fe74 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TRIG3_Pin|TRIG4_Pin;
 8001f84:	2330      	movs	r3, #48	; 0x30
 8001f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2302      	movs	r3, #2
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <MX_GPIO_Init+0x114>)
 8001f9c:	f002 fe66 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb2:	f107 0318 	add.w	r3, r7, #24
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <MX_GPIO_Init+0x118>)
 8001fba:	f002 fe57 	bl	8004c6c <HAL_GPIO_Init>

}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40011800 	.word	0x40011800
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00

08001fd8 <JY901_Process>:
 *      Author: 86152
 */
#include "imu.h"

void JY901_Process()
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
	for(int i=0;i<IMUBUFFER_LEN;i++){
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	e061      	b.n	80020a8 <JY901_Process+0xd0>
	    if(IMURxBuffer[i]== 0x55 && IMURxBuffer[i+1]==0x53)
 8001fe4:	4a34      	ldr	r2, [pc, #208]	; (80020b8 <JY901_Process+0xe0>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b55      	cmp	r3, #85	; 0x55
 8001fee:	d153      	bne.n	8002098 <JY901_Process+0xc0>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <JY901_Process+0xe0>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	2b53      	cmp	r3, #83	; 0x53
 8001ffa:	d14d      	bne.n	8002098 <JY901_Process+0xc0>
	    {
	    	if(imu_check==0){
 8001ffc:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <JY901_Process+0xe4>)
 8001ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11f      	bne.n	8002046 <JY901_Process+0x6e>
	    	    theta0 =(float)(((short)IMURxBuffer[i+7]<<8)|IMURxBuffer[i+6])/32768*180;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3307      	adds	r3, #7
 800200a:	4a2b      	ldr	r2, [pc, #172]	; (80020b8 <JY901_Process+0xe0>)
 800200c:	5cd3      	ldrb	r3, [r2, r3]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	3206      	adds	r2, #6
 8002014:	4928      	ldr	r1, [pc, #160]	; (80020b8 <JY901_Process+0xe0>)
 8002016:	5c8a      	ldrb	r2, [r1, r2]
 8002018:	4313      	orrs	r3, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fe3c 	bl	8000c98 <__aeabi_i2f>
 8002020:	4603      	mov	r3, r0
 8002022:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe ff3e 	bl	8000ea8 <__aeabi_fdiv>
 800202c:	4603      	mov	r3, r0
 800202e:	4924      	ldr	r1, [pc, #144]	; (80020c0 <JY901_Process+0xe8>)
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fe85 	bl	8000d40 <__aeabi_fmul>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <JY901_Process+0xec>)
 800203c:	601a      	str	r2, [r3, #0]
	    	    imu_check=1;
 800203e:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <JY901_Process+0xe4>)
 8002040:	2201      	movs	r2, #1
 8002042:	801a      	strh	r2, [r3, #0]
 8002044:	e028      	b.n	8002098 <JY901_Process+0xc0>
	    	}
	    	else if(imu_check==1){theta=((float)(((short)IMURxBuffer[i+7]<<8)|IMURxBuffer[i+6])/32768*180)-theta0;}
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <JY901_Process+0xe4>)
 8002048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d123      	bne.n	8002098 <JY901_Process+0xc0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3307      	adds	r3, #7
 8002054:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <JY901_Process+0xe0>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	3206      	adds	r2, #6
 800205e:	4916      	ldr	r1, [pc, #88]	; (80020b8 <JY901_Process+0xe0>)
 8002060:	5c8a      	ldrb	r2, [r1, r2]
 8002062:	4313      	orrs	r3, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fe17 	bl	8000c98 <__aeabi_i2f>
 800206a:	4603      	mov	r3, r0
 800206c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe ff19 	bl	8000ea8 <__aeabi_fdiv>
 8002076:	4603      	mov	r3, r0
 8002078:	4911      	ldr	r1, [pc, #68]	; (80020c0 <JY901_Process+0xe8>)
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fe60 	bl	8000d40 <__aeabi_fmul>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <JY901_Process+0xec>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	4610      	mov	r0, r2
 800208c:	f7fe fd4e 	bl	8000b2c <__aeabi_fsub>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <JY901_Process+0xf0>)
 8002096:	601a      	str	r2, [r3, #0]
	    }//官方角度解算
	    IMURxBuffer[i]=0;
 8002098:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <JY901_Process+0xe0>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<IMUBUFFER_LEN;i++){
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3301      	adds	r3, #1
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b0a      	cmp	r3, #10
 80020ac:	dd9a      	ble.n	8001fe4 <JY901_Process+0xc>
	}
}
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2000009c 	.word	0x2000009c
 80020bc:	20000128 	.word	0x20000128
 80020c0:	43340000 	.word	0x43340000
 80020c4:	200000c0 	.word	0x200000c0
 80020c8:	200000b4 	.word	0x200000b4

080020cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d0:	f002 fb1a 	bl	8004708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d4:	f000 f90a 	bl	80022ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020d8:	f7ff fef0 	bl	8001ebc <MX_GPIO_Init>
  MX_TIM1_Init();
 80020dc:	f001 fd20 	bl	8003b20 <MX_TIM1_Init>
  MX_TIM2_Init();
 80020e0:	f001 fdc6 	bl	8003c70 <MX_TIM2_Init>
  MX_TIM4_Init();
 80020e4:	f001 fe66 	bl	8003db4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80020e8:	f001 fef6 	bl	8003ed8 <MX_TIM5_Init>
  MX_TIM7_Init();
 80020ec:	f001 ff58 	bl	8003fa0 <MX_TIM7_Init>
  MX_TIM8_Init();
 80020f0:	f001 ff8c 	bl	800400c <MX_TIM8_Init>
  MX_UART4_Init();
 80020f4:	f002 f988 	bl	8004408 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80020f8:	f002 f9b0 	bl	800445c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80020fc:	f002 f9d8 	bl	80044b0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002100:	f001 fe0a 	bl	8003d18 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  mode=0;
 8002104:	4b55      	ldr	r3, [pc, #340]	; (800225c <main+0x190>)
 8002106:	2200      	movs	r2, #0
 8002108:	801a      	strh	r2, [r3, #0]
  motor_init();
 800210a:	f000 fe7b 	bl	8002e04 <motor_init>
  servo1_init();
 800210e:	f001 fa15 	bl	800353c <servo1_init>
  servo2_init();
 8002112:	f001 fa4d 	bl	80035b0 <servo2_init>
  servo4_init();
 8002116:	f001 fafb 	bl	8003710 <servo4_init>
  is_close1=is_close2=is_close3=is_close4=500;
 800211a:	4b51      	ldr	r3, [pc, #324]	; (8002260 <main+0x194>)
 800211c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	4b4f      	ldr	r3, [pc, #316]	; (8002260 <main+0x194>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a4f      	ldr	r2, [pc, #316]	; (8002264 <main+0x198>)
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b4e      	ldr	r3, [pc, #312]	; (8002264 <main+0x198>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a4e      	ldr	r2, [pc, #312]	; (8002268 <main+0x19c>)
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b4d      	ldr	r3, [pc, #308]	; (8002268 <main+0x19c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a4d      	ldr	r2, [pc, #308]	; (800226c <main+0x1a0>)
 8002138:	6013      	str	r3, [r2, #0]
  is_down=is_groundturn=is_shut=is_stopping=is_fetch=0;
 800213a:	4b4d      	ldr	r3, [pc, #308]	; (8002270 <main+0x1a4>)
 800213c:	2200      	movs	r2, #0
 800213e:	801a      	strh	r2, [r3, #0]
 8002140:	4b4b      	ldr	r3, [pc, #300]	; (8002270 <main+0x1a4>)
 8002142:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002146:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <main+0x1a8>)
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	4b4a      	ldr	r3, [pc, #296]	; (8002274 <main+0x1a8>)
 800214c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002150:	4b49      	ldr	r3, [pc, #292]	; (8002278 <main+0x1ac>)
 8002152:	801a      	strh	r2, [r3, #0]
 8002154:	4b48      	ldr	r3, [pc, #288]	; (8002278 <main+0x1ac>)
 8002156:	f9b3 2000 	ldrsh.w	r2, [r3]
 800215a:	4b48      	ldr	r3, [pc, #288]	; (800227c <main+0x1b0>)
 800215c:	801a      	strh	r2, [r3, #0]
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <main+0x1b0>)
 8002160:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002164:	4b46      	ldr	r3, [pc, #280]	; (8002280 <main+0x1b4>)
 8002166:	801a      	strh	r2, [r3, #0]
  deviation=deviation_f=turn_target=check_flag=imu_check=0;
 8002168:	4b46      	ldr	r3, [pc, #280]	; (8002284 <main+0x1b8>)
 800216a:	2200      	movs	r2, #0
 800216c:	801a      	strh	r2, [r3, #0]
 800216e:	4b45      	ldr	r3, [pc, #276]	; (8002284 <main+0x1b8>)
 8002170:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002174:	4b44      	ldr	r3, [pc, #272]	; (8002288 <main+0x1bc>)
 8002176:	801a      	strh	r2, [r3, #0]
 8002178:	4b43      	ldr	r3, [pc, #268]	; (8002288 <main+0x1bc>)
 800217a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800217e:	4b43      	ldr	r3, [pc, #268]	; (800228c <main+0x1c0>)
 8002180:	801a      	strh	r2, [r3, #0]
 8002182:	4b42      	ldr	r3, [pc, #264]	; (800228c <main+0x1c0>)
 8002184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f99f 	bl	80004cc <__aeabi_i2d>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	493f      	ldr	r1, [pc, #252]	; (8002290 <main+0x1c4>)
 8002194:	e9c1 2300 	strd	r2, r3, [r1]
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <main+0x1c4>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	493d      	ldr	r1, [pc, #244]	; (8002294 <main+0x1c8>)
 80021a0:	e9c1 2300 	strd	r2, r3, [r1]
  deviation_s=100;
 80021a4:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <main+0x1cc>)
 80021a6:	2264      	movs	r2, #100	; 0x64
 80021a8:	601a      	str	r2, [r3, #0]
  targetspeed=550;
 80021aa:	4b3c      	ldr	r3, [pc, #240]	; (800229c <main+0x1d0>)
 80021ac:	f240 2226 	movw	r2, #550	; 0x226
 80021b0:	601a      	str	r2, [r3, #0]
  lefttarget=righttarget=0;
 80021b2:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <main+0x1d4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <main+0x1d4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a39      	ldr	r2, [pc, #228]	; (80022a4 <main+0x1d8>)
 80021be:	6013      	str	r3, [r2, #0]
  curvature=curv_error=0;
 80021c0:	4939      	ldr	r1, [pc, #228]	; (80022a8 <main+0x1dc>)
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	e9c1 2300 	strd	r2, r3, [r1]
 80021ce:	4b37      	ldr	r3, [pc, #220]	; (80022ac <main+0x1e0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
  total_distance=theta0=0;
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <main+0x1e4>)
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <main+0x1e8>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
  Rx_command='0';
 80021e2:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <main+0x1ec>)
 80021e4:	2230      	movs	r2, #48	; 0x30
 80021e6:	701a      	strb	r2, [r3, #0]
  avoid_dir=turn_flag=stop_flag=0;
 80021e8:	4b34      	ldr	r3, [pc, #208]	; (80022bc <main+0x1f0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	801a      	strh	r2, [r3, #0]
 80021ee:	4b33      	ldr	r3, [pc, #204]	; (80022bc <main+0x1f0>)
 80021f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021f4:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <main+0x1f4>)
 80021f6:	801a      	strh	r2, [r3, #0]
 80021f8:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <main+0x1f4>)
 80021fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021fe:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <main+0x1f8>)
 8002200:	801a      	strh	r2, [r3, #0]
  avoid_comfirm=1;
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <main+0x1fc>)
 8002204:	2201      	movs	r2, #1
 8002206:	801a      	strh	r2, [r3, #0]
  IS_FIRDT_CAPTURED=0;
 8002208:	4b30      	ldr	r3, [pc, #192]	; (80022cc <main+0x200>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim4);
 800220e:	4830      	ldr	r0, [pc, #192]	; (80022d0 <main+0x204>)
 8002210:	f003 fb42 	bl	8005898 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8002214:	482f      	ldr	r0, [pc, #188]	; (80022d4 <main+0x208>)
 8002216:	f003 fb3f 	bl	8005898 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_1);
 800221a:	2100      	movs	r1, #0
 800221c:	482c      	ldr	r0, [pc, #176]	; (80022d0 <main+0x204>)
 800221e:	f003 fd55 	bl	8005ccc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_2);
 8002222:	2104      	movs	r1, #4
 8002224:	482a      	ldr	r0, [pc, #168]	; (80022d0 <main+0x204>)
 8002226:	f003 fd51 	bl	8005ccc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_3);
 800222a:	2108      	movs	r1, #8
 800222c:	4828      	ldr	r0, [pc, #160]	; (80022d0 <main+0x204>)
 800222e:	f003 fd4d 	bl	8005ccc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_4);
 8002232:	210c      	movs	r1, #12
 8002234:	4826      	ldr	r0, [pc, #152]	; (80022d0 <main+0x204>)
 8002236:	f003 fd49 	bl	8005ccc <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart1,(void *)&USART1_RXbuff,1);
 800223a:	2201      	movs	r2, #1
 800223c:	4926      	ldr	r1, [pc, #152]	; (80022d8 <main+0x20c>)
 800223e:	4827      	ldr	r0, [pc, #156]	; (80022dc <main+0x210>)
 8002240:	f005 f902 	bl	8007448 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4,&Rx_byte,sizeof(Rx_byte));
 8002244:	2201      	movs	r2, #1
 8002246:	4926      	ldr	r1, [pc, #152]	; (80022e0 <main+0x214>)
 8002248:	4826      	ldr	r0, [pc, #152]	; (80022e4 <main+0x218>)
 800224a:	f005 f8fd 	bl	8007448 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 800224e:	2201      	movs	r2, #1
 8002250:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002254:	4824      	ldr	r0, [pc, #144]	; (80022e8 <main+0x21c>)
 8002256:	f002 fe9d 	bl	8004f94 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800225a:	e7fe      	b.n	800225a <main+0x18e>
 800225c:	200000c4 	.word	0x200000c4
 8002260:	2000007c 	.word	0x2000007c
 8002264:	200000ac 	.word	0x200000ac
 8002268:	200000b8 	.word	0x200000b8
 800226c:	20000088 	.word	0x20000088
 8002270:	20000112 	.word	0x20000112
 8002274:	200000e8 	.word	0x200000e8
 8002278:	20000126 	.word	0x20000126
 800227c:	20000124 	.word	0x20000124
 8002280:	200000a8 	.word	0x200000a8
 8002284:	20000128 	.word	0x20000128
 8002288:	200000d0 	.word	0x200000d0
 800228c:	200000f4 	.word	0x200000f4
 8002290:	20000178 	.word	0x20000178
 8002294:	20000180 	.word	0x20000180
 8002298:	20000188 	.word	0x20000188
 800229c:	2000008c 	.word	0x2000008c
 80022a0:	20000094 	.word	0x20000094
 80022a4:	20000108 	.word	0x20000108
 80022a8:	200000d8 	.word	0x200000d8
 80022ac:	200000f0 	.word	0x200000f0
 80022b0:	200000c0 	.word	0x200000c0
 80022b4:	20000104 	.word	0x20000104
 80022b8:	200000ea 	.word	0x200000ea
 80022bc:	20000098 	.word	0x20000098
 80022c0:	20000122 	.word	0x20000122
 80022c4:	20000110 	.word	0x20000110
 80022c8:	200000ec 	.word	0x200000ec
 80022cc:	20000175 	.word	0x20000175
 80022d0:	200001d4 	.word	0x200001d4
 80022d4:	20000264 	.word	0x20000264
 80022d8:	20000174 	.word	0x20000174
 80022dc:	20000384 	.word	0x20000384
 80022e0:	20000118 	.word	0x20000118
 80022e4:	200003c8 	.word	0x200003c8
 80022e8:	40010c00 	.word	0x40010c00

080022ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b090      	sub	sp, #64	; 0x40
 80022f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022f2:	f107 0318 	add.w	r3, r7, #24
 80022f6:	2228      	movs	r2, #40	; 0x28
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f005 fd20 	bl	8007d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800230e:	2301      	movs	r3, #1
 8002310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002316:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800231c:	2301      	movs	r3, #1
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002320:	2302      	movs	r3, #2
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800232a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800232e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002330:	f107 0318 	add.w	r3, r7, #24
 8002334:	4618      	mov	r0, r3
 8002336:	f002 fe45 	bl	8004fc4 <HAL_RCC_OscConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002340:	f000 fd5a 	bl	8002df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002344:	230f      	movs	r3, #15
 8002346:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002348:	2302      	movs	r3, #2
 800234a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	2102      	movs	r1, #2
 800235e:	4618      	mov	r0, r3
 8002360:	f003 f8b0 	bl	80054c4 <HAL_RCC_ClockConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800236a:	f000 fd45 	bl	8002df8 <Error_Handler>
  }
}
 800236e:	bf00      	nop
 8002370:	3740      	adds	r7, #64	; 0x40
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7&&(mode!=0))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4ab2      	ldr	r2, [pc, #712]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	f040 8271 	bne.w	800286e <HAL_TIM_PeriodElapsedCallback+0x4f6>
 800238c:	4bb1      	ldr	r3, [pc, #708]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800238e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 826b 	beq.w	800286e <HAL_TIM_PeriodElapsedCallback+0x4f6>
	{
		if(mode==1){
 8002398:	4bae      	ldr	r3, [pc, #696]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800239a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d103      	bne.n	80023aa <HAL_TIM_PeriodElapsedCallback+0x32>
			targetspeed=500;
 80023a2:	4bad      	ldr	r3, [pc, #692]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80023a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023a8:	601a      	str	r2, [r3, #0]
			//spinspeed=300;
		}
		if(mode==2){
 80023aa:	4baa      	ldr	r3, [pc, #680]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80023ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	f040 80a1 	bne.w	80024f8 <HAL_TIM_PeriodElapsedCallback+0x180>
			if(is_fetch==0){
 80023b6:	4ba9      	ldr	r3, [pc, #676]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80023b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d167      	bne.n	8002490 <HAL_TIM_PeriodElapsedCallback+0x118>
				targetspeed=120;
 80023c0:	4ba5      	ldr	r3, [pc, #660]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80023c2:	2278      	movs	r2, #120	; 0x78
 80023c4:	601a      	str	r2, [r3, #0]
				//spinspeed=100;
			    if(deviation_f==99){spin(1);}
 80023c6:	4ba6      	ldr	r3, [pc, #664]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80023c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023cc:	a39e      	add	r3, pc, #632	; (adr r3, 8002648 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fe fb4d 	bl	8000a70 <__aeabi_dcmpeq>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_TIM_PeriodElapsedCallback+0x6c>
 80023dc:	2001      	movs	r0, #1
 80023de:	f7ff f91b 	bl	8001618 <spin>
 80023e2:	e089      	b.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x180>
			    else if(deviation_f!=99){
 80023e4:	4b9e      	ldr	r3, [pc, #632]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80023e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ea:	a397      	add	r3, pc, #604	; (adr r3, 8002648 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe fb3e 	bl	8000a70 <__aeabi_dcmpeq>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d17e      	bne.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x180>
			    	alongside(deviation_f-3);
 80023fa:	4b99      	ldr	r3, [pc, #612]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80023fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	4b97      	ldr	r3, [pc, #604]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002406:	f7fd ff13 	bl	8000230 <__aeabi_dsub>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	f7ff f9cf 	bl	80017b4 <alongside>
                    if(deviation_s<=55){
 8002416:	4b94      	ldr	r3, [pc, #592]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b37      	cmp	r3, #55	; 0x37
 800241c:	dc6c      	bgt.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x180>
                    	setspeed(0,0);
 800241e:	2100      	movs	r1, #0
 8002420:	2000      	movs	r0, #0
 8002422:	f7ff f803 	bl	800142c <setspeed>
                    	stop_flag+=1;
 8002426:	4b91      	ldr	r3, [pc, #580]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800242c:	b29b      	uxth	r3, r3
 800242e:	3301      	adds	r3, #1
 8002430:	b29b      	uxth	r3, r3
 8002432:	b21a      	sxth	r2, r3
 8002434:	4b8d      	ldr	r3, [pc, #564]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002436:	801a      	strh	r2, [r3, #0]
                    	if(stop_flag==10){
 8002438:	4b8c      	ldr	r3, [pc, #560]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800243a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243e:	2b0a      	cmp	r3, #10
 8002440:	d15a      	bne.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x180>
                    	    fetchplace();
 8002442:	f7ff f971 	bl	8001728 <fetchplace>
                    	    uint8_t  CO3AskBuffer[3]={0xa0,1,0xa1};
 8002446:	4a8a      	ldr	r2, [pc, #552]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002448:	f107 0308 	add.w	r3, r7, #8
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	4611      	mov	r1, r2
 8002450:	8019      	strh	r1, [r3, #0]
 8002452:	3302      	adds	r3, #2
 8002454:	0c12      	lsrs	r2, r2, #16
 8002456:	701a      	strb	r2, [r3, #0]
                    	    HAL_UART_Transmit_IT(&huart1, (uint8_t *)CO3AskBuffer, sizeof(CO3AskBuffer));
 8002458:	f107 0308 	add.w	r3, r7, #8
 800245c:	2203      	movs	r2, #3
 800245e:	4619      	mov	r1, r3
 8002460:	4884      	ldr	r0, [pc, #528]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002462:	f004 ffad 	bl	80073c0 <HAL_UART_Transmit_IT>
                    	    for(int i=0;i<18;i++)
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e00a      	b.n	8002482 <HAL_TIM_PeriodElapsedCallback+0x10a>
                    	    {servo4_turn(42+i);}
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	b29b      	uxth	r3, r3
 8002470:	332a      	adds	r3, #42	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	b21b      	sxth	r3, r3
 8002476:	4618      	mov	r0, r3
 8002478:	f001 f960 	bl	800373c <servo4_turn>
                    	    for(int i=0;i<18;i++)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3301      	adds	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b11      	cmp	r3, #17
 8002486:	ddf1      	ble.n	800246c <HAL_TIM_PeriodElapsedCallback+0xf4>
                    	    stop_flag=0;
 8002488:	4b78      	ldr	r3, [pc, #480]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800248a:	2200      	movs	r2, #0
 800248c:	801a      	strh	r2, [r3, #0]
 800248e:	e033      	b.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x180>
                    	}
                    }
			    }
			}
			else if(is_fetch==1){
 8002490:	4b72      	ldr	r3, [pc, #456]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d12e      	bne.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x180>
				targetspeed=200;
 800249a:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800249c:	22c8      	movs	r2, #200	; 0xc8
 800249e:	601a      	str	r2, [r3, #0]
				setspeed(targetspeed,0);
 80024a0:	4b6d      	ldr	r3, [pc, #436]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe ffc0 	bl	800142c <setspeed>
	            turn_flag+=1;
 80024ac:	4b72      	ldr	r3, [pc, #456]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80024ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80024bc:	801a      	strh	r2, [r3, #0]
				if(turn_flag>=60){
 80024be:	4b6e      	ldr	r3, [pc, #440]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80024c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c4:	2b3b      	cmp	r3, #59	; 0x3b
 80024c6:	dd17      	ble.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x180>
				     setspeed(0,0);
 80024c8:	2100      	movs	r1, #0
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7fe ffae 	bl	800142c <setspeed>
				     stop_flag+=1;
 80024d0:	4b66      	ldr	r3, [pc, #408]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80024d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	b29b      	uxth	r3, r3
 80024dc:	b21a      	sxth	r2, r3
 80024de:	4b63      	ldr	r3, [pc, #396]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80024e0:	801a      	strh	r2, [r3, #0]
				     if(stop_flag==10){
 80024e2:	4b62      	ldr	r3, [pc, #392]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80024e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e8:	2b0a      	cmp	r3, #10
 80024ea:	d105      	bne.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x180>
				          stop_flag=0;
 80024ec:	4b5f      	ldr	r3, [pc, #380]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	801a      	strh	r2, [r3, #0]
				          turn_flag=0;
 80024f2:	4b61      	ldr	r3, [pc, #388]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	801a      	strh	r2, [r3, #0]
				     }
				}
			}
		}
		if(mode==3){
 80024f8:	4b56      	ldr	r3, [pc, #344]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80024fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d10a      	bne.n	8002518 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			targetspeed=460;
 8002502:	4b55      	ldr	r3, [pc, #340]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002504:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8002508:	601a      	str	r2, [r3, #0]
			alongside(deviation);
 800250a:	4b5c      	ldr	r3, [pc, #368]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f7ff f94e 	bl	80017b4 <alongside>
		}
		if(mode==4){
 8002518:	4b4e      	ldr	r3, [pc, #312]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800251a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800251e:	2b04      	cmp	r3, #4
 8002520:	f040 80b9 	bne.w	8002696 <HAL_TIM_PeriodElapsedCallback+0x31e>
			targetspeed=320;
 8002524:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002526:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800252a:	601a      	str	r2, [r3, #0]
			//spinspeed=150;
		    servo3_scan();
 800252c:	f001 f89e 	bl	800366c <servo3_scan>
		    HAL_UART_Receive(&huart3,IMURxBuffer,22,40);
 8002530:	2328      	movs	r3, #40	; 0x28
 8002532:	2216      	movs	r2, #22
 8002534:	4952      	ldr	r1, [pc, #328]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002536:	4853      	ldr	r0, [pc, #332]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002538:	f004 fea0 	bl	800727c <HAL_UART_Receive>
		    JY901_Process();
 800253c:	f7ff fd4c 	bl	8001fd8 <JY901_Process>
            if(is_groundturn==0&&is_stopping==0){avoidance();}
 8002540:	4b51      	ldr	r3, [pc, #324]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d107      	bne.n	800255a <HAL_TIM_PeriodElapsedCallback+0x1e2>
 800254a:	4b50      	ldr	r3, [pc, #320]	; (800268c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800254c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <HAL_TIM_PeriodElapsedCallback+0x1e2>
 8002554:	f7ff f98c 	bl	8001870 <avoidance>
 8002558:	e09d      	b.n	8002696 <HAL_TIM_PeriodElapsedCallback+0x31e>
            else if(is_groundturn!=0&&is_stopping==0){
 800255a:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800255c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d053      	beq.n	800260c <HAL_TIM_PeriodElapsedCallback+0x294>
 8002564:	4b49      	ldr	r3, [pc, #292]	; (800268c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d14e      	bne.n	800260c <HAL_TIM_PeriodElapsedCallback+0x294>
            	turn_flag+=1;
 800256e:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002574:	b29b      	uxth	r3, r3
 8002576:	3301      	adds	r3, #1
 8002578:	b29b      	uxth	r3, r3
 800257a:	b21a      	sxth	r2, r3
 800257c:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800257e:	801a      	strh	r2, [r3, #0]
            	if(turn_flag<turn_target)
 8002580:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002582:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002586:	4b42      	ldr	r3, [pc, #264]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258c:	429a      	cmp	r2, r3
 800258e:	da06      	bge.n	800259e <HAL_TIM_PeriodElapsedCallback+0x226>
            	{spin(is_groundturn);}
 8002590:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff f83e 	bl	8001618 <spin>
            	if(turn_flag<turn_target)
 800259c:	e07a      	b.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x31c>
            	else if(turn_flag==turn_target){
 800259e:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80025a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025a4:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80025a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d102      	bne.n	80025b4 <HAL_TIM_PeriodElapsedCallback+0x23c>
            		avoid_stop();
 80025ae:	f7ff fc77 	bl	8001ea0 <avoid_stop>
            	if(turn_flag<turn_target)
 80025b2:	e06f      	b.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x31c>
            	}
            	else if((turn_flag>turn_target)&&(turn_flag<=turn_target+4)){setspeed(targetspeed,0);}
 80025b4:	4b30      	ldr	r3, [pc, #192]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80025b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025ba:	4b35      	ldr	r3, [pc, #212]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80025bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	dd10      	ble.n	80025e6 <HAL_TIM_PeriodElapsedCallback+0x26e>
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80025c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80025ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d2:	3304      	adds	r3, #4
 80025d4:	429a      	cmp	r2, r3
 80025d6:	dc06      	bgt.n	80025e6 <HAL_TIM_PeriodElapsedCallback+0x26e>
 80025d8:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe ff24 	bl	800142c <setspeed>
            	if(turn_flag<turn_target)
 80025e4:	e056      	b.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x31c>
            	else if(turn_flag>turn_target+4){
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80025e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b28      	ldr	r3, [pc, #160]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80025f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f4:	3304      	adds	r3, #4
 80025f6:	429a      	cmp	r2, r3
 80025f8:	dd4c      	ble.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x31c>
            		avoid_stop();
 80025fa:	f7ff fc51 	bl	8001ea0 <avoid_stop>
            		is_groundturn=0;
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002600:	2200      	movs	r2, #0
 8002602:	801a      	strh	r2, [r3, #0]
            		turn_flag=0;
 8002604:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002606:	2200      	movs	r2, #0
 8002608:	801a      	strh	r2, [r3, #0]
            	if(turn_flag<turn_target)
 800260a:	e043      	b.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x31c>
            	}
            }
            else if(is_stopping==1){
 800260c:	4b1f      	ldr	r3, [pc, #124]	; (800268c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800260e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d13f      	bne.n	8002696 <HAL_TIM_PeriodElapsedCallback+0x31e>
            	stop_flag+=1;
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261c:	b29b      	uxth	r3, r3
 800261e:	3301      	adds	r3, #1
 8002620:	b29b      	uxth	r3, r3
 8002622:	b21a      	sxth	r2, r3
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002626:	801a      	strh	r2, [r3, #0]
            	setspeed(0,0);
 8002628:	2100      	movs	r1, #0
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe fefe 	bl	800142c <setspeed>
            	if(stop_flag==8){
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002636:	2b08      	cmp	r3, #8
 8002638:	d12d      	bne.n	8002696 <HAL_TIM_PeriodElapsedCallback+0x31e>
            	    is_stopping=0;
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800263c:	2200      	movs	r2, #0
 800263e:	801a      	strh	r2, [r3, #0]
            	    stop_flag=0;
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002642:	2200      	movs	r2, #0
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	e026      	b.n	8002696 <HAL_TIM_PeriodElapsedCallback+0x31e>
 8002648:	00000000 	.word	0x00000000
 800264c:	4058c000 	.word	0x4058c000
 8002650:	40001400 	.word	0x40001400
 8002654:	200000c4 	.word	0x200000c4
 8002658:	2000008c 	.word	0x2000008c
 800265c:	20000112 	.word	0x20000112
 8002660:	20000178 	.word	0x20000178
 8002664:	40080000 	.word	0x40080000
 8002668:	20000188 	.word	0x20000188
 800266c:	20000098 	.word	0x20000098
 8002670:	08007d70 	.word	0x08007d70
 8002674:	20000384 	.word	0x20000384
 8002678:	20000122 	.word	0x20000122
 800267c:	20000180 	.word	0x20000180
 8002680:	2000009c 	.word	0x2000009c
 8002684:	20000130 	.word	0x20000130
 8002688:	20000124 	.word	0x20000124
 800268c:	200000e8 	.word	0x200000e8
 8002690:	200000f4 	.word	0x200000f4
            	if(turn_flag<turn_target)
 8002694:	bf00      	nop
            	}
            }
		}
		if(mode==5){
 8002696:	4b7a      	ldr	r3, [pc, #488]	; (8002880 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269c:	2b05      	cmp	r3, #5
 800269e:	d17c      	bne.n	800279a <HAL_TIM_PeriodElapsedCallback+0x422>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 80026a0:	2200      	movs	r2, #0
 80026a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026a6:	4877      	ldr	r0, [pc, #476]	; (8002884 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80026a8:	f002 fc74 	bl	8004f94 <HAL_GPIO_WritePin>
			targetspeed=150;
 80026ac:	4b76      	ldr	r3, [pc, #472]	; (8002888 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80026ae:	2296      	movs	r2, #150	; 0x96
 80026b0:	601a      	str	r2, [r3, #0]
			//spinspeed=100;
			if(is_stopping==0){
 80026b2:	4b76      	ldr	r3, [pc, #472]	; (800288c <HAL_TIM_PeriodElapsedCallback+0x514>)
 80026b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d151      	bne.n	8002760 <HAL_TIM_PeriodElapsedCallback+0x3e8>
			    if(is_fetch==1){
 80026bc:	4b74      	ldr	r3, [pc, #464]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80026be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d13f      	bne.n	8002746 <HAL_TIM_PeriodElapsedCallback+0x3ce>
				    if(deviation_f==99){spin(1);}
 80026c6:	4b73      	ldr	r3, [pc, #460]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80026c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026cc:	a36a      	add	r3, pc, #424	; (adr r3, 8002878 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	f7fe f9cd 	bl	8000a70 <__aeabi_dcmpeq>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_TIM_PeriodElapsedCallback+0x36c>
 80026dc:	2001      	movs	r0, #1
 80026de:	f7fe ff9b 	bl	8001618 <spin>
 80026e2:	e05a      	b.n	800279a <HAL_TIM_PeriodElapsedCallback+0x422>
				    else if(deviation_f!=99){
 80026e4:	4b6b      	ldr	r3, [pc, #428]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80026e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ea:	a363      	add	r3, pc, #396	; (adr r3, 8002878 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	f7fe f9be 	bl	8000a70 <__aeabi_dcmpeq>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d14f      	bne.n	800279a <HAL_TIM_PeriodElapsedCallback+0x422>
				    	alongside(deviation_f);
 80026fa:	4b66      	ldr	r3, [pc, #408]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f7ff f856 	bl	80017b4 <alongside>
				    	if(deviation_s<=17){
 8002708:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b11      	cmp	r3, #17
 800270e:	dc44      	bgt.n	800279a <HAL_TIM_PeriodElapsedCallback+0x422>
				    		setspeed(0,0);
 8002710:	2100      	movs	r1, #0
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe fe8a 	bl	800142c <setspeed>
				    		stop_flag+=1;
 8002718:	4b60      	ldr	r3, [pc, #384]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x524>)
 800271a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271e:	b29b      	uxth	r3, r3
 8002720:	3301      	adds	r3, #1
 8002722:	b29b      	uxth	r3, r3
 8002724:	b21a      	sxth	r2, r3
 8002726:	4b5d      	ldr	r3, [pc, #372]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002728:	801a      	strh	r2, [r3, #0]
				    		if(stop_flag==10){
 800272a:	4b5c      	ldr	r3, [pc, #368]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x524>)
 800272c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002730:	2b0a      	cmp	r3, #10
 8002732:	d132      	bne.n	800279a <HAL_TIM_PeriodElapsedCallback+0x422>
				    			fetchplace();
 8002734:	f7fe fff8 	bl	8001728 <fetchplace>
				    			is_fetch=0;
 8002738:	4b55      	ldr	r3, [pc, #340]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800273a:	2200      	movs	r2, #0
 800273c:	801a      	strh	r2, [r3, #0]
				    			stop_flag=0;
 800273e:	4b57      	ldr	r3, [pc, #348]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002740:	2200      	movs	r2, #0
 8002742:	801a      	strh	r2, [r3, #0]
 8002744:	e029      	b.n	800279a <HAL_TIM_PeriodElapsedCallback+0x422>
				    		}
				    	}
				    }
			    }
			    else if(is_fetch==0){
 8002746:	4b52      	ldr	r3, [pc, #328]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d124      	bne.n	800279a <HAL_TIM_PeriodElapsedCallback+0x422>
			    	setspeed(0,0);
 8002750:	2100      	movs	r1, #0
 8002752:	2000      	movs	r0, #0
 8002754:	f7fe fe6a 	bl	800142c <setspeed>
			    	mode=0;
 8002758:	4b49      	ldr	r3, [pc, #292]	; (8002880 <HAL_TIM_PeriodElapsedCallback+0x508>)
 800275a:	2200      	movs	r2, #0
 800275c:	801a      	strh	r2, [r3, #0]
 800275e:	e01c      	b.n	800279a <HAL_TIM_PeriodElapsedCallback+0x422>
			    }
			}
			else if(is_stopping==1){
 8002760:	4b4a      	ldr	r3, [pc, #296]	; (800288c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8002762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d117      	bne.n	800279a <HAL_TIM_PeriodElapsedCallback+0x422>
				stop_flag+=1;
 800276a:	4b4c      	ldr	r3, [pc, #304]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x524>)
 800276c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002770:	b29b      	uxth	r3, r3
 8002772:	3301      	adds	r3, #1
 8002774:	b29b      	uxth	r3, r3
 8002776:	b21a      	sxth	r2, r3
 8002778:	4b48      	ldr	r3, [pc, #288]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x524>)
 800277a:	801a      	strh	r2, [r3, #0]
				setspeed(0,0);
 800277c:	2100      	movs	r1, #0
 800277e:	2000      	movs	r0, #0
 8002780:	f7fe fe54 	bl	800142c <setspeed>
				if(stop_flag==20){
 8002784:	4b45      	ldr	r3, [pc, #276]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800278a:	2b14      	cmp	r3, #20
 800278c:	d105      	bne.n	800279a <HAL_TIM_PeriodElapsedCallback+0x422>
				     is_stopping=0;
 800278e:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8002790:	2200      	movs	r2, #0
 8002792:	801a      	strh	r2, [r3, #0]
				     stop_flag=0;
 8002794:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002796:	2200      	movs	r2, #0
 8002798:	801a      	strh	r2, [r3, #0]
				}
			}
		}
		leftfeedback = motor_leftfeedback();			//获取当前速度
 800279a:	f000 fbe9 	bl	8002f70 <motor_leftfeedback>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a3f      	ldr	r2, [pc, #252]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80027a2:	6013      	str	r3, [r2, #0]
		rightfeedback = motor_rightfeedback();
 80027a4:	f000 fc1c 	bl	8002fe0 <motor_rightfeedback>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4a3e      	ldr	r2, [pc, #248]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 80027ac:	6013      	str	r3, [r2, #0]
		int leftdifference = leftspeedPID(lefttarget,leftfeedback,&lefterror);//当前PWM数�?�加上增量式PID计算�???????????????????????????????????????????????�???????????????????????????????????????????????
 80027ae:	4b3e      	ldr	r3, [pc, #248]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3b      	ldr	r2, [pc, #236]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80027b4:	6811      	ldr	r1, [r2, #0]
 80027b6:	4a3d      	ldr	r2, [pc, #244]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x534>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fc49 	bl	8003050 <leftspeedPID>
 80027be:	6138      	str	r0, [r7, #16]
		int rightdifference = rightspeedPID(righttarget,rightfeedback,&righterror);//当前PWM数�?�加上增量式PID计算�???????????????????????????????????????????????�???????????????????????????????????????????????
 80027c0:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a37      	ldr	r2, [pc, #220]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 80027c6:	6811      	ldr	r1, [r2, #0]
 80027c8:	4a3a      	ldr	r2, [pc, #232]	; (80028b4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fcac 	bl	8003128 <rightspeedPID>
 80027d0:	60f8      	str	r0, [r7, #12]
		leftspeed += leftdifference;
 80027d2:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4413      	add	r3, r2
 80027da:	4a37      	ldr	r2, [pc, #220]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80027dc:	6013      	str	r3, [r2, #0]
		rightspeed += rightdifference;
 80027de:	4b37      	ldr	r3, [pc, #220]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x544>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4413      	add	r3, r2
 80027e6:	4a35      	ldr	r2, [pc, #212]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x544>)
 80027e8:	6013      	str	r3, [r2, #0]
		//限制PWM�???????????????????????????????????????????????大范�???????????????????????????????????????????????
		if(leftspeed>maxspeed){leftspeed = maxspeed;}
 80027ea:	4b33      	ldr	r3, [pc, #204]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80027f2:	dd03      	ble.n	80027fc <HAL_TIM_PeriodElapsedCallback+0x484>
 80027f4:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80027f6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80027fa:	601a      	str	r2, [r3, #0]
		if(leftspeed<-maxspeed){leftspeed = -maxspeed;}
 80027fc:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f513 7f48 	cmn.w	r3, #800	; 0x320
 8002804:	da02      	bge.n	800280c <HAL_TIM_PeriodElapsedCallback+0x494>
 8002806:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002808:	4a2d      	ldr	r2, [pc, #180]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800280a:	601a      	str	r2, [r3, #0]
		if(rightspeed>maxspeed){rightspeed = maxspeed;}
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x544>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002814:	dd03      	ble.n	800281e <HAL_TIM_PeriodElapsedCallback+0x4a6>
 8002816:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002818:	f44f 7248 	mov.w	r2, #800	; 0x320
 800281c:	601a      	str	r2, [r3, #0]
		if(rightspeed<-maxspeed){rightspeed = -maxspeed;}
 800281e:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f513 7f48 	cmn.w	r3, #800	; 0x320
 8002826:	da02      	bge.n	800282e <HAL_TIM_PeriodElapsedCallback+0x4b6>
 8002828:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x544>)
 800282a:	4a25      	ldr	r2, [pc, #148]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800282c:	601a      	str	r2, [r3, #0]
		if(lefttarget == 0 && leftfeedback ==0){leftspeed = 0;}
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_TIM_PeriodElapsedCallback+0x4cc>
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <HAL_TIM_PeriodElapsedCallback+0x4cc>
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
		if(righttarget == 0 && rightfeedback ==0){rightspeed = 0;}
 8002844:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <HAL_TIM_PeriodElapsedCallback+0x4e2>
 800284c:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d102      	bne.n	800285a <HAL_TIM_PeriodElapsedCallback+0x4e2>
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
		//将PID计算后的PWM写入系统
		motor_PWM(leftspeed,rightspeed);
 800285a:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b21b      	sxth	r3, r3
 8002860:	4a16      	ldr	r2, [pc, #88]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	b212      	sxth	r2, r2
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f000 faef 	bl	8002e4c <motor_PWM>
	}
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	00000000 	.word	0x00000000
 800287c:	4058c000 	.word	0x4058c000
 8002880:	200000c4 	.word	0x200000c4
 8002884:	40010c00 	.word	0x40010c00
 8002888:	2000008c 	.word	0x2000008c
 800288c:	200000e8 	.word	0x200000e8
 8002890:	20000112 	.word	0x20000112
 8002894:	20000178 	.word	0x20000178
 8002898:	20000188 	.word	0x20000188
 800289c:	20000098 	.word	0x20000098
 80028a0:	200000f8 	.word	0x200000f8
 80028a4:	200000c8 	.word	0x200000c8
 80028a8:	20000108 	.word	0x20000108
 80028ac:	20000114 	.word	0x20000114
 80028b0:	20000094 	.word	0x20000094
 80028b4:	20000100 	.word	0x20000100
 80028b8:	200000fc 	.word	0x200000fc
 80028bc:	20000080 	.word	0x20000080
 80028c0:	fffffce0 	.word	0xfffffce0
 80028c4:	00000000 	.word	0x00000000

080028c8 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a96      	ldr	r2, [pc, #600]	; (8002b30 <HAL_TIM_IC_CaptureCallback+0x268>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f040 8214 	bne.w	8002d04 <HAL_TIM_IC_CaptureCallback+0x43c>
	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7f1b      	ldrb	r3, [r3, #28]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d17a      	bne.n	80029da <HAL_TIM_IC_CaptureCallback+0x112>
	{
		if(IS_FIRDT_CAPTURED==0)
 80028e4:	4b93      	ldr	r3, [pc, #588]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d11b      	bne.n	8002924 <HAL_TIM_IC_CaptureCallback+0x5c>
		{
			IS_FIRDT_CAPTURED=1;
 80028ec:	4b91      	ldr	r3, [pc, #580]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
			echo1=HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_1);
 80028f2:	2100      	movs	r1, #0
 80028f4:	4890      	ldr	r0, [pc, #576]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 80028f6:	f003 ff4b 	bl	8006790 <HAL_TIM_ReadCapturedValue>
 80028fa:	4603      	mov	r3, r0
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	4b8f      	ldr	r3, [pc, #572]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x274>)
 8002900:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8002902:	4b8d      	ldr	r3, [pc, #564]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a1a      	ldr	r2, [r3, #32]
 8002908:	4b8b      	ldr	r3, [pc, #556]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 020a 	bic.w	r2, r2, #10
 8002910:	621a      	str	r2, [r3, #32]
 8002912:	4b89      	ldr	r3, [pc, #548]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	4b87      	ldr	r3, [pc, #540]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0202 	orr.w	r2, r2, #2
 8002920:	621a      	str	r2, [r3, #32]
 8002922:	e05a      	b.n	80029da <HAL_TIM_IC_CaptureCallback+0x112>
		}
		else if(IS_FIRDT_CAPTURED==1)
 8002924:	4b83      	ldr	r3, [pc, #524]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d156      	bne.n	80029da <HAL_TIM_IC_CaptureCallback+0x112>
		{
			IS_FIRDT_CAPTURED=0;
 800292c:	4b81      	ldr	r3, [pc, #516]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
			echo2=HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_1);
 8002932:	2100      	movs	r1, #0
 8002934:	4880      	ldr	r0, [pc, #512]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002936:	f003 ff2b 	bl	8006790 <HAL_TIM_ReadCapturedValue>
 800293a:	4603      	mov	r3, r0
 800293c:	b29a      	uxth	r2, r3
 800293e:	4b80      	ldr	r3, [pc, #512]	; (8002b40 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002940:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim4,0);
 8002942:	4b7d      	ldr	r3, [pc, #500]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
			if(echo1<echo2){count=echo2-echo1;}
 800294a:	4b7c      	ldr	r3, [pc, #496]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x274>)
 800294c:	881a      	ldrh	r2, [r3, #0]
 800294e:	4b7c      	ldr	r3, [pc, #496]	; (8002b40 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d208      	bcs.n	8002968 <HAL_TIM_IC_CaptureCallback+0xa0>
 8002956:	4b7a      	ldr	r3, [pc, #488]	; (8002b40 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002958:	881a      	ldrh	r2, [r3, #0]
 800295a:	4b78      	ldr	r3, [pc, #480]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x274>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	b29a      	uxth	r2, r3
 8002962:	4b78      	ldr	r3, [pc, #480]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	e00f      	b.n	8002988 <HAL_TIM_IC_CaptureCallback+0xc0>
			else if(echo1>echo2){count=0xffff-echo1+echo2;}
 8002968:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x274>)
 800296a:	881a      	ldrh	r2, [r3, #0]
 800296c:	4b74      	ldr	r3, [pc, #464]	; (8002b40 <HAL_TIM_IC_CaptureCallback+0x278>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d909      	bls.n	8002988 <HAL_TIM_IC_CaptureCallback+0xc0>
 8002974:	4b72      	ldr	r3, [pc, #456]	; (8002b40 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002976:	881a      	ldrh	r2, [r3, #0]
 8002978:	4b70      	ldr	r3, [pc, #448]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x274>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	4b6f      	ldr	r3, [pc, #444]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002986:	801a      	strh	r2, [r3, #0]
			distance1=count*0.17;//测得距离单位为mm
 8002988:	4b6e      	ldr	r3, [pc, #440]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fd9d 	bl	80004cc <__aeabi_i2d>
 8002992:	a365      	add	r3, pc, #404	; (adr r3, 8002b28 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd fe02 	bl	80005a0 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	f7fe f896 	bl	8000ad4 <__aeabi_d2iz>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4a67      	ldr	r2, [pc, #412]	; (8002b48 <HAL_TIM_IC_CaptureCallback+0x280>)
 80029ac:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80029ae:	4b62      	ldr	r3, [pc, #392]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6a1a      	ldr	r2, [r3, #32]
 80029b4:	4b60      	ldr	r3, [pc, #384]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 020a 	bic.w	r2, r2, #10
 80029bc:	621a      	str	r2, [r3, #32]
 80029be:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b5d      	ldr	r3, [pc, #372]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6a12      	ldr	r2, [r2, #32]
 80029c8:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4,TIM_IT_CC1);
 80029ca:	4b5b      	ldr	r3, [pc, #364]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0202 	bic.w	r2, r2, #2
 80029d8:	60da      	str	r2, [r3, #12]
		}
	}
	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	7f1b      	ldrb	r3, [r3, #28]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d17a      	bne.n	8002ad8 <HAL_TIM_IC_CaptureCallback+0x210>
	{
		if(IS_FIRDT_CAPTURED==0)
 80029e2:	4b54      	ldr	r3, [pc, #336]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d11b      	bne.n	8002a22 <HAL_TIM_IC_CaptureCallback+0x15a>
		{
			IS_FIRDT_CAPTURED=1;
 80029ea:	4b52      	ldr	r3, [pc, #328]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
			echo1=HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_2);
 80029f0:	2104      	movs	r1, #4
 80029f2:	4851      	ldr	r0, [pc, #324]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 80029f4:	f003 fecc 	bl	8006790 <HAL_TIM_ReadCapturedValue>
 80029f8:	4603      	mov	r3, r0
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	4b4f      	ldr	r3, [pc, #316]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x274>)
 80029fe:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_FALLING);
 8002a00:	4b4d      	ldr	r3, [pc, #308]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6a1a      	ldr	r2, [r3, #32]
 8002a06:	4b4c      	ldr	r3, [pc, #304]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a0e:	621a      	str	r2, [r3, #32]
 8002a10:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6a1a      	ldr	r2, [r3, #32]
 8002a16:	4b48      	ldr	r3, [pc, #288]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0220 	orr.w	r2, r2, #32
 8002a1e:	621a      	str	r2, [r3, #32]
 8002a20:	e05a      	b.n	8002ad8 <HAL_TIM_IC_CaptureCallback+0x210>
		}
		else if(IS_FIRDT_CAPTURED==1)
 8002a22:	4b44      	ldr	r3, [pc, #272]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d156      	bne.n	8002ad8 <HAL_TIM_IC_CaptureCallback+0x210>
		{
			IS_FIRDT_CAPTURED=0;
 8002a2a:	4b42      	ldr	r3, [pc, #264]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
			echo2=HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_2);
 8002a30:	2104      	movs	r1, #4
 8002a32:	4841      	ldr	r0, [pc, #260]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002a34:	f003 feac 	bl	8006790 <HAL_TIM_ReadCapturedValue>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002a3e:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim4,0);
 8002a40:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2200      	movs	r2, #0
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
			if(echo1<echo2){count=echo2-echo1;}
 8002a48:	4b3c      	ldr	r3, [pc, #240]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x274>)
 8002a4a:	881a      	ldrh	r2, [r3, #0]
 8002a4c:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d208      	bcs.n	8002a66 <HAL_TIM_IC_CaptureCallback+0x19e>
 8002a54:	4b3a      	ldr	r3, [pc, #232]	; (8002b40 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002a56:	881a      	ldrh	r2, [r3, #0]
 8002a58:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x274>)
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002a62:	801a      	strh	r2, [r3, #0]
 8002a64:	e00f      	b.n	8002a86 <HAL_TIM_IC_CaptureCallback+0x1be>
			else if(echo1>echo2){count=0xffff-echo1+echo2;}
 8002a66:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x274>)
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	4b35      	ldr	r3, [pc, #212]	; (8002b40 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d909      	bls.n	8002a86 <HAL_TIM_IC_CaptureCallback+0x1be>
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002a74:	881a      	ldrh	r2, [r3, #0]
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x274>)
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	4b30      	ldr	r3, [pc, #192]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002a84:	801a      	strh	r2, [r3, #0]
			distance2=count*0.17;//测得距离单位为mm
 8002a86:	4b2f      	ldr	r3, [pc, #188]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fd1e 	bl	80004cc <__aeabi_i2d>
 8002a90:	a325      	add	r3, pc, #148	; (adr r3, 8002b28 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a96:	f7fd fd83 	bl	80005a0 <__aeabi_dmul>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7fe f817 	bl	8000ad4 <__aeabi_d2iz>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4a28      	ldr	r2, [pc, #160]	; (8002b4c <HAL_TIM_IC_CaptureCallback+0x284>)
 8002aaa:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a1a      	ldr	r2, [r3, #32]
 8002ab2:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002aba:	621a      	str	r2, [r3, #32]
 8002abc:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a12      	ldr	r2, [r2, #32]
 8002ac6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4,TIM_IT_CC2);
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0204 	bic.w	r2, r2, #4
 8002ad6:	60da      	str	r2, [r3, #12]
		}
	}
	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_3)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7f1b      	ldrb	r3, [r3, #28]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	f040 8092 	bne.w	8002c06 <HAL_TIM_IC_CaptureCallback+0x33e>
	{
		if(IS_FIRDT_CAPTURED==0)
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d132      	bne.n	8002b50 <HAL_TIM_IC_CaptureCallback+0x288>
		{
			IS_FIRDT_CAPTURED=1;
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
			echo1=HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_3);
 8002af0:	2108      	movs	r1, #8
 8002af2:	4811      	ldr	r0, [pc, #68]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002af4:	f003 fe4c 	bl	8006790 <HAL_TIM_ReadCapturedValue>
 8002af8:	4603      	mov	r3, r0
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <HAL_TIM_IC_CaptureCallback+0x274>)
 8002afe:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_FALLING);
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b0e:	621a      	str	r2, [r3, #32]
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a1a      	ldr	r2, [r3, #32]
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1e:	621a      	str	r2, [r3, #32]
 8002b20:	e071      	b.n	8002c06 <HAL_TIM_IC_CaptureCallback+0x33e>
 8002b22:	bf00      	nop
 8002b24:	f3af 8000 	nop.w
 8002b28:	5c28f5c3 	.word	0x5c28f5c3
 8002b2c:	3fc5c28f 	.word	0x3fc5c28f
 8002b30:	40000800 	.word	0x40000800
 8002b34:	20000175 	.word	0x20000175
 8002b38:	200001d4 	.word	0x200001d4
 8002b3c:	20000040 	.word	0x20000040
 8002b40:	20000042 	.word	0x20000042
 8002b44:	20000044 	.word	0x20000044
 8002b48:	200000cc 	.word	0x200000cc
 8002b4c:	200000e4 	.word	0x200000e4
		}
		else if(IS_FIRDT_CAPTURED==1)
 8002b50:	4b71      	ldr	r3, [pc, #452]	; (8002d18 <HAL_TIM_IC_CaptureCallback+0x450>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d156      	bne.n	8002c06 <HAL_TIM_IC_CaptureCallback+0x33e>
		{
			IS_FIRDT_CAPTURED=0;
 8002b58:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_TIM_IC_CaptureCallback+0x450>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
			echo2=HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_3);
 8002b5e:	2108      	movs	r1, #8
 8002b60:	486e      	ldr	r0, [pc, #440]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002b62:	f003 fe15 	bl	8006790 <HAL_TIM_ReadCapturedValue>
 8002b66:	4603      	mov	r3, r0
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0x458>)
 8002b6c:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim4,0);
 8002b6e:	4b6b      	ldr	r3, [pc, #428]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
			if(echo1<echo2){count=echo2-echo1;}
 8002b76:	4b6b      	ldr	r3, [pc, #428]	; (8002d24 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8002b78:	881a      	ldrh	r2, [r3, #0]
 8002b7a:	4b69      	ldr	r3, [pc, #420]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0x458>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d208      	bcs.n	8002b94 <HAL_TIM_IC_CaptureCallback+0x2cc>
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0x458>)
 8002b84:	881a      	ldrh	r2, [r3, #0]
 8002b86:	4b67      	ldr	r3, [pc, #412]	; (8002d24 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	4b66      	ldr	r3, [pc, #408]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0x460>)
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	e00f      	b.n	8002bb4 <HAL_TIM_IC_CaptureCallback+0x2ec>
			else if(echo1>echo2){count=0xffff-echo1+echo2;}
 8002b94:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8002b96:	881a      	ldrh	r2, [r3, #0]
 8002b98:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0x458>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d909      	bls.n	8002bb4 <HAL_TIM_IC_CaptureCallback+0x2ec>
 8002ba0:	4b5f      	ldr	r3, [pc, #380]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0x458>)
 8002ba2:	881a      	ldrh	r2, [r3, #0]
 8002ba4:	4b5f      	ldr	r3, [pc, #380]	; (8002d24 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	4b5d      	ldr	r3, [pc, #372]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0x460>)
 8002bb2:	801a      	strh	r2, [r3, #0]
			distance3=count*0.17;//测得距离单位为mm
 8002bb4:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0x460>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fc87 	bl	80004cc <__aeabi_i2d>
 8002bbe:	a354      	add	r3, pc, #336	; (adr r3, 8002d10 <HAL_TIM_IC_CaptureCallback+0x448>)
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f7fd fcec 	bl	80005a0 <__aeabi_dmul>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f7fd ff80 	bl	8000ad4 <__aeabi_d2iz>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4a55      	ldr	r2, [pc, #340]	; (8002d2c <HAL_TIM_IC_CaptureCallback+0x464>)
 8002bd8:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_RISING);
 8002bda:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a1a      	ldr	r2, [r3, #32]
 8002be0:	4b4e      	ldr	r3, [pc, #312]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002be8:	621a      	str	r2, [r3, #32]
 8002bea:	4b4c      	ldr	r3, [pc, #304]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b4b      	ldr	r3, [pc, #300]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a12      	ldr	r2, [r2, #32]
 8002bf4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4,TIM_IT_CC3);
 8002bf6:	4b49      	ldr	r3, [pc, #292]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0208 	bic.w	r2, r2, #8
 8002c04:	60da      	str	r2, [r3, #12]
		}
	}
	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_4)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7f1b      	ldrb	r3, [r3, #28]
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d17a      	bne.n	8002d04 <HAL_TIM_IC_CaptureCallback+0x43c>
	{
		if(IS_FIRDT_CAPTURED==0)
 8002c0e:	4b42      	ldr	r3, [pc, #264]	; (8002d18 <HAL_TIM_IC_CaptureCallback+0x450>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11b      	bne.n	8002c4e <HAL_TIM_IC_CaptureCallback+0x386>
		{
			IS_FIRDT_CAPTURED=1;
 8002c16:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <HAL_TIM_IC_CaptureCallback+0x450>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
			echo1=HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_4);
 8002c1c:	210c      	movs	r1, #12
 8002c1e:	483f      	ldr	r0, [pc, #252]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002c20:	f003 fdb6 	bl	8006790 <HAL_TIM_ReadCapturedValue>
 8002c24:	4603      	mov	r3, r0
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8002c2a:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4,TIM_CHANNEL_4,TIM_INPUTCHANNELPOLARITY_FALLING);
 8002c2c:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6a1a      	ldr	r2, [r3, #32]
 8002c32:	4b3a      	ldr	r3, [pc, #232]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c3a:	621a      	str	r2, [r3, #32]
 8002c3c:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6a1a      	ldr	r2, [r3, #32]
 8002c42:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c4a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4,TIM_CHANNEL_4,TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4,TIM_IT_CC4);
		}
	}
	}
}
 8002c4c:	e05a      	b.n	8002d04 <HAL_TIM_IC_CaptureCallback+0x43c>
		else if(IS_FIRDT_CAPTURED==1)
 8002c4e:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <HAL_TIM_IC_CaptureCallback+0x450>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d156      	bne.n	8002d04 <HAL_TIM_IC_CaptureCallback+0x43c>
			IS_FIRDT_CAPTURED=0;
 8002c56:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <HAL_TIM_IC_CaptureCallback+0x450>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
			echo2=HAL_TIM_ReadCapturedValue(&htim4,TIM_CHANNEL_4);
 8002c5c:	210c      	movs	r1, #12
 8002c5e:	482f      	ldr	r0, [pc, #188]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002c60:	f003 fd96 	bl	8006790 <HAL_TIM_ReadCapturedValue>
 8002c64:	4603      	mov	r3, r0
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0x458>)
 8002c6a:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim4,0);
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2200      	movs	r2, #0
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
			if(echo1<echo2){count=echo2-echo1;}
 8002c74:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8002c76:	881a      	ldrh	r2, [r3, #0]
 8002c78:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0x458>)
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d208      	bcs.n	8002c92 <HAL_TIM_IC_CaptureCallback+0x3ca>
 8002c80:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0x458>)
 8002c82:	881a      	ldrh	r2, [r3, #0]
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0x460>)
 8002c8e:	801a      	strh	r2, [r3, #0]
 8002c90:	e00f      	b.n	8002cb2 <HAL_TIM_IC_CaptureCallback+0x3ea>
			else if(echo1>echo2){count=0xffff-echo1+echo2;}
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8002c94:	881a      	ldrh	r2, [r3, #0]
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0x458>)
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d909      	bls.n	8002cb2 <HAL_TIM_IC_CaptureCallback+0x3ea>
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0x458>)
 8002ca0:	881a      	ldrh	r2, [r3, #0]
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_TIM_IC_CaptureCallback+0x45c>)
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0x460>)
 8002cb0:	801a      	strh	r2, [r3, #0]
			distance4=count*0.17;//测得距离单位为mm
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0x460>)
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fc08 	bl	80004cc <__aeabi_i2d>
 8002cbc:	a314      	add	r3, pc, #80	; (adr r3, 8002d10 <HAL_TIM_IC_CaptureCallback+0x448>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	f7fd fc6d 	bl	80005a0 <__aeabi_dmul>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f7fd ff01 	bl	8000ad4 <__aeabi_d2iz>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4a16      	ldr	r2, [pc, #88]	; (8002d30 <HAL_TIM_IC_CaptureCallback+0x468>)
 8002cd6:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4,TIM_CHANNEL_4,TIM_INPUTCHANNELPOLARITY_RISING);
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6a1a      	ldr	r2, [r3, #32]
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ce6:	621a      	str	r2, [r3, #32]
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6a12      	ldr	r2, [r2, #32]
 8002cf2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4,TIM_IT_CC4);
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x454>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0210 	bic.w	r2, r2, #16
 8002d02:	60da      	str	r2, [r3, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	f3af 8000 	nop.w
 8002d10:	5c28f5c3 	.word	0x5c28f5c3
 8002d14:	3fc5c28f 	.word	0x3fc5c28f
 8002d18:	20000175 	.word	0x20000175
 8002d1c:	200001d4 	.word	0x200001d4
 8002d20:	20000042 	.word	0x20000042
 8002d24:	20000040 	.word	0x20000040
 8002d28:	20000044 	.word	0x20000044
 8002d2c:	20000090 	.word	0x20000090
 8002d30:	200000b0 	.word	0x200000b0

08002d34 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <HAL_UART_RxCpltCallback+0x9c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d127      	bne.n	8002d96 <HAL_UART_RxCpltCallback+0x62>
	{
		Rx_buffer[Rx_len] = Rx_byte;
 8002d46:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <HAL_UART_RxCpltCallback+0xa0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <HAL_UART_RxCpltCallback+0xa4>)
 8002d4c:	7811      	ldrb	r1, [r2, #0]
 8002d4e:	4a23      	ldr	r2, [pc, #140]	; (8002ddc <HAL_UART_RxCpltCallback+0xa8>)
 8002d50:	54d1      	strb	r1, [r2, r3]
		Rx_len++;
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <HAL_UART_RxCpltCallback+0xa0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <HAL_UART_RxCpltCallback+0xa0>)
 8002d5a:	6013      	str	r3, [r2, #0]
		if(Rx_len==RXBUFFER_LEN)
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_UART_RxCpltCallback+0xa0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d113      	bne.n	8002d8c <HAL_UART_RxCpltCallback+0x58>
		{
			extract_RX();
 8002d64:	f7fe f9d8 	bl	8001118 <extract_RX>
			Rx_len=0;
 8002d68:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <HAL_UART_RxCpltCallback+0xa0>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
			mode_switch(Rx_command);
 8002d6e:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <HAL_UART_RxCpltCallback+0xac>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fa1e 	bl	80011b4 <mode_switch>
			if(mode==1){remote_control(Rx_command);}
 8002d78:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <HAL_UART_RxCpltCallback+0xb0>)
 8002d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d104      	bne.n	8002d8c <HAL_UART_RxCpltCallback+0x58>
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_UART_RxCpltCallback+0xac>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fad2 	bl	8001330 <remote_control>
		}
		HAL_UART_Receive_IT(&huart4,&Rx_byte,sizeof(Rx_byte));		// 重新使能串口4接收中断
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4912      	ldr	r1, [pc, #72]	; (8002dd8 <HAL_UART_RxCpltCallback+0xa4>)
 8002d90:	4815      	ldr	r0, [pc, #84]	; (8002de8 <HAL_UART_RxCpltCallback+0xb4>)
 8002d92:	f004 fb59 	bl	8007448 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a14      	ldr	r2, [pc, #80]	; (8002dec <HAL_UART_RxCpltCallback+0xb8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d112      	bne.n	8002dc6 <HAL_UART_RxCpltCallback+0x92>
	{
		uint16_t tempt /*定义临时变量存放接受的数�????????????????*/;
		tempt=USART1_RXbuff;
 8002da0:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <HAL_UART_RxCpltCallback+0xbc>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	81fb      	strh	r3, [r7, #14]
		Openmv_Receive_Data(tempt);
 8002da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fa28 	bl	8003200 <Openmv_Receive_Data>
		extract_MVRX1();
 8002db0:	f000 fae8 	bl	8003384 <extract_MVRX1>
		extract_MVRX2();
 8002db4:	f000 fb30 	bl	8003418 <extract_MVRX2>
		extract_MVRX3();
 8002db8:	f000 fb66 	bl	8003488 <extract_MVRX3>
	    HAL_UART_Receive_IT(&huart1,(void *)&USART1_RXbuff,1);
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	490c      	ldr	r1, [pc, #48]	; (8002df0 <HAL_UART_RxCpltCallback+0xbc>)
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <HAL_UART_RxCpltCallback+0xc0>)
 8002dc2:	f004 fb41 	bl	8007448 <HAL_UART_Receive_IT>
	}
}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40004c00 	.word	0x40004c00
 8002dd4:	2000010c 	.word	0x2000010c
 8002dd8:	20000118 	.word	0x20000118
 8002ddc:	2000011c 	.word	0x2000011c
 8002de0:	200000ea 	.word	0x200000ea
 8002de4:	200000c4 	.word	0x200000c4
 8002de8:	200003c8 	.word	0x200003c8
 8002dec:	40013800 	.word	0x40013800
 8002df0:	20000174 	.word	0x20000174
 8002df4:	20000384 	.word	0x20000384

08002df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dfc:	b672      	cpsid	i
}
 8002dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e00:	e7fe      	b.n	8002e00 <Error_Handler+0x8>
	...

08002e04 <motor_init>:
#include "motor.h"

const double compute_factor =reduction_ratio*4*pulsenum*delay;

void motor_init()
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_3);
 8002e08:	2108      	movs	r1, #8
 8002e0a:	480c      	ldr	r0, [pc, #48]	; (8002e3c <motor_init+0x38>)
 8002e0c:	f002 fe4c 	bl	8005aa8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_4);
 8002e10:	210c      	movs	r1, #12
 8002e12:	480a      	ldr	r0, [pc, #40]	; (8002e3c <motor_init+0x38>)
 8002e14:	f002 fe48 	bl	8005aa8 <HAL_TIM_PWM_Start>
	  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002e18:	213c      	movs	r1, #60	; 0x3c
 8002e1a:	4809      	ldr	r0, [pc, #36]	; (8002e40 <motor_init+0x3c>)
 8002e1c:	f003 f90c 	bl	8006038 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8002e20:	213c      	movs	r1, #60	; 0x3c
 8002e22:	4808      	ldr	r0, [pc, #32]	; (8002e44 <motor_init+0x40>)
 8002e24:	f003 f908 	bl	8006038 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Base_Start_IT((TIM_HandleTypeDef *)&htim7);
 8002e28:	4807      	ldr	r0, [pc, #28]	; (8002e48 <motor_init+0x44>)
 8002e2a:	f002 fd8d 	bl	8005948 <HAL_TIM_Base_Start_IT>
	  motor_PWM(0, 0);
 8002e2e:	2100      	movs	r1, #0
 8002e30:	2000      	movs	r0, #0
 8002e32:	f000 f80b 	bl	8002e4c <motor_PWM>
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000021c 	.word	0x2000021c
 8002e40:	200002f4 	.word	0x200002f4
 8002e44:	2000018c 	.word	0x2000018c
 8002e48:	2000033c 	.word	0x2000033c

08002e4c <motor_PWM>:
void motor_PWM(int16_t leftspeed,int16_t rightspeed)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	460a      	mov	r2, r1
 8002e56:	80fb      	strh	r3, [r7, #6]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	80bb      	strh	r3, [r7, #4]
	if(leftspeed > maxspeed)
 8002e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e60:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002e64:	dd02      	ble.n	8002e6c <motor_PWM+0x20>
		leftspeed = maxspeed;
 8002e66:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002e6a:	80fb      	strh	r3, [r7, #6]
	if(rightspeed > maxspeed)
 8002e6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e70:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002e74:	dd02      	ble.n	8002e7c <motor_PWM+0x30>
		rightspeed = maxspeed;
 8002e76:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002e7a:	80bb      	strh	r3, [r7, #4]
	if(leftspeed < -maxspeed)
 8002e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e80:	f513 7f48 	cmn.w	r3, #800	; 0x320
 8002e84:	da02      	bge.n	8002e8c <motor_PWM+0x40>
		leftspeed = -maxspeed;
 8002e86:	f64f 43e0 	movw	r3, #64736	; 0xfce0
 8002e8a:	80fb      	strh	r3, [r7, #6]
	if(rightspeed < -maxspeed)
 8002e8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e90:	f513 7f48 	cmn.w	r3, #800	; 0x320
 8002e94:	da02      	bge.n	8002e9c <motor_PWM+0x50>
		rightspeed = -maxspeed;
 8002e96:	f64f 43e0 	movw	r3, #64736	; 0xfce0
 8002e9a:	80bb      	strh	r3, [r7, #4]
	if(leftspeed > 0){
 8002e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	dd0a      	ble.n	8002eba <motor_PWM+0x6e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET); //
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	482f      	ldr	r0, [pc, #188]	; (8002f68 <motor_PWM+0x11c>)
 8002eaa:	f002 f873 	bl	8004f94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);//
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2104      	movs	r1, #4
 8002eb2:	482d      	ldr	r0, [pc, #180]	; (8002f68 <motor_PWM+0x11c>)
 8002eb4:	f002 f86e 	bl	8004f94 <HAL_GPIO_WritePin>
 8002eb8:	e018      	b.n	8002eec <motor_PWM+0xa0>
	}
	else if(leftspeed < 0){
 8002eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	da0a      	bge.n	8002ed8 <motor_PWM+0x8c>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);//
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	4828      	ldr	r0, [pc, #160]	; (8002f68 <motor_PWM+0x11c>)
 8002ec8:	f002 f864 	bl	8004f94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET); //
 8002ecc:	2201      	movs	r2, #1
 8002ece:	2104      	movs	r1, #4
 8002ed0:	4825      	ldr	r0, [pc, #148]	; (8002f68 <motor_PWM+0x11c>)
 8002ed2:	f002 f85f 	bl	8004f94 <HAL_GPIO_WritePin>
 8002ed6:	e009      	b.n	8002eec <motor_PWM+0xa0>
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);//
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2102      	movs	r1, #2
 8002edc:	4822      	ldr	r0, [pc, #136]	; (8002f68 <motor_PWM+0x11c>)
 8002ede:	f002 f859 	bl	8004f94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);//
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2104      	movs	r1, #4
 8002ee6:	4820      	ldr	r0, [pc, #128]	; (8002f68 <motor_PWM+0x11c>)
 8002ee8:	f002 f854 	bl	8004f94 <HAL_GPIO_WritePin>
	}

	if(rightspeed > 0){
 8002eec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	dd0a      	ble.n	8002f0a <motor_PWM+0xbe>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);//
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2108      	movs	r1, #8
 8002ef8:	481b      	ldr	r0, [pc, #108]	; (8002f68 <motor_PWM+0x11c>)
 8002efa:	f002 f84b 	bl	8004f94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); //
 8002efe:	2200      	movs	r2, #0
 8002f00:	2110      	movs	r1, #16
 8002f02:	4819      	ldr	r0, [pc, #100]	; (8002f68 <motor_PWM+0x11c>)
 8002f04:	f002 f846 	bl	8004f94 <HAL_GPIO_WritePin>
 8002f08:	e018      	b.n	8002f3c <motor_PWM+0xf0>
	}
	else if(rightspeed < 0){
 8002f0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da0a      	bge.n	8002f28 <motor_PWM+0xdc>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);//
 8002f12:	2200      	movs	r2, #0
 8002f14:	2108      	movs	r1, #8
 8002f16:	4814      	ldr	r0, [pc, #80]	; (8002f68 <motor_PWM+0x11c>)
 8002f18:	f002 f83c 	bl	8004f94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); //
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	2110      	movs	r1, #16
 8002f20:	4811      	ldr	r0, [pc, #68]	; (8002f68 <motor_PWM+0x11c>)
 8002f22:	f002 f837 	bl	8004f94 <HAL_GPIO_WritePin>
 8002f26:	e009      	b.n	8002f3c <motor_PWM+0xf0>
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);//
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2108      	movs	r1, #8
 8002f2c:	480e      	ldr	r0, [pc, #56]	; (8002f68 <motor_PWM+0x11c>)
 8002f2e:	f002 f831 	bl	8004f94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);//
 8002f32:	2200      	movs	r2, #0
 8002f34:	2110      	movs	r1, #16
 8002f36:	480c      	ldr	r0, [pc, #48]	; (8002f68 <motor_PWM+0x11c>)
 8002f38:	f002 f82c 	bl	8004f94 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_3,abs(leftspeed));
 8002f3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bfb8      	it	lt
 8002f44:	425b      	neglt	r3, r3
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <motor_PWM+0x120>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,abs(rightspeed));
 8002f4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bfb8      	it	lt
 8002f56:	425b      	neglt	r3, r3
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <motor_PWM+0x120>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40011800 	.word	0x40011800
 8002f6c:	2000021c 	.word	0x2000021c

08002f70 <motor_leftfeedback>:

int motor_leftfeedback()
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
	int countnum =(short)__HAL_TIM_GET_COUNTER(&htim2);	  //读取编码器数�????
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <motor_leftfeedback+0x68>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	b21b      	sxth	r3, r3
 8002f7e:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8002f80:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <motor_leftfeedback+0x68>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2200      	movs	r2, #0
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24
	int speed;
	speed =1050*diameter*pi*countnum/ compute_factor;
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7fd fa9f 	bl	80004cc <__aeabi_i2d>
 8002f8e:	a30e      	add	r3, pc, #56	; (adr r3, 8002fc8 <motor_leftfeedback+0x58>)
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f7fd fb04 	bl	80005a0 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	a30b      	add	r3, pc, #44	; (adr r3, 8002fd0 <motor_leftfeedback+0x60>)
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	f7fd fc25 	bl	80007f4 <__aeabi_ddiv>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f7fd fd8f 	bl	8000ad4 <__aeabi_d2iz>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	603b      	str	r3, [r7, #0]
	return speed;
 8002fba:	683b      	ldr	r3, [r7, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	99999999 	.word	0x99999999
 8002fcc:	410a2c71 	.word	0x410a2c71
 8002fd0:	00000000 	.word	0x00000000
 8002fd4:	40e6e180 	.word	0x40e6e180
 8002fd8:	200002f4 	.word	0x200002f4
 8002fdc:	00000000 	.word	0x00000000

08002fe0 <motor_rightfeedback>:

int motor_rightfeedback()
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
	int countnum =(short)__HAL_TIM_GET_COUNTER(&htim8);	  //读取编码器数�????
 8002fe6:	4b18      	ldr	r3, [pc, #96]	; (8003048 <motor_rightfeedback+0x68>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	b21b      	sxth	r3, r3
 8002fee:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim8,0);
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <motor_rightfeedback+0x68>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24
	int speed;
	speed = 1050*diameter*pi*countnum/ compute_factor;
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7fd fa67 	bl	80004cc <__aeabi_i2d>
 8002ffe:	a30e      	add	r3, pc, #56	; (adr r3, 8003038 <motor_rightfeedback+0x58>)
 8003000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003004:	f7fd facc 	bl	80005a0 <__aeabi_dmul>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	a30b      	add	r3, pc, #44	; (adr r3, 8003040 <motor_rightfeedback+0x60>)
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	f7fd fbed 	bl	80007f4 <__aeabi_ddiv>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	f7fd fd57 	bl	8000ad4 <__aeabi_d2iz>
 8003026:	4603      	mov	r3, r0
 8003028:	603b      	str	r3, [r7, #0]
	return speed;
 800302a:	683b      	ldr	r3, [r7, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	f3af 8000 	nop.w
 8003038:	99999999 	.word	0x99999999
 800303c:	410a2c71 	.word	0x410a2c71
 8003040:	00000000 	.word	0x00000000
 8003044:	40e6e180 	.word	0x40e6e180
 8003048:	2000018c 	.word	0x2000018c
 800304c:	00000000 	.word	0x00000000

08003050 <leftspeedPID>:

int leftspeedPID(int targetspeed,int speed,int *error)
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
	int lefterror = targetspeed - speed;
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	617b      	str	r3, [r7, #20]
	static int lefterror_last = 0,lefterror_before = 0;
	int pwm_pid=0;
 8003064:	2300      	movs	r3, #0
 8003066:	613b      	str	r3, [r7, #16]
	*error = lefterror;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	601a      	str	r2, [r3, #0]
	pwm_pid = KP*(lefterror-lefterror_last)+KI*lefterror
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <leftspeedPID+0xd0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fa28 	bl	80004cc <__aeabi_i2d>
 800307c:	a322      	add	r3, pc, #136	; (adr r3, 8003108 <leftspeedPID+0xb8>)
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	f7fd fa8d 	bl	80005a0 <__aeabi_dmul>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4614      	mov	r4, r2
 800308c:	461d      	mov	r5, r3
 800308e:	6978      	ldr	r0, [r7, #20]
 8003090:	f7fd fa1c 	bl	80004cc <__aeabi_i2d>
 8003094:	a31e      	add	r3, pc, #120	; (adr r3, 8003110 <leftspeedPID+0xc0>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f7fd fa81 	bl	80005a0 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4620      	mov	r0, r4
 80030a4:	4629      	mov	r1, r5
 80030a6:	f7fd f8c5 	bl	8000234 <__adddf3>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4614      	mov	r4, r2
 80030b0:	461d      	mov	r5, r3
			+KD*(lefterror-2*lefterror_last+lefterror_before);
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <leftspeedPID+0xd0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	1ad2      	subs	r2, r2, r3
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <leftspeedPID+0xd4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4413      	add	r3, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fa02 	bl	80004cc <__aeabi_i2d>
 80030c8:	a313      	add	r3, pc, #76	; (adr r3, 8003118 <leftspeedPID+0xc8>)
 80030ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ce:	f7fd fa67 	bl	80005a0 <__aeabi_dmul>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4620      	mov	r0, r4
 80030d8:	4629      	mov	r1, r5
 80030da:	f7fd f8ab 	bl	8000234 <__adddf3>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
	pwm_pid = KP*(lefterror-lefterror_last)+KI*lefterror
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	f7fd fcf5 	bl	8000ad4 <__aeabi_d2iz>
 80030ea:	4603      	mov	r3, r0
 80030ec:	613b      	str	r3, [r7, #16]
	lefterror_before = lefterror_last;	  	    // 保存上上次误差
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <leftspeedPID+0xd0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <leftspeedPID+0xd4>)
 80030f4:	6013      	str	r3, [r2, #0]
	lefterror_last = lefterror;	              // 保存上次偏差
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <leftspeedPID+0xd0>)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	6013      	str	r3, [r2, #0]
	return pwm_pid;
 80030fc:	693b      	ldr	r3, [r7, #16]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bdb0      	pop	{r4, r5, r7, pc}
 8003106:	bf00      	nop
 8003108:	cccccccd 	.word	0xcccccccd
 800310c:	3feccccc 	.word	0x3feccccc
 8003110:	33333333 	.word	0x33333333
 8003114:	3fd33333 	.word	0x3fd33333
 8003118:	9999999a 	.word	0x9999999a
 800311c:	3fb99999 	.word	0x3fb99999
 8003120:	20000048 	.word	0x20000048
 8003124:	2000004c 	.word	0x2000004c

08003128 <rightspeedPID>:

int rightspeedPID(int targetspeed,int speed,int *error)
{
 8003128:	b5b0      	push	{r4, r5, r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
	int righterror = targetspeed - speed;
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	617b      	str	r3, [r7, #20]
	static int righterror_last = 0,righterror_before = 0;
	int pwm_pid=0;
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]
	*error =righterror;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	601a      	str	r2, [r3, #0]
	pwm_pid = KP*(righterror-righterror_last)+KI*righterror+
 8003146:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <rightspeedPID+0xd0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd f9bc 	bl	80004cc <__aeabi_i2d>
 8003154:	a322      	add	r3, pc, #136	; (adr r3, 80031e0 <rightspeedPID+0xb8>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f7fd fa21 	bl	80005a0 <__aeabi_dmul>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4614      	mov	r4, r2
 8003164:	461d      	mov	r5, r3
 8003166:	6978      	ldr	r0, [r7, #20]
 8003168:	f7fd f9b0 	bl	80004cc <__aeabi_i2d>
 800316c:	a31e      	add	r3, pc, #120	; (adr r3, 80031e8 <rightspeedPID+0xc0>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f7fd fa15 	bl	80005a0 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4620      	mov	r0, r4
 800317c:	4629      	mov	r1, r5
 800317e:	f7fd f859 	bl	8000234 <__adddf3>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4614      	mov	r4, r2
 8003188:	461d      	mov	r5, r3
			KD*(righterror-2*righterror_last+righterror_before);
 800318a:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <rightspeedPID+0xd0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	1ad2      	subs	r2, r2, r3
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <rightspeedPID+0xd4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4413      	add	r3, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f996 	bl	80004cc <__aeabi_i2d>
 80031a0:	a313      	add	r3, pc, #76	; (adr r3, 80031f0 <rightspeedPID+0xc8>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f7fd f9fb 	bl	80005a0 <__aeabi_dmul>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
	pwm_pid = KP*(righterror-righterror_last)+KI*righterror+
 80031ae:	4620      	mov	r0, r4
 80031b0:	4629      	mov	r1, r5
 80031b2:	f7fd f83f 	bl	8000234 <__adddf3>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	f7fd fc89 	bl	8000ad4 <__aeabi_d2iz>
 80031c2:	4603      	mov	r3, r0
 80031c4:	613b      	str	r3, [r7, #16]
	righterror_before = righterror_last;	  	    // 保存上上次误差
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <rightspeedPID+0xd0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a0c      	ldr	r2, [pc, #48]	; (80031fc <rightspeedPID+0xd4>)
 80031cc:	6013      	str	r3, [r2, #0]
	righterror_last = righterror;	              // 保存上次偏差
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <rightspeedPID+0xd0>)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	6013      	str	r3, [r2, #0]
	return pwm_pid;
 80031d4:	693b      	ldr	r3, [r7, #16]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bdb0      	pop	{r4, r5, r7, pc}
 80031de:	bf00      	nop
 80031e0:	cccccccd 	.word	0xcccccccd
 80031e4:	3feccccc 	.word	0x3feccccc
 80031e8:	33333333 	.word	0x33333333
 80031ec:	3fd33333 	.word	0x3fd33333
 80031f0:	9999999a 	.word	0x9999999a
 80031f4:	3fb99999 	.word	0x3fb99999
 80031f8:	20000050 	.word	0x20000050
 80031fc:	20000054 	.word	0x20000054

08003200 <Openmv_Receive_Data>:
 */
#include "openmv.h"
#include "servo.h"
static uint8_t  Cx=0,Cy=0,Cw=0,Ch=0;
void Openmv_Receive_Data(int16_t Com_Data)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	80fb      	strh	r3, [r7, #6]
	/*数据接收数组*/
	static uint16_t RxBuffer1[10]={0};
	/*数据传输状态位*/
	static uint8_t RxState = 0;
	/*对数据进行校准，判断是否为有效数据*/
    if(RxState==0&&Com_Data==0x2C){  //0x2c帧头
 800320a:	4b57      	ldr	r3, [pc, #348]	; (8003368 <Openmv_Receive_Data+0x168>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d112      	bne.n	8003238 <Openmv_Receive_Data+0x38>
 8003212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003216:	2b2c      	cmp	r3, #44	; 0x2c
 8003218:	d10e      	bne.n	8003238 <Openmv_Receive_Data+0x38>
		RxState=1;
 800321a:	4b53      	ldr	r3, [pc, #332]	; (8003368 <Openmv_Receive_Data+0x168>)
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
		RxBuffer1[RxCounter1++]=Com_Data;
 8003220:	4b52      	ldr	r3, [pc, #328]	; (800336c <Openmv_Receive_Data+0x16c>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	b2d1      	uxtb	r1, r2
 8003228:	4a50      	ldr	r2, [pc, #320]	; (800336c <Openmv_Receive_Data+0x16c>)
 800322a:	7011      	strb	r1, [r2, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	88f9      	ldrh	r1, [r7, #6]
 8003230:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <Openmv_Receive_Data+0x170>)
 8003232:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003236:	e092      	b.n	800335e <Openmv_Receive_Data+0x15e>
	}
	else if(RxState==1&&Com_Data==0x12){  //0x12帧头
 8003238:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <Openmv_Receive_Data+0x168>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d112      	bne.n	8003266 <Openmv_Receive_Data+0x66>
 8003240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003244:	2b12      	cmp	r3, #18
 8003246:	d10e      	bne.n	8003266 <Openmv_Receive_Data+0x66>
		RxState=2;
 8003248:	4b47      	ldr	r3, [pc, #284]	; (8003368 <Openmv_Receive_Data+0x168>)
 800324a:	2202      	movs	r2, #2
 800324c:	701a      	strb	r2, [r3, #0]
		RxBuffer1[RxCounter1++]=Com_Data;
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <Openmv_Receive_Data+0x16c>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	b2d1      	uxtb	r1, r2
 8003256:	4a45      	ldr	r2, [pc, #276]	; (800336c <Openmv_Receive_Data+0x16c>)
 8003258:	7011      	strb	r1, [r2, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	88f9      	ldrh	r1, [r7, #6]
 800325e:	4b44      	ldr	r3, [pc, #272]	; (8003370 <Openmv_Receive_Data+0x170>)
 8003260:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003264:	e07b      	b.n	800335e <Openmv_Receive_Data+0x15e>
	}
	else if(RxState==2){
 8003266:	4b40      	ldr	r3, [pc, #256]	; (8003368 <Openmv_Receive_Data+0x168>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d13a      	bne.n	80032e4 <Openmv_Receive_Data+0xe4>
		RxBuffer1[RxCounter1++]=Com_Data;
 800326e:	4b3f      	ldr	r3, [pc, #252]	; (800336c <Openmv_Receive_Data+0x16c>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	b2d1      	uxtb	r1, r2
 8003276:	4a3d      	ldr	r2, [pc, #244]	; (800336c <Openmv_Receive_Data+0x16c>)
 8003278:	7011      	strb	r1, [r2, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	88f9      	ldrh	r1, [r7, #6]
 800327e:	4b3c      	ldr	r3, [pc, #240]	; (8003370 <Openmv_Receive_Data+0x170>)
 8003280:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if(RxCounter1>=10||Com_Data == 0x5B){       //RxBuffer1接受满了,接收数据结束
 8003284:	4b39      	ldr	r3, [pc, #228]	; (800336c <Openmv_Receive_Data+0x16c>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b09      	cmp	r3, #9
 800328a:	d803      	bhi.n	8003294 <Openmv_Receive_Data+0x94>
 800328c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003290:	2b5b      	cmp	r3, #91	; 0x5b
 8003292:	d164      	bne.n	800335e <Openmv_Receive_Data+0x15e>
			RxState=3;
 8003294:	4b34      	ldr	r3, [pc, #208]	; (8003368 <Openmv_Receive_Data+0x168>)
 8003296:	2203      	movs	r2, #3
 8003298:	701a      	strb	r2, [r3, #0]
			Cx=RxBuffer1[RxCounter1-5];
 800329a:	4b34      	ldr	r3, [pc, #208]	; (800336c <Openmv_Receive_Data+0x16c>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	3b05      	subs	r3, #5
 80032a0:	4a33      	ldr	r2, [pc, #204]	; (8003370 <Openmv_Receive_Data+0x170>)
 80032a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	4b32      	ldr	r3, [pc, #200]	; (8003374 <Openmv_Receive_Data+0x174>)
 80032aa:	701a      	strb	r2, [r3, #0]
			Cy=RxBuffer1[RxCounter1-4];
 80032ac:	4b2f      	ldr	r3, [pc, #188]	; (800336c <Openmv_Receive_Data+0x16c>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	3b04      	subs	r3, #4
 80032b2:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <Openmv_Receive_Data+0x170>)
 80032b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <Openmv_Receive_Data+0x178>)
 80032bc:	701a      	strb	r2, [r3, #0]
			Cw=RxBuffer1[RxCounter1-3];
 80032be:	4b2b      	ldr	r3, [pc, #172]	; (800336c <Openmv_Receive_Data+0x16c>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	3b03      	subs	r3, #3
 80032c4:	4a2a      	ldr	r2, [pc, #168]	; (8003370 <Openmv_Receive_Data+0x170>)
 80032c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b2b      	ldr	r3, [pc, #172]	; (800337c <Openmv_Receive_Data+0x17c>)
 80032ce:	701a      	strb	r2, [r3, #0]
			Ch=RxBuffer1[RxCounter1-2];
 80032d0:	4b26      	ldr	r3, [pc, #152]	; (800336c <Openmv_Receive_Data+0x16c>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	3b02      	subs	r3, #2
 80032d6:	4a26      	ldr	r2, [pc, #152]	; (8003370 <Openmv_Receive_Data+0x170>)
 80032d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4b28      	ldr	r3, [pc, #160]	; (8003380 <Openmv_Receive_Data+0x180>)
 80032e0:	701a      	strb	r2, [r3, #0]
		RxState = 0;
		RxCounter1=0;
		for(i=0;i<10;i++)
		{RxBuffer1[i]=0x00;}     //将存放数据数组清零
	}
}
 80032e2:	e03c      	b.n	800335e <Openmv_Receive_Data+0x15e>
	else if(RxState==3){//检测是否接受到结束标志
 80032e4:	4b20      	ldr	r3, [pc, #128]	; (8003368 <Openmv_Receive_Data+0x168>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d123      	bne.n	8003334 <Openmv_Receive_Data+0x134>
		if(RxBuffer1[RxCounter1-1] == 0x5B){
 80032ec:	4b1f      	ldr	r3, [pc, #124]	; (800336c <Openmv_Receive_Data+0x16c>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <Openmv_Receive_Data+0x170>)
 80032f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032f8:	2b5b      	cmp	r3, #91	; 0x5b
 80032fa:	d106      	bne.n	800330a <Openmv_Receive_Data+0x10a>
			RxCounter1 = 0;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	; (800336c <Openmv_Receive_Data+0x16c>)
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
			RxState = 0;
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <Openmv_Receive_Data+0x168>)
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
}
 8003308:	e029      	b.n	800335e <Openmv_Receive_Data+0x15e>
			RxState = 0;
 800330a:	4b17      	ldr	r3, [pc, #92]	; (8003368 <Openmv_Receive_Data+0x168>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
			RxCounter1=0;
 8003310:	4b16      	ldr	r3, [pc, #88]	; (800336c <Openmv_Receive_Data+0x16c>)
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
			for(i=0;i<10;i++)
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	e007      	b.n	800332c <Openmv_Receive_Data+0x12c>
			{RxBuffer1[i]=0x00;}      //将存放数据数组清零
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	4a14      	ldr	r2, [pc, #80]	; (8003370 <Openmv_Receive_Data+0x170>)
 8003320:	2100      	movs	r1, #0
 8003322:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i=0;i<10;i++)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	3301      	adds	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b09      	cmp	r3, #9
 8003330:	d9f4      	bls.n	800331c <Openmv_Receive_Data+0x11c>
}
 8003332:	e014      	b.n	800335e <Openmv_Receive_Data+0x15e>
		RxState = 0;
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <Openmv_Receive_Data+0x168>)
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
		RxCounter1=0;
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <Openmv_Receive_Data+0x16c>)
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
		for(i=0;i<10;i++)
 8003340:	2300      	movs	r3, #0
 8003342:	73fb      	strb	r3, [r7, #15]
 8003344:	e007      	b.n	8003356 <Openmv_Receive_Data+0x156>
		{RxBuffer1[i]=0x00;}     //将存放数据数组清零
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	4a09      	ldr	r2, [pc, #36]	; (8003370 <Openmv_Receive_Data+0x170>)
 800334a:	2100      	movs	r1, #0
 800334c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0;i<10;i++)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	3301      	adds	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	2b09      	cmp	r3, #9
 800335a:	d9f4      	bls.n	8003346 <Openmv_Receive_Data+0x146>
}
 800335c:	e7ff      	b.n	800335e <Openmv_Receive_Data+0x15e>
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr
 8003368:	2000005c 	.word	0x2000005c
 800336c:	2000005d 	.word	0x2000005d
 8003370:	20000060 	.word	0x20000060
 8003374:	20000058 	.word	0x20000058
 8003378:	20000059 	.word	0x20000059
 800337c:	2000005a 	.word	0x2000005a
 8003380:	2000005b 	.word	0x2000005b

08003384 <extract_MVRX1>:
void extract_MVRX1()
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
	if(mode==3){
 8003388:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <extract_MVRX1+0x78>)
 800338a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800338e:	2b03      	cmp	r3, #3
 8003390:	d132      	bne.n	80033f8 <extract_MVRX1+0x74>
		if(Cx==3){
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <extract_MVRX1+0x7c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d12e      	bne.n	80033f8 <extract_MVRX1+0x74>
			if(Cy==0)
 800339a:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <extract_MVRX1+0x80>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d113      	bne.n	80033ca <extract_MVRX1+0x46>
			{deviation=Cw+Ch/10;}
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <extract_MVRX1+0x84>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	4619      	mov	r1, r3
 80033a8:	4b18      	ldr	r3, [pc, #96]	; (800340c <extract_MVRX1+0x88>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	4a18      	ldr	r2, [pc, #96]	; (8003410 <extract_MVRX1+0x8c>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	08db      	lsrs	r3, r3, #3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	440b      	add	r3, r1
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd f887 	bl	80004cc <__aeabi_i2d>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4914      	ldr	r1, [pc, #80]	; (8003414 <extract_MVRX1+0x90>)
 80033c4:	e9c1 2300 	strd	r2, r3, [r1]
			else if(Cy==1)
			{deviation=-Cw-Ch/10;}
		}
	}
}
 80033c8:	e016      	b.n	80033f8 <extract_MVRX1+0x74>
			else if(Cy==1)
 80033ca:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <extract_MVRX1+0x80>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d112      	bne.n	80033f8 <extract_MVRX1+0x74>
			{deviation=-Cw-Ch/10;}
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <extract_MVRX1+0x84>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	425b      	negs	r3, r3
 80033d8:	4a0c      	ldr	r2, [pc, #48]	; (800340c <extract_MVRX1+0x88>)
 80033da:	7812      	ldrb	r2, [r2, #0]
 80033dc:	490c      	ldr	r1, [pc, #48]	; (8003410 <extract_MVRX1+0x8c>)
 80033de:	fba1 1202 	umull	r1, r2, r1, r2
 80033e2:	08d2      	lsrs	r2, r2, #3
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f86f 	bl	80004cc <__aeabi_i2d>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4908      	ldr	r1, [pc, #32]	; (8003414 <extract_MVRX1+0x90>)
 80033f4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80033f8:	bf00      	nop
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200000c4 	.word	0x200000c4
 8003400:	20000058 	.word	0x20000058
 8003404:	20000059 	.word	0x20000059
 8003408:	2000005a 	.word	0x2000005a
 800340c:	2000005b 	.word	0x2000005b
 8003410:	cccccccd 	.word	0xcccccccd
 8003414:	20000180 	.word	0x20000180

08003418 <extract_MVRX2>:
void extract_MVRX2()
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
	if(Cx==2&&Ch==0)
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <extract_MVRX2+0x54>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d120      	bne.n	8003466 <extract_MVRX2+0x4e>
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <extract_MVRX2+0x58>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d11c      	bne.n	8003466 <extract_MVRX2+0x4e>
	{
		MODE=Cy;
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <extract_MVRX2+0x5c>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b21a      	sxth	r2, r3
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <extract_MVRX2+0x60>)
 8003434:	801a      	strh	r2, [r3, #0]
		mode=Cw;
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <extract_MVRX2+0x64>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	b21a      	sxth	r2, r3
 800343c:	4b10      	ldr	r3, [pc, #64]	; (8003480 <extract_MVRX2+0x68>)
 800343e:	801a      	strh	r2, [r3, #0]
		if(mode==5){
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <extract_MVRX2+0x68>)
 8003442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003446:	2b05      	cmp	r3, #5
 8003448:	d106      	bne.n	8003458 <extract_MVRX2+0x40>
			setspeed(0,0);
 800344a:	2100      	movs	r1, #0
 800344c:	2000      	movs	r0, #0
 800344e:	f7fd ffed 	bl	800142c <setspeed>
			is_stopping=1;
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <extract_MVRX2+0x6c>)
 8003454:	2201      	movs	r2, #1
 8003456:	801a      	strh	r2, [r3, #0]
		}
		if(mode==4){servo3_init();}
 8003458:	4b09      	ldr	r3, [pc, #36]	; (8003480 <extract_MVRX2+0x68>)
 800345a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800345e:	2b04      	cmp	r3, #4
 8003460:	d101      	bne.n	8003466 <extract_MVRX2+0x4e>
 8003462:	f000 f8df 	bl	8003624 <servo3_init>
	}
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000058 	.word	0x20000058
 8003470:	2000005b 	.word	0x2000005b
 8003474:	20000059 	.word	0x20000059
 8003478:	20000084 	.word	0x20000084
 800347c:	2000005a 	.word	0x2000005a
 8003480:	200000c4 	.word	0x200000c4
 8003484:	200000e8 	.word	0x200000e8

08003488 <extract_MVRX3>:
void extract_MVRX3()
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
	if((mode==2)||(mode==5)){
 800348c:	4b23      	ldr	r3, [pc, #140]	; (800351c <extract_MVRX3+0x94>)
 800348e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d004      	beq.n	80034a0 <extract_MVRX3+0x18>
 8003496:	4b21      	ldr	r3, [pc, #132]	; (800351c <extract_MVRX3+0x94>)
 8003498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800349c:	2b05      	cmp	r3, #5
 800349e:	d13b      	bne.n	8003518 <extract_MVRX3+0x90>
		if(Cx==0){deviation_f=Cy+Cw/10;}
 80034a0:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <extract_MVRX3+0x98>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d113      	bne.n	80034d0 <extract_MVRX3+0x48>
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <extract_MVRX3+0x9c>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	4619      	mov	r1, r3
 80034ae:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <extract_MVRX3+0xa0>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	4a1e      	ldr	r2, [pc, #120]	; (800352c <extract_MVRX3+0xa4>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	08db      	lsrs	r3, r3, #3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	440b      	add	r3, r1
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd f804 	bl	80004cc <__aeabi_i2d>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4919      	ldr	r1, [pc, #100]	; (8003530 <extract_MVRX3+0xa8>)
 80034ca:	e9c1 2300 	strd	r2, r3, [r1]
 80034ce:	e016      	b.n	80034fe <extract_MVRX3+0x76>
		else if(Cx==1){deviation_f=-Cy-Cw/10;}
 80034d0:	4b13      	ldr	r3, [pc, #76]	; (8003520 <extract_MVRX3+0x98>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d112      	bne.n	80034fe <extract_MVRX3+0x76>
 80034d8:	4b12      	ldr	r3, [pc, #72]	; (8003524 <extract_MVRX3+0x9c>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	425b      	negs	r3, r3
 80034de:	4a12      	ldr	r2, [pc, #72]	; (8003528 <extract_MVRX3+0xa0>)
 80034e0:	7812      	ldrb	r2, [r2, #0]
 80034e2:	4912      	ldr	r1, [pc, #72]	; (800352c <extract_MVRX3+0xa4>)
 80034e4:	fba1 1202 	umull	r1, r2, r1, r2
 80034e8:	08d2      	lsrs	r2, r2, #3
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fc ffec 	bl	80004cc <__aeabi_i2d>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	490d      	ldr	r1, [pc, #52]	; (8003530 <extract_MVRX3+0xa8>)
 80034fa:	e9c1 2300 	strd	r2, r3, [r1]
		if(Cx==0||Cx==1){deviation_s=Ch;}
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <extract_MVRX3+0x98>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <extract_MVRX3+0x86>
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <extract_MVRX3+0x98>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d104      	bne.n	8003518 <extract_MVRX3+0x90>
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <extract_MVRX3+0xac>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <extract_MVRX3+0xb0>)
 8003516:	601a      	str	r2, [r3, #0]
	}
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}
 800351c:	200000c4 	.word	0x200000c4
 8003520:	20000058 	.word	0x20000058
 8003524:	20000059 	.word	0x20000059
 8003528:	2000005a 	.word	0x2000005a
 800352c:	cccccccd 	.word	0xcccccccd
 8003530:	20000178 	.word	0x20000178
 8003534:	2000005b 	.word	0x2000005b
 8003538:	20000188 	.word	0x20000188

0800353c <servo1_init>:
 */

#include "servo.h"

void servo1_init()
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8003542:	2100      	movs	r1, #0
 8003544:	4807      	ldr	r0, [pc, #28]	; (8003564 <servo1_init+0x28>)
 8003546:	f002 faaf 	bl	8005aa8 <HAL_TIM_PWM_Start>
	servo servo1={20,0};
 800354a:	2314      	movs	r3, #20
 800354c:	80bb      	strh	r3, [r7, #4]
 800354e:	2300      	movs	r3, #0
 8003550:	80fb      	strh	r3, [r7, #6]
	servo1_turn(servo1.angle);
 8003552:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f806 	bl	8003568 <servo1_turn>
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	200002ac 	.word	0x200002ac

08003568 <servo1_turn>:
void servo1_turn(short angle)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	80fb      	strh	r3, [r7, #6]
	short degree = 50+10*angle/9;
 8003572:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <servo1_turn+0x40>)
 8003580:	fb82 1203 	smull	r1, r2, r2, r3
 8003584:	1052      	asrs	r2, r2, #1
 8003586:	17db      	asrs	r3, r3, #31
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	b29b      	uxth	r3, r3
 800358c:	3332      	adds	r3, #50	; 0x32
 800358e:	b29b      	uxth	r3, r3
 8003590:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,degree);
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <servo1_turn+0x44>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800359a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	38e38e39 	.word	0x38e38e39
 80035ac:	200002ac 	.word	0x200002ac

080035b0 <servo2_init>:
void servo2_init()
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80035b6:	2104      	movs	r1, #4
 80035b8:	4807      	ldr	r0, [pc, #28]	; (80035d8 <servo2_init+0x28>)
 80035ba:	f002 fa75 	bl	8005aa8 <HAL_TIM_PWM_Start>
	servo servo2={80,0};
 80035be:	2350      	movs	r3, #80	; 0x50
 80035c0:	80bb      	strh	r3, [r7, #4]
 80035c2:	2300      	movs	r3, #0
 80035c4:	80fb      	strh	r3, [r7, #6]
	servo2_turn(servo2.angle);
 80035c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f806 	bl	80035dc <servo2_turn>
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200002ac 	.word	0x200002ac

080035dc <servo2_turn>:
void servo2_turn(short angle)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	80fb      	strh	r3, [r7, #6]
	short degree = 50+10*angle/9;
 80035e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4a0a      	ldr	r2, [pc, #40]	; (800361c <servo2_turn+0x40>)
 80035f4:	fb82 1203 	smull	r1, r2, r2, r3
 80035f8:	1052      	asrs	r2, r2, #1
 80035fa:	17db      	asrs	r3, r3, #31
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3332      	adds	r3, #50	; 0x32
 8003602:	b29b      	uxth	r3, r3
 8003604:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,degree);
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <servo2_turn+0x44>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800360e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	38e38e39 	.word	0x38e38e39
 8003620:	200002ac 	.word	0x200002ac

08003624 <servo3_init>:
void servo3_init()
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800362a:	2108      	movs	r1, #8
 800362c:	480c      	ldr	r0, [pc, #48]	; (8003660 <servo3_init+0x3c>)
 800362e:	f002 fa3b 	bl	8005aa8 <HAL_TIM_PWM_Start>
	servo_angle=0;
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <servo3_init+0x40>)
 8003634:	2200      	movs	r2, #0
 8003636:	801a      	strh	r2, [r3, #0]
	servo_dir=0;
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <servo3_init+0x44>)
 800363a:	2200      	movs	r2, #0
 800363c:	801a      	strh	r2, [r3, #0]
	short degree = 50+servo_angle;
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <servo3_init+0x40>)
 8003640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003644:	b29b      	uxth	r3, r3
 8003646:	3332      	adds	r3, #50	; 0x32
 8003648:	b29b      	uxth	r3, r3
 800364a:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,degree);
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <servo3_init+0x3c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003654:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200002ac 	.word	0x200002ac
 8003664:	200000be 	.word	0x200000be
 8003668:	200000bc 	.word	0x200000bc

0800366c <servo3_scan>:

void servo3_scan()
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
	if (servo_dir==0){servo_angle+=30;}
 8003672:	4b23      	ldr	r3, [pc, #140]	; (8003700 <servo3_scan+0x94>)
 8003674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <servo3_scan+0x24>
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <servo3_scan+0x98>)
 800367e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003682:	b29b      	uxth	r3, r3
 8003684:	331e      	adds	r3, #30
 8003686:	b29b      	uxth	r3, r3
 8003688:	b21a      	sxth	r2, r3
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <servo3_scan+0x98>)
 800368c:	801a      	strh	r2, [r3, #0]
 800368e:	e00d      	b.n	80036ac <servo3_scan+0x40>
	else if(servo_dir==1){servo_angle-=30;}
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <servo3_scan+0x94>)
 8003692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d108      	bne.n	80036ac <servo3_scan+0x40>
 800369a:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <servo3_scan+0x98>)
 800369c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b1e      	subs	r3, #30
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	b21a      	sxth	r2, r3
 80036a8:	4b16      	ldr	r3, [pc, #88]	; (8003704 <servo3_scan+0x98>)
 80036aa:	801a      	strh	r2, [r3, #0]
	if(servo_angle==180){servo_dir=1;}
 80036ac:	4b15      	ldr	r3, [pc, #84]	; (8003704 <servo3_scan+0x98>)
 80036ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b2:	2bb4      	cmp	r3, #180	; 0xb4
 80036b4:	d102      	bne.n	80036bc <servo3_scan+0x50>
 80036b6:	4b12      	ldr	r3, [pc, #72]	; (8003700 <servo3_scan+0x94>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	801a      	strh	r2, [r3, #0]
	if(servo_angle==0){servo_dir=0;}
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <servo3_scan+0x98>)
 80036be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d102      	bne.n	80036cc <servo3_scan+0x60>
 80036c6:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <servo3_scan+0x94>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	801a      	strh	r2, [r3, #0]
	short degree = 40+7*servo_angle/6;
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <servo3_scan+0x98>)
 80036ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036d2:	461a      	mov	r2, r3
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	4a0b      	ldr	r2, [pc, #44]	; (8003708 <servo3_scan+0x9c>)
 80036dc:	fb82 1203 	smull	r1, r2, r2, r3
 80036e0:	17db      	asrs	r3, r3, #31
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3328      	adds	r3, #40	; 0x28
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,degree);
 80036ec:	4b07      	ldr	r3, [pc, #28]	; (800370c <servo3_scan+0xa0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	200000bc 	.word	0x200000bc
 8003704:	200000be 	.word	0x200000be
 8003708:	2aaaaaab 	.word	0x2aaaaaab
 800370c:	200002ac 	.word	0x200002ac

08003710 <servo4_init>:
void servo4_init()
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8003716:	210c      	movs	r1, #12
 8003718:	4807      	ldr	r0, [pc, #28]	; (8003738 <servo4_init+0x28>)
 800371a:	f002 f9c5 	bl	8005aa8 <HAL_TIM_PWM_Start>
	servo servo4={60,0};
 800371e:	233c      	movs	r3, #60	; 0x3c
 8003720:	80bb      	strh	r3, [r7, #4]
 8003722:	2300      	movs	r3, #0
 8003724:	80fb      	strh	r3, [r7, #6]
	servo4_turn(servo4.angle);
 8003726:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f806 	bl	800373c <servo4_turn>
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200002ac 	.word	0x200002ac

0800373c <servo4_turn>:
void servo4_turn(short angle)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	80fb      	strh	r3, [r7, #6]
	short degree = 50+10*angle/9;
 8003746:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <servo4_turn+0x40>)
 8003754:	fb82 1203 	smull	r1, r2, r2, r3
 8003758:	1052      	asrs	r2, r2, #1
 800375a:	17db      	asrs	r3, r3, #31
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	b29b      	uxth	r3, r3
 8003760:	3332      	adds	r3, #50	; 0x32
 8003762:	b29b      	uxth	r3, r3
 8003764:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,degree);
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <servo4_turn+0x44>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800376e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	38e38e39 	.word	0x38e38e39
 8003780:	200002ac 	.word	0x200002ac

08003784 <servo1_down>:
void servo1_down()
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
	for(int i=0;i<34;i++){
 800378a:	2300      	movs	r3, #0
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	e029      	b.n	80037e4 <servo1_down+0x60>
		if(is_down==0){servo1_turn(20+3*i);}
 8003790:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <servo1_down+0x70>)
 8003792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10c      	bne.n	80037b4 <servo1_down+0x30>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	b29b      	uxth	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	0052      	lsls	r2, r2, #1
 80037a2:	4413      	add	r3, r2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3314      	adds	r3, #20
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	b21b      	sxth	r3, r3
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fedb 	bl	8003568 <servo1_turn>
 80037b2:	e010      	b.n	80037d6 <servo1_down+0x52>
		else if(is_down==1){servo1_turn(122-3*i);}
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <servo1_down+0x70>)
 80037b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d10b      	bne.n	80037d6 <servo1_down+0x52>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	337a      	adds	r3, #122	; 0x7a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	b21b      	sxth	r3, r3
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fec9 	bl	8003568 <servo1_turn>
		total_delay(500);
 80037d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037da:	f000 fdfd 	bl	80043d8 <total_delay>
	for(int i=0;i<34;i++){
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3301      	adds	r3, #1
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b21      	cmp	r3, #33	; 0x21
 80037e8:	ddd2      	ble.n	8003790 <servo1_down+0xc>
	}
}
 80037ea:	bf00      	nop
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200000a8 	.word	0x200000a8

080037f8 <servo2_shut>:
void servo2_shut()
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
	for(int i=0;i<21;i++){
 80037fe:	2300      	movs	r3, #0
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	e029      	b.n	8003858 <servo2_shut+0x60>
		if(is_shut==0){servo2_turn(80-3*i);}
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <servo2_shut+0x70>)
 8003806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10c      	bne.n	8003828 <servo2_shut+0x30>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	b29b      	uxth	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	b29b      	uxth	r3, r3
 800381a:	3350      	adds	r3, #80	; 0x50
 800381c:	b29b      	uxth	r3, r3
 800381e:	b21b      	sxth	r3, r3
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fedb 	bl	80035dc <servo2_turn>
 8003826:	e010      	b.n	800384a <servo2_shut+0x52>
		else if(is_shut==1){servo2_turn(17+3*i);}
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <servo2_shut+0x70>)
 800382a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d10b      	bne.n	800384a <servo2_shut+0x52>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	b29b      	uxth	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	0052      	lsls	r2, r2, #1
 800383a:	4413      	add	r3, r2
 800383c:	b29b      	uxth	r3, r3
 800383e:	3311      	adds	r3, #17
 8003840:	b29b      	uxth	r3, r3
 8003842:	b21b      	sxth	r3, r3
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff fec9 	bl	80035dc <servo2_turn>
		total_delay(500);
 800384a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800384e:	f000 fdc3 	bl	80043d8 <total_delay>
	for(int i=0;i<21;i++){
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3301      	adds	r3, #1
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b14      	cmp	r3, #20
 800385c:	ddd2      	ble.n	8003804 <servo2_shut+0xc>
	}
}
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000126 	.word	0x20000126

0800386c <sonic_delay>:
 *
 *  Created on: Jul 9, 2022
 *      Author: 86152
 */
void sonic_delay(uint16_t time)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <sonic_delay+0x2c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2200      	movs	r2, #0
 800387c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim4)<time);
 800387e:	bf00      	nop
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <sonic_delay+0x2c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	429a      	cmp	r2, r3
 800388a:	d3f9      	bcc.n	8003880 <sonic_delay+0x14>
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	200001d4 	.word	0x200001d4

0800389c <get_distance1>:
int get_distance1()
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
	//int tempt=0;
	//for(int i=0;i<2;i++){
	   HAL_GPIO_WritePin(TRIG1_GPIO_Port,TRIG1_Pin,GPIO_PIN_RESET);
 80038a0:	2200      	movs	r2, #0
 80038a2:	2120      	movs	r1, #32
 80038a4:	4810      	ldr	r0, [pc, #64]	; (80038e8 <get_distance1+0x4c>)
 80038a6:	f001 fb75 	bl	8004f94 <HAL_GPIO_WritePin>
	   sonic_delay(2);
 80038aa:	2002      	movs	r0, #2
 80038ac:	f7ff ffde 	bl	800386c <sonic_delay>
	   HAL_GPIO_WritePin(TRIG1_GPIO_Port,TRIG1_Pin,GPIO_PIN_SET);
 80038b0:	2201      	movs	r2, #1
 80038b2:	2120      	movs	r1, #32
 80038b4:	480c      	ldr	r0, [pc, #48]	; (80038e8 <get_distance1+0x4c>)
 80038b6:	f001 fb6d 	bl	8004f94 <HAL_GPIO_WritePin>
	   sonic_delay(12);
 80038ba:	200c      	movs	r0, #12
 80038bc:	f7ff ffd6 	bl	800386c <sonic_delay>
	   HAL_GPIO_WritePin(TRIG1_GPIO_Port,TRIG1_Pin,GPIO_PIN_RESET);
 80038c0:	2200      	movs	r2, #0
 80038c2:	2120      	movs	r1, #32
 80038c4:	4808      	ldr	r0, [pc, #32]	; (80038e8 <get_distance1+0x4c>)
 80038c6:	f001 fb65 	bl	8004f94 <HAL_GPIO_WritePin>
	   __HAL_TIM_ENABLE_IT(&htim4,TIM_IT_CC1);
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <get_distance1+0x50>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <get_distance1+0x50>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0202 	orr.w	r2, r2, #2
 80038d8:	60da      	str	r2, [r3, #12]
	   total_delay(125);
 80038da:	207d      	movs	r0, #125	; 0x7d
 80038dc:	f000 fd7c 	bl	80043d8 <total_delay>
    //tempt+=distance1;
    //}
    //return tempt/2;
    return distance1;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <get_distance1+0x54>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40011800 	.word	0x40011800
 80038ec:	200001d4 	.word	0x200001d4
 80038f0:	200000cc 	.word	0x200000cc

080038f4 <get_distance2>:
int get_distance2()
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
   //int tempt=0;
   //for(int i=0;i<2;i++){
      HAL_GPIO_WritePin(TRIG2_GPIO_Port,TRIG2_Pin,GPIO_PIN_RESET);
 80038f8:	2200      	movs	r2, #0
 80038fa:	2140      	movs	r1, #64	; 0x40
 80038fc:	4810      	ldr	r0, [pc, #64]	; (8003940 <get_distance2+0x4c>)
 80038fe:	f001 fb49 	bl	8004f94 <HAL_GPIO_WritePin>
      sonic_delay(2);
 8003902:	2002      	movs	r0, #2
 8003904:	f7ff ffb2 	bl	800386c <sonic_delay>
      HAL_GPIO_WritePin(TRIG2_GPIO_Port,TRIG2_Pin,GPIO_PIN_SET);
 8003908:	2201      	movs	r2, #1
 800390a:	2140      	movs	r1, #64	; 0x40
 800390c:	480c      	ldr	r0, [pc, #48]	; (8003940 <get_distance2+0x4c>)
 800390e:	f001 fb41 	bl	8004f94 <HAL_GPIO_WritePin>
      sonic_delay(12);
 8003912:	200c      	movs	r0, #12
 8003914:	f7ff ffaa 	bl	800386c <sonic_delay>
      HAL_GPIO_WritePin(TRIG2_GPIO_Port,TRIG2_Pin,GPIO_PIN_RESET);
 8003918:	2200      	movs	r2, #0
 800391a:	2140      	movs	r1, #64	; 0x40
 800391c:	4808      	ldr	r0, [pc, #32]	; (8003940 <get_distance2+0x4c>)
 800391e:	f001 fb39 	bl	8004f94 <HAL_GPIO_WritePin>
      __HAL_TIM_ENABLE_IT(&htim4,TIM_IT_CC2);
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <get_distance2+0x50>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <get_distance2+0x50>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0204 	orr.w	r2, r2, #4
 8003930:	60da      	str	r2, [r3, #12]
      total_delay(125);
 8003932:	207d      	movs	r0, #125	; 0x7d
 8003934:	f000 fd50 	bl	80043d8 <total_delay>
      //tempt+=distance2;
   //}
   //return tempt/2;
      return distance2;
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <get_distance2+0x54>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40011800 	.word	0x40011800
 8003944:	200001d4 	.word	0x200001d4
 8003948:	200000e4 	.word	0x200000e4

0800394c <get_distance3>:
int get_distance3()
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
   //int tempt=0;
   //for(int i=0;i<2;i++){
      HAL_GPIO_WritePin(TRIG3_GPIO_Port,TRIG3_Pin,GPIO_PIN_RESET);
 8003950:	2200      	movs	r2, #0
 8003952:	2110      	movs	r1, #16
 8003954:	4810      	ldr	r0, [pc, #64]	; (8003998 <get_distance3+0x4c>)
 8003956:	f001 fb1d 	bl	8004f94 <HAL_GPIO_WritePin>
      sonic_delay(2);
 800395a:	2002      	movs	r0, #2
 800395c:	f7ff ff86 	bl	800386c <sonic_delay>
      HAL_GPIO_WritePin(TRIG3_GPIO_Port,TRIG3_Pin,GPIO_PIN_SET);
 8003960:	2201      	movs	r2, #1
 8003962:	2110      	movs	r1, #16
 8003964:	480c      	ldr	r0, [pc, #48]	; (8003998 <get_distance3+0x4c>)
 8003966:	f001 fb15 	bl	8004f94 <HAL_GPIO_WritePin>
      sonic_delay(12);
 800396a:	200c      	movs	r0, #12
 800396c:	f7ff ff7e 	bl	800386c <sonic_delay>
      HAL_GPIO_WritePin(TRIG3_GPIO_Port,TRIG3_Pin,GPIO_PIN_RESET);
 8003970:	2200      	movs	r2, #0
 8003972:	2110      	movs	r1, #16
 8003974:	4808      	ldr	r0, [pc, #32]	; (8003998 <get_distance3+0x4c>)
 8003976:	f001 fb0d 	bl	8004f94 <HAL_GPIO_WritePin>
      __HAL_TIM_ENABLE_IT(&htim4,TIM_IT_CC3);
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <get_distance3+0x50>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <get_distance3+0x50>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0208 	orr.w	r2, r2, #8
 8003988:	60da      	str	r2, [r3, #12]
      total_delay(125);
 800398a:	207d      	movs	r0, #125	; 0x7d
 800398c:	f000 fd24 	bl	80043d8 <total_delay>
      //tempt+=distance3;
   //}
   //return tempt/2;
      return distance3;
 8003990:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <get_distance3+0x54>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40010800 	.word	0x40010800
 800399c:	200001d4 	.word	0x200001d4
 80039a0:	20000090 	.word	0x20000090

080039a4 <get_distance4>:
int get_distance4()
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
   //int tempt=0;
   //for(int i=0;i<2;i++){
      HAL_GPIO_WritePin(TRIG4_GPIO_Port,TRIG4_Pin,GPIO_PIN_RESET);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2120      	movs	r1, #32
 80039ac:	4810      	ldr	r0, [pc, #64]	; (80039f0 <get_distance4+0x4c>)
 80039ae:	f001 faf1 	bl	8004f94 <HAL_GPIO_WritePin>
      sonic_delay(2);
 80039b2:	2002      	movs	r0, #2
 80039b4:	f7ff ff5a 	bl	800386c <sonic_delay>
      HAL_GPIO_WritePin(TRIG4_GPIO_Port,TRIG4_Pin,GPIO_PIN_SET);
 80039b8:	2201      	movs	r2, #1
 80039ba:	2120      	movs	r1, #32
 80039bc:	480c      	ldr	r0, [pc, #48]	; (80039f0 <get_distance4+0x4c>)
 80039be:	f001 fae9 	bl	8004f94 <HAL_GPIO_WritePin>
      sonic_delay(12);
 80039c2:	200c      	movs	r0, #12
 80039c4:	f7ff ff52 	bl	800386c <sonic_delay>
      HAL_GPIO_WritePin(TRIG4_GPIO_Port,TRIG4_Pin,GPIO_PIN_RESET);
 80039c8:	2200      	movs	r2, #0
 80039ca:	2120      	movs	r1, #32
 80039cc:	4808      	ldr	r0, [pc, #32]	; (80039f0 <get_distance4+0x4c>)
 80039ce:	f001 fae1 	bl	8004f94 <HAL_GPIO_WritePin>
      __HAL_TIM_ENABLE_IT(&htim4,TIM_IT_CC4);
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <get_distance4+0x50>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <get_distance4+0x50>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0210 	orr.w	r2, r2, #16
 80039e0:	60da      	str	r2, [r3, #12]
      total_delay(125);
 80039e2:	207d      	movs	r0, #125	; 0x7d
 80039e4:	f000 fcf8 	bl	80043d8 <total_delay>
      //tempt+=distance4;
   //}
   //return tempt/2;
      return distance4;
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <get_distance4+0x54>)
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40010800 	.word	0x40010800
 80039f4:	200001d4 	.word	0x200001d4
 80039f8:	200000b0 	.word	0x200000b0

080039fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a02:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <HAL_MspInit+0x5c>)
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <HAL_MspInit+0x5c>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6193      	str	r3, [r2, #24]
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_MspInit+0x5c>)
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_MspInit+0x5c>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <HAL_MspInit+0x5c>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	61d3      	str	r3, [r2, #28]
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <HAL_MspInit+0x5c>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a32:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <HAL_MspInit+0x60>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	4a04      	ldr	r2, [pc, #16]	; (8003a5c <HAL_MspInit+0x60>)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40010000 	.word	0x40010000

08003a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a64:	e7fe      	b.n	8003a64 <NMI_Handler+0x4>

08003a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a6a:	e7fe      	b.n	8003a6a <HardFault_Handler+0x4>

08003a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <MemManage_Handler+0x4>

08003a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a76:	e7fe      	b.n	8003a76 <BusFault_Handler+0x4>

08003a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <UsageFault_Handler+0x4>

08003a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr

08003a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aa6:	f000 fe75 	bl	8004794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <TIM4_IRQHandler+0x10>)
 8003ab6:	f002 fb4d 	bl	8006154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200001d4 	.word	0x200001d4

08003ac4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <USART1_IRQHandler+0x10>)
 8003aca:	f003 fced 	bl	80074a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000384 	.word	0x20000384

08003ad8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <USART3_IRQHandler+0x10>)
 8003ade:	f003 fce3 	bl	80074a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000130 	.word	0x20000130

08003aec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <UART4_IRQHandler+0x10>)
 8003af2:	f003 fcd9 	bl	80074a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200003c8 	.word	0x200003c8

08003b00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <TIM7_IRQHandler+0x10>)
 8003b06:	f002 fb25 	bl	8006154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	2000033c 	.word	0x2000033c

08003b14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b092      	sub	sp, #72	; 0x48
 8003b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
 8003b40:	615a      	str	r2, [r3, #20]
 8003b42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b44:	1d3b      	adds	r3, r7, #4
 8003b46:	2220      	movs	r2, #32
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f004 f8f8 	bl	8007d40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b50:	4b45      	ldr	r3, [pc, #276]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003b52:	4a46      	ldr	r2, [pc, #280]	; (8003c6c <MX_TIM1_Init+0x14c>)
 8003b54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8003b56:	4b44      	ldr	r3, [pc, #272]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003b58:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003b5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b5e:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8003b64:	4b40      	ldr	r3, [pc, #256]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003b66:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003b6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b6c:	4b3e      	ldr	r3, [pc, #248]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b72:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b78:	4b3b      	ldr	r3, [pc, #236]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b7e:	483a      	ldr	r0, [pc, #232]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003b80:	f001 ff42 	bl	8005a08 <HAL_TIM_PWM_Init>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003b8a:	f7ff f935 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b92:	2300      	movs	r3, #0
 8003b94:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4832      	ldr	r0, [pc, #200]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003b9e:	f003 fa51 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8003ba8:	f7ff f926 	bl	8002df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bac:	2360      	movs	r3, #96	; 0x60
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4825      	ldr	r0, [pc, #148]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003bd2:	f002 fc5b 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003bdc:	f7ff f90c 	bl	8002df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003be4:	2204      	movs	r2, #4
 8003be6:	4619      	mov	r1, r3
 8003be8:	481f      	ldr	r0, [pc, #124]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003bea:	f002 fc4f 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8003bf4:	f7ff f900 	bl	8002df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4819      	ldr	r0, [pc, #100]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003c02:	f002 fc43 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8003c0c:	f7ff f8f4 	bl	8002df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c14:	220c      	movs	r2, #12
 8003c16:	4619      	mov	r1, r3
 8003c18:	4813      	ldr	r0, [pc, #76]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003c1a:	f002 fc37 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8003c24:	f7ff f8e8 	bl	8002df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c46:	1d3b      	adds	r3, r7, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4807      	ldr	r0, [pc, #28]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003c4c:	f003 fa66 	bl	800711c <HAL_TIMEx_ConfigBreakDeadTime>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8003c56:	f7ff f8cf 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c5a:	4803      	ldr	r0, [pc, #12]	; (8003c68 <MX_TIM1_Init+0x148>)
 8003c5c:	f000 fb52 	bl	8004304 <HAL_TIM_MspPostInit>

}
 8003c60:	bf00      	nop
 8003c62:	3748      	adds	r7, #72	; 0x48
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	200002ac 	.word	0x200002ac
 8003c6c:	40012c00 	.word	0x40012c00

08003c70 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08c      	sub	sp, #48	; 0x30
 8003c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c76:	f107 030c 	add.w	r3, r7, #12
 8003c7a:	2224      	movs	r2, #36	; 0x24
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f004 f85e 	bl	8007d40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <MX_TIM2_Init+0xa4>)
 8003c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003c94:	4b1f      	ldr	r3, [pc, #124]	; (8003d14 <MX_TIM2_Init+0xa4>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <MX_TIM2_Init+0xa4>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003ca0:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <MX_TIM2_Init+0xa4>)
 8003ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <MX_TIM2_Init+0xa4>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cae:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <MX_TIM2_Init+0xa4>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003cd8:	f107 030c 	add.w	r3, r7, #12
 8003cdc:	4619      	mov	r1, r3
 8003cde:	480d      	ldr	r0, [pc, #52]	; (8003d14 <MX_TIM2_Init+0xa4>)
 8003ce0:	f002 f908 	bl	8005ef4 <HAL_TIM_Encoder_Init>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003cea:	f7ff f885 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4806      	ldr	r0, [pc, #24]	; (8003d14 <MX_TIM2_Init+0xa4>)
 8003cfc:	f003 f9a2 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003d06:	f7ff f877 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d0a:	bf00      	nop
 8003d0c:	3730      	adds	r7, #48	; 0x30
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200002f4 	.word	0x200002f4

08003d18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d34:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <MX_TIM3_Init+0x94>)
 8003d36:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <MX_TIM3_Init+0x98>)
 8003d38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8003d3a:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <MX_TIM3_Init+0x94>)
 8003d3c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003d40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d42:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <MX_TIM3_Init+0x94>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003d48:	4b18      	ldr	r3, [pc, #96]	; (8003dac <MX_TIM3_Init+0x94>)
 8003d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d50:	4b16      	ldr	r3, [pc, #88]	; (8003dac <MX_TIM3_Init+0x94>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d56:	4b15      	ldr	r3, [pc, #84]	; (8003dac <MX_TIM3_Init+0x94>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d5c:	4813      	ldr	r0, [pc, #76]	; (8003dac <MX_TIM3_Init+0x94>)
 8003d5e:	f001 fd4b 	bl	80057f8 <HAL_TIM_Base_Init>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003d68:	f7ff f846 	bl	8002df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d72:	f107 0308 	add.w	r3, r7, #8
 8003d76:	4619      	mov	r1, r3
 8003d78:	480c      	ldr	r0, [pc, #48]	; (8003dac <MX_TIM3_Init+0x94>)
 8003d7a:	f002 fc45 	bl	8006608 <HAL_TIM_ConfigClockSource>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003d84:	f7ff f838 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d90:	463b      	mov	r3, r7
 8003d92:	4619      	mov	r1, r3
 8003d94:	4805      	ldr	r0, [pc, #20]	; (8003dac <MX_TIM3_Init+0x94>)
 8003d96:	f003 f955 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003da0:	f7ff f82a 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003da4:	bf00      	nop
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000264 	.word	0x20000264
 8003db0:	40000400 	.word	0x40000400

08003db4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08a      	sub	sp, #40	; 0x28
 8003db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dba:	f107 0318 	add.w	r3, r7, #24
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	609a      	str	r2, [r3, #8]
 8003dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc8:	f107 0310 	add.w	r3, r7, #16
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003dd2:	463b      	mov	r3, r7
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003dde:	4b3c      	ldr	r3, [pc, #240]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003de0:	4a3c      	ldr	r2, [pc, #240]	; (8003ed4 <MX_TIM4_Init+0x120>)
 8003de2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8003de4:	4b3a      	ldr	r3, [pc, #232]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003de6:	2247      	movs	r2, #71	; 0x47
 8003de8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dea:	4b39      	ldr	r3, [pc, #228]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003df0:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003df6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003df8:	4b35      	ldr	r3, [pc, #212]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dfe:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e04:	4832      	ldr	r0, [pc, #200]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003e06:	f001 fcf7 	bl	80057f8 <HAL_TIM_Base_Init>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8003e10:	f7fe fff2 	bl	8002df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e18:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003e1a:	f107 0318 	add.w	r3, r7, #24
 8003e1e:	4619      	mov	r1, r3
 8003e20:	482b      	ldr	r0, [pc, #172]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003e22:	f002 fbf1 	bl	8006608 <HAL_TIM_ConfigClockSource>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003e2c:	f7fe ffe4 	bl	8002df8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003e30:	4827      	ldr	r0, [pc, #156]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003e32:	f001 fef3 	bl	8005c1c <HAL_TIM_IC_Init>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003e3c:	f7fe ffdc 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e40:	2300      	movs	r3, #0
 8003e42:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e48:	f107 0310 	add.w	r3, r7, #16
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4820      	ldr	r0, [pc, #128]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003e50:	f003 f8f8 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8003e5a:	f7fe ffcd 	bl	8002df8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e62:	2301      	movs	r3, #1
 8003e64:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 8;
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003e6e:	463b      	mov	r3, r7
 8003e70:	2200      	movs	r2, #0
 8003e72:	4619      	mov	r1, r3
 8003e74:	4816      	ldr	r0, [pc, #88]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003e76:	f002 fa75 	bl	8006364 <HAL_TIM_IC_ConfigChannel>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8003e80:	f7fe ffba 	bl	8002df8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003e84:	463b      	mov	r3, r7
 8003e86:	2204      	movs	r2, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4811      	ldr	r0, [pc, #68]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003e8c:	f002 fa6a 	bl	8006364 <HAL_TIM_IC_ConfigChannel>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8003e96:	f7fe ffaf 	bl	8002df8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	480b      	ldr	r0, [pc, #44]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003ea2:	f002 fa5f 	bl	8006364 <HAL_TIM_IC_ConfigChannel>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8003eac:	f7fe ffa4 	bl	8002df8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003eb0:	463b      	mov	r3, r7
 8003eb2:	220c      	movs	r2, #12
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4806      	ldr	r0, [pc, #24]	; (8003ed0 <MX_TIM4_Init+0x11c>)
 8003eb8:	f002 fa54 	bl	8006364 <HAL_TIM_IC_ConfigChannel>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8003ec2:	f7fe ff99 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ec6:	bf00      	nop
 8003ec8:	3728      	adds	r7, #40	; 0x28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200001d4 	.word	0x200001d4
 8003ed4:	40000800 	.word	0x40000800

08003ed8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ede:	f107 0320 	add.w	r3, r7, #32
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ee8:	1d3b      	adds	r3, r7, #4
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	609a      	str	r2, [r3, #8]
 8003ef2:	60da      	str	r2, [r3, #12]
 8003ef4:	611a      	str	r2, [r3, #16]
 8003ef6:	615a      	str	r2, [r3, #20]
 8003ef8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003efa:	4b27      	ldr	r3, [pc, #156]	; (8003f98 <MX_TIM5_Init+0xc0>)
 8003efc:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <MX_TIM5_Init+0xc4>)
 8003efe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <MX_TIM5_Init+0xc0>)
 8003f02:	2247      	movs	r2, #71	; 0x47
 8003f04:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f06:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <MX_TIM5_Init+0xc0>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 800-1;
 8003f0c:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <MX_TIM5_Init+0xc0>)
 8003f0e:	f240 321f 	movw	r2, #799	; 0x31f
 8003f12:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f14:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <MX_TIM5_Init+0xc0>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f1a:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <MX_TIM5_Init+0xc0>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003f20:	481d      	ldr	r0, [pc, #116]	; (8003f98 <MX_TIM5_Init+0xc0>)
 8003f22:	f001 fd71 	bl	8005a08 <HAL_TIM_PWM_Init>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8003f2c:	f7fe ff64 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f30:	2300      	movs	r3, #0
 8003f32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003f38:	f107 0320 	add.w	r3, r7, #32
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4816      	ldr	r0, [pc, #88]	; (8003f98 <MX_TIM5_Init+0xc0>)
 8003f40:	f003 f880 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8003f4a:	f7fe ff55 	bl	8002df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f4e:	2360      	movs	r3, #96	; 0x60
 8003f50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	2208      	movs	r2, #8
 8003f62:	4619      	mov	r1, r3
 8003f64:	480c      	ldr	r0, [pc, #48]	; (8003f98 <MX_TIM5_Init+0xc0>)
 8003f66:	f002 fa91 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8003f70:	f7fe ff42 	bl	8002df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003f74:	1d3b      	adds	r3, r7, #4
 8003f76:	220c      	movs	r2, #12
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4807      	ldr	r0, [pc, #28]	; (8003f98 <MX_TIM5_Init+0xc0>)
 8003f7c:	f002 fa86 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8003f86:	f7fe ff37 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003f8a:	4803      	ldr	r0, [pc, #12]	; (8003f98 <MX_TIM5_Init+0xc0>)
 8003f8c:	f000 f9ba 	bl	8004304 <HAL_TIM_MspPostInit>

}
 8003f90:	bf00      	nop
 8003f92:	3728      	adds	r7, #40	; 0x28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	2000021c 	.word	0x2000021c
 8003f9c:	40000c00 	.word	0x40000c00

08003fa0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa6:	463b      	mov	r3, r7
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003fae:	4b15      	ldr	r3, [pc, #84]	; (8004004 <MX_TIM7_Init+0x64>)
 8003fb0:	4a15      	ldr	r2, [pc, #84]	; (8004008 <MX_TIM7_Init+0x68>)
 8003fb2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 720-1;
 8003fb4:	4b13      	ldr	r3, [pc, #76]	; (8004004 <MX_TIM7_Init+0x64>)
 8003fb6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003fba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fbc:	4b11      	ldr	r3, [pc, #68]	; (8004004 <MX_TIM7_Init+0x64>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <MX_TIM7_Init+0x64>)
 8003fc4:	f241 3287 	movw	r2, #4999	; 0x1387
 8003fc8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fca:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <MX_TIM7_Init+0x64>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003fd0:	480c      	ldr	r0, [pc, #48]	; (8004004 <MX_TIM7_Init+0x64>)
 8003fd2:	f001 fc11 	bl	80057f8 <HAL_TIM_Base_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003fdc:	f7fe ff0c 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003fe8:	463b      	mov	r3, r7
 8003fea:	4619      	mov	r1, r3
 8003fec:	4805      	ldr	r0, [pc, #20]	; (8004004 <MX_TIM7_Init+0x64>)
 8003fee:	f003 f829 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003ff8:	f7fe fefe 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	2000033c 	.word	0x2000033c
 8004008:	40001400 	.word	0x40001400

0800400c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08c      	sub	sp, #48	; 0x30
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004012:	f107 030c 	add.w	r3, r7, #12
 8004016:	2224      	movs	r2, #36	; 0x24
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f003 fe90 	bl	8007d40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004028:	4b22      	ldr	r3, [pc, #136]	; (80040b4 <MX_TIM8_Init+0xa8>)
 800402a:	4a23      	ldr	r2, [pc, #140]	; (80040b8 <MX_TIM8_Init+0xac>)
 800402c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800402e:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <MX_TIM8_Init+0xa8>)
 8004030:	2200      	movs	r2, #0
 8004032:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004034:	4b1f      	ldr	r3, [pc, #124]	; (80040b4 <MX_TIM8_Init+0xa8>)
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800403a:	4b1e      	ldr	r3, [pc, #120]	; (80040b4 <MX_TIM8_Init+0xa8>)
 800403c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004040:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004042:	4b1c      	ldr	r3, [pc, #112]	; (80040b4 <MX_TIM8_Init+0xa8>)
 8004044:	2200      	movs	r2, #0
 8004046:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004048:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <MX_TIM8_Init+0xa8>)
 800404a:	2200      	movs	r2, #0
 800404c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800404e:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <MX_TIM8_Init+0xa8>)
 8004050:	2200      	movs	r2, #0
 8004052:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004054:	2303      	movs	r3, #3
 8004056:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004068:	2300      	movs	r3, #0
 800406a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800406c:	2301      	movs	r3, #1
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004070:	2300      	movs	r3, #0
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004078:	f107 030c 	add.w	r3, r7, #12
 800407c:	4619      	mov	r1, r3
 800407e:	480d      	ldr	r0, [pc, #52]	; (80040b4 <MX_TIM8_Init+0xa8>)
 8004080:	f001 ff38 	bl	8005ef4 <HAL_TIM_Encoder_Init>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800408a:	f7fe feb5 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004096:	1d3b      	adds	r3, r7, #4
 8004098:	4619      	mov	r1, r3
 800409a:	4806      	ldr	r0, [pc, #24]	; (80040b4 <MX_TIM8_Init+0xa8>)
 800409c:	f002 ffd2 	bl	8007044 <HAL_TIMEx_MasterConfigSynchronization>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80040a6:	f7fe fea7 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80040aa:	bf00      	nop
 80040ac:	3730      	adds	r7, #48	; 0x30
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2000018c 	.word	0x2000018c
 80040b8:	40013400 	.word	0x40013400

080040bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a12      	ldr	r2, [pc, #72]	; (8004114 <HAL_TIM_PWM_MspInit+0x58>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d10c      	bne.n	80040e8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040ce:	4b12      	ldr	r3, [pc, #72]	; (8004118 <HAL_TIM_PWM_MspInit+0x5c>)
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	4a11      	ldr	r2, [pc, #68]	; (8004118 <HAL_TIM_PWM_MspInit+0x5c>)
 80040d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040d8:	6193      	str	r3, [r2, #24]
 80040da:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <HAL_TIM_PWM_MspInit+0x5c>)
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80040e6:	e010      	b.n	800410a <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM5)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a0b      	ldr	r2, [pc, #44]	; (800411c <HAL_TIM_PWM_MspInit+0x60>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10b      	bne.n	800410a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_TIM_PWM_MspInit+0x5c>)
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	4a08      	ldr	r2, [pc, #32]	; (8004118 <HAL_TIM_PWM_MspInit+0x5c>)
 80040f8:	f043 0308 	orr.w	r3, r3, #8
 80040fc:	61d3      	str	r3, [r2, #28]
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_TIM_PWM_MspInit+0x5c>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40021000 	.word	0x40021000
 800411c:	40000c00 	.word	0x40000c00

08004120 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004128:	f107 0318 	add.w	r3, r7, #24
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413e:	d124      	bne.n	800418a <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004140:	4b28      	ldr	r3, [pc, #160]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	4a27      	ldr	r2, [pc, #156]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	61d3      	str	r3, [r2, #28]
 800414c:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004158:	4b22      	ldr	r3, [pc, #136]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800415e:	f043 0304 	orr.w	r3, r3, #4
 8004162:	6193      	str	r3, [r2, #24]
 8004164:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004170:	2303      	movs	r3, #3
 8004172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004178:	2300      	movs	r3, #0
 800417a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800417c:	f107 0318 	add.w	r3, r7, #24
 8004180:	4619      	mov	r1, r3
 8004182:	4819      	ldr	r0, [pc, #100]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004184:	f000 fd72 	bl	8004c6c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004188:	e028      	b.n	80041dc <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM8)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a17      	ldr	r2, [pc, #92]	; (80041ec <HAL_TIM_Encoder_MspInit+0xcc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d123      	bne.n	80041dc <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800419a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800419e:	6193      	str	r3, [r2, #24]
 80041a0:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xc4>)
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ac:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xc4>)
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	4a0c      	ldr	r2, [pc, #48]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xc4>)
 80041b2:	f043 0310 	orr.w	r3, r3, #16
 80041b6:	6193      	str	r3, [r2, #24]
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xc4>)
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041c4:	23c0      	movs	r3, #192	; 0xc0
 80041c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041d0:	f107 0318 	add.w	r3, r7, #24
 80041d4:	4619      	mov	r1, r3
 80041d6:	4806      	ldr	r0, [pc, #24]	; (80041f0 <HAL_TIM_Encoder_MspInit+0xd0>)
 80041d8:	f000 fd48 	bl	8004c6c <HAL_GPIO_Init>
}
 80041dc:	bf00      	nop
 80041de:	3728      	adds	r7, #40	; 0x28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40010800 	.word	0x40010800
 80041ec:	40013400 	.word	0x40013400
 80041f0:	40011000 	.word	0x40011000

080041f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08c      	sub	sp, #48	; 0x30
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041fc:	f107 031c 	add.w	r3, r7, #28
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM3)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a37      	ldr	r2, [pc, #220]	; (80042ec <HAL_TIM_Base_MspInit+0xf8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10c      	bne.n	800422e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004214:	4b36      	ldr	r3, [pc, #216]	; (80042f0 <HAL_TIM_Base_MspInit+0xfc>)
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	4a35      	ldr	r2, [pc, #212]	; (80042f0 <HAL_TIM_Base_MspInit+0xfc>)
 800421a:	f043 0302 	orr.w	r3, r3, #2
 800421e:	61d3      	str	r3, [r2, #28]
 8004220:	4b33      	ldr	r3, [pc, #204]	; (80042f0 <HAL_TIM_Base_MspInit+0xfc>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800422c:	e059      	b.n	80042e2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a30      	ldr	r2, [pc, #192]	; (80042f4 <HAL_TIM_Base_MspInit+0x100>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d13b      	bne.n	80042b0 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004238:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <HAL_TIM_Base_MspInit+0xfc>)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	4a2c      	ldr	r2, [pc, #176]	; (80042f0 <HAL_TIM_Base_MspInit+0xfc>)
 800423e:	f043 0304 	orr.w	r3, r3, #4
 8004242:	61d3      	str	r3, [r2, #28]
 8004244:	4b2a      	ldr	r3, [pc, #168]	; (80042f0 <HAL_TIM_Base_MspInit+0xfc>)
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004250:	4b27      	ldr	r3, [pc, #156]	; (80042f0 <HAL_TIM_Base_MspInit+0xfc>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <HAL_TIM_Base_MspInit+0xfc>)
 8004256:	f043 0320 	orr.w	r3, r3, #32
 800425a:	6193      	str	r3, [r2, #24]
 800425c:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <HAL_TIM_Base_MspInit+0xfc>)
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004268:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800426c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800426e:	2300      	movs	r3, #0
 8004270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004272:	2300      	movs	r3, #0
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004276:	f107 031c 	add.w	r3, r7, #28
 800427a:	4619      	mov	r1, r3
 800427c:	481e      	ldr	r0, [pc, #120]	; (80042f8 <HAL_TIM_Base_MspInit+0x104>)
 800427e:	f000 fcf5 	bl	8004c6c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8004282:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <HAL_TIM_Base_MspInit+0x108>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004292:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004298:	4a18      	ldr	r2, [pc, #96]	; (80042fc <HAL_TIM_Base_MspInit+0x108>)
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800429e:	2200      	movs	r2, #0
 80042a0:	2102      	movs	r1, #2
 80042a2:	201e      	movs	r0, #30
 80042a4:	f000 fb69 	bl	800497a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80042a8:	201e      	movs	r0, #30
 80042aa:	f000 fb82 	bl	80049b2 <HAL_NVIC_EnableIRQ>
}
 80042ae:	e018      	b.n	80042e2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM7)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a12      	ldr	r2, [pc, #72]	; (8004300 <HAL_TIM_Base_MspInit+0x10c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d113      	bne.n	80042e2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80042ba:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <HAL_TIM_Base_MspInit+0xfc>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	4a0c      	ldr	r2, [pc, #48]	; (80042f0 <HAL_TIM_Base_MspInit+0xfc>)
 80042c0:	f043 0320 	orr.w	r3, r3, #32
 80042c4:	61d3      	str	r3, [r2, #28]
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <HAL_TIM_Base_MspInit+0xfc>)
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 80042d2:	2200      	movs	r2, #0
 80042d4:	2103      	movs	r1, #3
 80042d6:	2037      	movs	r0, #55	; 0x37
 80042d8:	f000 fb4f 	bl	800497a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80042dc:	2037      	movs	r0, #55	; 0x37
 80042de:	f000 fb68 	bl	80049b2 <HAL_NVIC_EnableIRQ>
}
 80042e2:	bf00      	nop
 80042e4:	3730      	adds	r7, #48	; 0x30
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40011400 	.word	0x40011400
 80042fc:	40010000 	.word	0x40010000
 8004300:	40001400 	.word	0x40001400

08004304 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	; 0x28
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800430c:	f107 0314 	add.w	r3, r7, #20
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	605a      	str	r2, [r3, #4]
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <HAL_TIM_MspPostInit+0xbc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d12b      	bne.n	800437c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004324:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <HAL_TIM_MspPostInit+0xc0>)
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	4a26      	ldr	r2, [pc, #152]	; (80043c4 <HAL_TIM_MspPostInit+0xc0>)
 800432a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800432e:	6193      	str	r3, [r2, #24]
 8004330:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <HAL_TIM_MspPostInit+0xc0>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800433c:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8004340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004342:	2302      	movs	r3, #2
 8004344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004346:	2302      	movs	r3, #2
 8004348:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800434a:	f107 0314 	add.w	r3, r7, #20
 800434e:	4619      	mov	r1, r3
 8004350:	481d      	ldr	r0, [pc, #116]	; (80043c8 <HAL_TIM_MspPostInit+0xc4>)
 8004352:	f000 fc8b 	bl	8004c6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8004356:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <HAL_TIM_MspPostInit+0xc8>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
 8004374:	4a15      	ldr	r2, [pc, #84]	; (80043cc <HAL_TIM_MspPostInit+0xc8>)
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800437a:	e01c      	b.n	80043b6 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM5)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a13      	ldr	r2, [pc, #76]	; (80043d0 <HAL_TIM_MspPostInit+0xcc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d117      	bne.n	80043b6 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004386:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <HAL_TIM_MspPostInit+0xc0>)
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	4a0e      	ldr	r2, [pc, #56]	; (80043c4 <HAL_TIM_MspPostInit+0xc0>)
 800438c:	f043 0304 	orr.w	r3, r3, #4
 8004390:	6193      	str	r3, [r2, #24]
 8004392:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <HAL_TIM_MspPostInit+0xc0>)
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800439e:	230c      	movs	r3, #12
 80043a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a2:	2302      	movs	r3, #2
 80043a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a6:	2302      	movs	r3, #2
 80043a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043aa:	f107 0314 	add.w	r3, r7, #20
 80043ae:	4619      	mov	r1, r3
 80043b0:	4808      	ldr	r0, [pc, #32]	; (80043d4 <HAL_TIM_MspPostInit+0xd0>)
 80043b2:	f000 fc5b 	bl	8004c6c <HAL_GPIO_Init>
}
 80043b6:	bf00      	nop
 80043b8:	3728      	adds	r7, #40	; 0x28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40011800 	.word	0x40011800
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40000c00 	.word	0x40000c00
 80043d4:	40010800 	.word	0x40010800

080043d8 <total_delay>:
  }
}

/* USER CODE BEGIN 1 */
void total_delay(uint16_t time)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <total_delay+0x2c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2200      	movs	r2, #0
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3)<time);
 80043ea:	bf00      	nop
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <total_delay+0x2c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f2:	88fb      	ldrh	r3, [r7, #6]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d3f9      	bcc.n	80043ec <total_delay+0x14>
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr
 8004404:	20000264 	.word	0x20000264

08004408 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <MX_UART4_Init+0x4c>)
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <MX_UART4_Init+0x50>)
 8004410:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <MX_UART4_Init+0x4c>)
 8004414:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004418:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <MX_UART4_Init+0x4c>)
 800441c:	2200      	movs	r2, #0
 800441e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <MX_UART4_Init+0x4c>)
 8004422:	2200      	movs	r2, #0
 8004424:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <MX_UART4_Init+0x4c>)
 8004428:	2200      	movs	r2, #0
 800442a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <MX_UART4_Init+0x4c>)
 800442e:	220c      	movs	r2, #12
 8004430:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <MX_UART4_Init+0x4c>)
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <MX_UART4_Init+0x4c>)
 800443a:	2200      	movs	r2, #0
 800443c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800443e:	4805      	ldr	r0, [pc, #20]	; (8004454 <MX_UART4_Init+0x4c>)
 8004440:	f002 fecf 	bl	80071e2 <HAL_UART_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800444a:	f7fe fcd5 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	200003c8 	.word	0x200003c8
 8004458:	40004c00 	.word	0x40004c00

0800445c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004460:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <MX_USART1_UART_Init+0x4c>)
 8004462:	4a12      	ldr	r2, [pc, #72]	; (80044ac <MX_USART1_UART_Init+0x50>)
 8004464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <MX_USART1_UART_Init+0x4c>)
 8004468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800446c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800446e:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <MX_USART1_UART_Init+0x4c>)
 8004470:	2200      	movs	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <MX_USART1_UART_Init+0x4c>)
 8004476:	2200      	movs	r2, #0
 8004478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <MX_USART1_UART_Init+0x4c>)
 800447c:	2200      	movs	r2, #0
 800447e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <MX_USART1_UART_Init+0x4c>)
 8004482:	220c      	movs	r2, #12
 8004484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <MX_USART1_UART_Init+0x4c>)
 8004488:	2200      	movs	r2, #0
 800448a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <MX_USART1_UART_Init+0x4c>)
 800448e:	2200      	movs	r2, #0
 8004490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004492:	4805      	ldr	r0, [pc, #20]	; (80044a8 <MX_USART1_UART_Init+0x4c>)
 8004494:	f002 fea5 	bl	80071e2 <HAL_UART_Init>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800449e:	f7fe fcab 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000384 	.word	0x20000384
 80044ac:	40013800 	.word	0x40013800

080044b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044b4:	4b11      	ldr	r3, [pc, #68]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044b6:	4a12      	ldr	r2, [pc, #72]	; (8004500 <MX_USART3_UART_Init+0x50>)
 80044b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80044ba:	4b10      	ldr	r3, [pc, #64]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80044c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80044c2:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044d6:	220c      	movs	r2, #12
 80044d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044da:	4b08      	ldr	r3, [pc, #32]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044dc:	2200      	movs	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80044e6:	4805      	ldr	r0, [pc, #20]	; (80044fc <MX_USART3_UART_Init+0x4c>)
 80044e8:	f002 fe7b 	bl	80071e2 <HAL_UART_Init>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80044f2:	f7fe fc81 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000130 	.word	0x20000130
 8004500:	40004800 	.word	0x40004800

08004504 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	; 0x30
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450c:	f107 0320 	add.w	r3, r7, #32
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a60      	ldr	r2, [pc, #384]	; (80046a0 <HAL_UART_MspInit+0x19c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d13a      	bne.n	800459a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004524:	4b5f      	ldr	r3, [pc, #380]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4a5e      	ldr	r2, [pc, #376]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 800452a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800452e:	61d3      	str	r3, [r2, #28]
 8004530:	4b5c      	ldr	r3, [pc, #368]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800453c:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 8004542:	f043 0310 	orr.w	r3, r3, #16
 8004546:	6193      	str	r3, [r2, #24]
 8004548:	4b56      	ldr	r3, [pc, #344]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455a:	2302      	movs	r3, #2
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800455e:	2303      	movs	r3, #3
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004562:	f107 0320 	add.w	r3, r7, #32
 8004566:	4619      	mov	r1, r3
 8004568:	484f      	ldr	r0, [pc, #316]	; (80046a8 <HAL_UART_MspInit+0x1a4>)
 800456a:	f000 fb7f 	bl	8004c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800456e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004574:	2300      	movs	r3, #0
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	2300      	movs	r3, #0
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800457c:	f107 0320 	add.w	r3, r7, #32
 8004580:	4619      	mov	r1, r3
 8004582:	4849      	ldr	r0, [pc, #292]	; (80046a8 <HAL_UART_MspInit+0x1a4>)
 8004584:	f000 fb72 	bl	8004c6c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004588:	2200      	movs	r2, #0
 800458a:	2100      	movs	r1, #0
 800458c:	2034      	movs	r0, #52	; 0x34
 800458e:	f000 f9f4 	bl	800497a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004592:	2034      	movs	r0, #52	; 0x34
 8004594:	f000 fa0d 	bl	80049b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004598:	e07e      	b.n	8004698 <HAL_UART_MspInit+0x194>
  else if(uartHandle->Instance==USART1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a43      	ldr	r2, [pc, #268]	; (80046ac <HAL_UART_MspInit+0x1a8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d13a      	bne.n	800461a <HAL_UART_MspInit+0x116>
    __HAL_RCC_USART1_CLK_ENABLE();
 80045a4:	4b3f      	ldr	r3, [pc, #252]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	4a3e      	ldr	r2, [pc, #248]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 80045aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ae:	6193      	str	r3, [r2, #24]
 80045b0:	4b3c      	ldr	r3, [pc, #240]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045bc:	4b39      	ldr	r3, [pc, #228]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	4a38      	ldr	r2, [pc, #224]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 80045c2:	f043 0304 	orr.w	r3, r3, #4
 80045c6:	6193      	str	r3, [r2, #24]
 80045c8:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80045d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045da:	2302      	movs	r3, #2
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045de:	2303      	movs	r3, #3
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e2:	f107 0320 	add.w	r3, r7, #32
 80045e6:	4619      	mov	r1, r3
 80045e8:	4831      	ldr	r0, [pc, #196]	; (80046b0 <HAL_UART_MspInit+0x1ac>)
 80045ea:	f000 fb3f 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80045ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045f4:	2300      	movs	r3, #0
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045fc:	f107 0320 	add.w	r3, r7, #32
 8004600:	4619      	mov	r1, r3
 8004602:	482b      	ldr	r0, [pc, #172]	; (80046b0 <HAL_UART_MspInit+0x1ac>)
 8004604:	f000 fb32 	bl	8004c6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8004608:	2200      	movs	r2, #0
 800460a:	2101      	movs	r1, #1
 800460c:	2025      	movs	r0, #37	; 0x25
 800460e:	f000 f9b4 	bl	800497a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004612:	2025      	movs	r0, #37	; 0x25
 8004614:	f000 f9cd 	bl	80049b2 <HAL_NVIC_EnableIRQ>
}
 8004618:	e03e      	b.n	8004698 <HAL_UART_MspInit+0x194>
  else if(uartHandle->Instance==USART3)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a25      	ldr	r2, [pc, #148]	; (80046b4 <HAL_UART_MspInit+0x1b0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d139      	bne.n	8004698 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004624:	4b1f      	ldr	r3, [pc, #124]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 800462a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800462e:	61d3      	str	r3, [r2, #28]
 8004630:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 8004642:	f043 0308 	orr.w	r3, r3, #8
 8004646:	6193      	str	r3, [r2, #24]
 8004648:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <HAL_UART_MspInit+0x1a0>)
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465a:	2302      	movs	r3, #2
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800465e:	2303      	movs	r3, #3
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004662:	f107 0320 	add.w	r3, r7, #32
 8004666:	4619      	mov	r1, r3
 8004668:	4813      	ldr	r0, [pc, #76]	; (80046b8 <HAL_UART_MspInit+0x1b4>)
 800466a:	f000 faff 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800466e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004674:	2300      	movs	r3, #0
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004678:	2300      	movs	r3, #0
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800467c:	f107 0320 	add.w	r3, r7, #32
 8004680:	4619      	mov	r1, r3
 8004682:	480d      	ldr	r0, [pc, #52]	; (80046b8 <HAL_UART_MspInit+0x1b4>)
 8004684:	f000 faf2 	bl	8004c6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8004688:	2200      	movs	r2, #0
 800468a:	2101      	movs	r1, #1
 800468c:	2027      	movs	r0, #39	; 0x27
 800468e:	f000 f974 	bl	800497a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004692:	2027      	movs	r0, #39	; 0x27
 8004694:	f000 f98d 	bl	80049b2 <HAL_NVIC_EnableIRQ>
}
 8004698:	bf00      	nop
 800469a:	3730      	adds	r7, #48	; 0x30
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40004c00 	.word	0x40004c00
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40011000 	.word	0x40011000
 80046ac:	40013800 	.word	0x40013800
 80046b0:	40010800 	.word	0x40010800
 80046b4:	40004800 	.word	0x40004800
 80046b8:	40010c00 	.word	0x40010c00

080046bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046bc:	480c      	ldr	r0, [pc, #48]	; (80046f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046be:	490d      	ldr	r1, [pc, #52]	; (80046f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046c0:	4a0d      	ldr	r2, [pc, #52]	; (80046f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046c4:	e002      	b.n	80046cc <LoopCopyDataInit>

080046c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ca:	3304      	adds	r3, #4

080046cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046d0:	d3f9      	bcc.n	80046c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046d4:	4c0a      	ldr	r4, [pc, #40]	; (8004700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046d8:	e001      	b.n	80046de <LoopFillZerobss>

080046da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046dc:	3204      	adds	r2, #4

080046de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046e0:	d3fb      	bcc.n	80046da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046e2:	f7ff fa17 	bl	8003b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046e6:	f003 fb07 	bl	8007cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046ea:	f7fd fcef 	bl	80020cc <main>
  bx lr
 80046ee:	4770      	bx	lr
  ldr r0, =_sdata
 80046f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80046f8:	08007da4 	.word	0x08007da4
  ldr r2, =_sbss
 80046fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004700:	20000410 	.word	0x20000410

08004704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004704:	e7fe      	b.n	8004704 <ADC1_2_IRQHandler>
	...

08004708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800470c:	4b08      	ldr	r3, [pc, #32]	; (8004730 <HAL_Init+0x28>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a07      	ldr	r2, [pc, #28]	; (8004730 <HAL_Init+0x28>)
 8004712:	f043 0310 	orr.w	r3, r3, #16
 8004716:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004718:	2003      	movs	r0, #3
 800471a:	f000 f923 	bl	8004964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800471e:	200f      	movs	r0, #15
 8004720:	f000 f808 	bl	8004734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004724:	f7ff f96a 	bl	80039fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40022000 	.word	0x40022000

08004734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800473c:	4b12      	ldr	r3, [pc, #72]	; (8004788 <HAL_InitTick+0x54>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4b12      	ldr	r3, [pc, #72]	; (800478c <HAL_InitTick+0x58>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	4619      	mov	r1, r3
 8004746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800474a:	fbb3 f3f1 	udiv	r3, r3, r1
 800474e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f93b 	bl	80049ce <HAL_SYSTICK_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e00e      	b.n	8004780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b0f      	cmp	r3, #15
 8004766:	d80a      	bhi.n	800477e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004768:	2200      	movs	r2, #0
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	f000 f903 	bl	800497a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004774:	4a06      	ldr	r2, [pc, #24]	; (8004790 <HAL_InitTick+0x5c>)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20000000 	.word	0x20000000
 800478c:	20000008 	.word	0x20000008
 8004790:	20000004 	.word	0x20000004

08004794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_IncTick+0x1c>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_IncTick+0x20>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4413      	add	r3, r2
 80047a4:	4a03      	ldr	r2, [pc, #12]	; (80047b4 <HAL_IncTick+0x20>)
 80047a6:	6013      	str	r3, [r2, #0]
}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr
 80047b0:	20000008 	.word	0x20000008
 80047b4:	2000040c 	.word	0x2000040c

080047b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return uwTick;
 80047bc:	4b02      	ldr	r3, [pc, #8]	; (80047c8 <HAL_GetTick+0x10>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	2000040c 	.word	0x2000040c

080047cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <__NVIC_SetPriorityGrouping+0x44>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047e8:	4013      	ands	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047fe:	4a04      	ldr	r2, [pc, #16]	; (8004810 <__NVIC_SetPriorityGrouping+0x44>)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	60d3      	str	r3, [r2, #12]
}
 8004804:	bf00      	nop
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <__NVIC_GetPriorityGrouping+0x18>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	0a1b      	lsrs	r3, r3, #8
 800481e:	f003 0307 	and.w	r3, r3, #7
}
 8004822:	4618      	mov	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	2b00      	cmp	r3, #0
 8004840:	db0b      	blt.n	800485a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	f003 021f 	and.w	r2, r3, #31
 8004848:	4906      	ldr	r1, [pc, #24]	; (8004864 <__NVIC_EnableIRQ+0x34>)
 800484a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2001      	movs	r0, #1
 8004852:	fa00 f202 	lsl.w	r2, r0, r2
 8004856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr
 8004864:	e000e100 	.word	0xe000e100

08004868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	6039      	str	r1, [r7, #0]
 8004872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004878:	2b00      	cmp	r3, #0
 800487a:	db0a      	blt.n	8004892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	490c      	ldr	r1, [pc, #48]	; (80048b4 <__NVIC_SetPriority+0x4c>)
 8004882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004886:	0112      	lsls	r2, r2, #4
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	440b      	add	r3, r1
 800488c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004890:	e00a      	b.n	80048a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	b2da      	uxtb	r2, r3
 8004896:	4908      	ldr	r1, [pc, #32]	; (80048b8 <__NVIC_SetPriority+0x50>)
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	3b04      	subs	r3, #4
 80048a0:	0112      	lsls	r2, r2, #4
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	440b      	add	r3, r1
 80048a6:	761a      	strb	r2, [r3, #24]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	e000e100 	.word	0xe000e100
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048bc:	b480      	push	{r7}
 80048be:	b089      	sub	sp, #36	; 0x24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f1c3 0307 	rsb	r3, r3, #7
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	bf28      	it	cs
 80048da:	2304      	movcs	r3, #4
 80048dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2b06      	cmp	r3, #6
 80048e4:	d902      	bls.n	80048ec <NVIC_EncodePriority+0x30>
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	3b03      	subs	r3, #3
 80048ea:	e000      	b.n	80048ee <NVIC_EncodePriority+0x32>
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f0:	f04f 32ff 	mov.w	r2, #4294967295
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43da      	mvns	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	401a      	ands	r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004904:	f04f 31ff 	mov.w	r1, #4294967295
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	43d9      	mvns	r1, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004914:	4313      	orrs	r3, r2
         );
}
 8004916:	4618      	mov	r0, r3
 8004918:	3724      	adds	r7, #36	; 0x24
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr

08004920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3b01      	subs	r3, #1
 800492c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004930:	d301      	bcc.n	8004936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004932:	2301      	movs	r3, #1
 8004934:	e00f      	b.n	8004956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <SysTick_Config+0x40>)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3b01      	subs	r3, #1
 800493c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800493e:	210f      	movs	r1, #15
 8004940:	f04f 30ff 	mov.w	r0, #4294967295
 8004944:	f7ff ff90 	bl	8004868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <SysTick_Config+0x40>)
 800494a:	2200      	movs	r2, #0
 800494c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800494e:	4b04      	ldr	r3, [pc, #16]	; (8004960 <SysTick_Config+0x40>)
 8004950:	2207      	movs	r2, #7
 8004952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	e000e010 	.word	0xe000e010

08004964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ff2d 	bl	80047cc <__NVIC_SetPriorityGrouping>
}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af00      	add	r7, sp, #0
 8004980:	4603      	mov	r3, r0
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
 8004986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800498c:	f7ff ff42 	bl	8004814 <__NVIC_GetPriorityGrouping>
 8004990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	6978      	ldr	r0, [r7, #20]
 8004998:	f7ff ff90 	bl	80048bc <NVIC_EncodePriority>
 800499c:	4602      	mov	r2, r0
 800499e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff ff5f 	bl	8004868 <__NVIC_SetPriority>
}
 80049aa:	bf00      	nop
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	4603      	mov	r3, r0
 80049ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ff35 	bl	8004830 <__NVIC_EnableIRQ>
}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff ffa2 	bl	8004920 <SysTick_Config>
 80049dc:	4603      	mov	r3, r0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d008      	beq.n	8004a0e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2204      	movs	r2, #4
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e020      	b.n	8004a50 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 020e 	bic.w	r2, r2, #14
 8004a1c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	2101      	movs	r1, #1
 8004a38:	fa01 f202 	lsl.w	r2, r1, r2
 8004a3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
	...

08004a5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d005      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2204      	movs	r2, #4
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
 8004a7c:	e0d6      	b.n	8004c2c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 020e 	bic.w	r2, r2, #14
 8004a8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	4b64      	ldr	r3, [pc, #400]	; (8004c38 <HAL_DMA_Abort_IT+0x1dc>)
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d958      	bls.n	8004b5c <HAL_DMA_Abort_IT+0x100>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a63      	ldr	r2, [pc, #396]	; (8004c3c <HAL_DMA_Abort_IT+0x1e0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d04f      	beq.n	8004b54 <HAL_DMA_Abort_IT+0xf8>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a61      	ldr	r2, [pc, #388]	; (8004c40 <HAL_DMA_Abort_IT+0x1e4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d048      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xf4>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a60      	ldr	r2, [pc, #384]	; (8004c44 <HAL_DMA_Abort_IT+0x1e8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d040      	beq.n	8004b4a <HAL_DMA_Abort_IT+0xee>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a5e      	ldr	r2, [pc, #376]	; (8004c48 <HAL_DMA_Abort_IT+0x1ec>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d038      	beq.n	8004b44 <HAL_DMA_Abort_IT+0xe8>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a5d      	ldr	r2, [pc, #372]	; (8004c4c <HAL_DMA_Abort_IT+0x1f0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d030      	beq.n	8004b3e <HAL_DMA_Abort_IT+0xe2>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a5b      	ldr	r2, [pc, #364]	; (8004c50 <HAL_DMA_Abort_IT+0x1f4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d028      	beq.n	8004b38 <HAL_DMA_Abort_IT+0xdc>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a53      	ldr	r2, [pc, #332]	; (8004c38 <HAL_DMA_Abort_IT+0x1dc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d020      	beq.n	8004b32 <HAL_DMA_Abort_IT+0xd6>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a57      	ldr	r2, [pc, #348]	; (8004c54 <HAL_DMA_Abort_IT+0x1f8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d019      	beq.n	8004b2e <HAL_DMA_Abort_IT+0xd2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a56      	ldr	r2, [pc, #344]	; (8004c58 <HAL_DMA_Abort_IT+0x1fc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d012      	beq.n	8004b2a <HAL_DMA_Abort_IT+0xce>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a54      	ldr	r2, [pc, #336]	; (8004c5c <HAL_DMA_Abort_IT+0x200>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00a      	beq.n	8004b24 <HAL_DMA_Abort_IT+0xc8>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a53      	ldr	r2, [pc, #332]	; (8004c60 <HAL_DMA_Abort_IT+0x204>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d102      	bne.n	8004b1e <HAL_DMA_Abort_IT+0xc2>
 8004b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b1c:	e01b      	b.n	8004b56 <HAL_DMA_Abort_IT+0xfa>
 8004b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b22:	e018      	b.n	8004b56 <HAL_DMA_Abort_IT+0xfa>
 8004b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b28:	e015      	b.n	8004b56 <HAL_DMA_Abort_IT+0xfa>
 8004b2a:	2310      	movs	r3, #16
 8004b2c:	e013      	b.n	8004b56 <HAL_DMA_Abort_IT+0xfa>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e011      	b.n	8004b56 <HAL_DMA_Abort_IT+0xfa>
 8004b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b36:	e00e      	b.n	8004b56 <HAL_DMA_Abort_IT+0xfa>
 8004b38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b3c:	e00b      	b.n	8004b56 <HAL_DMA_Abort_IT+0xfa>
 8004b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b42:	e008      	b.n	8004b56 <HAL_DMA_Abort_IT+0xfa>
 8004b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b48:	e005      	b.n	8004b56 <HAL_DMA_Abort_IT+0xfa>
 8004b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b4e:	e002      	b.n	8004b56 <HAL_DMA_Abort_IT+0xfa>
 8004b50:	2310      	movs	r3, #16
 8004b52:	e000      	b.n	8004b56 <HAL_DMA_Abort_IT+0xfa>
 8004b54:	2301      	movs	r3, #1
 8004b56:	4a43      	ldr	r2, [pc, #268]	; (8004c64 <HAL_DMA_Abort_IT+0x208>)
 8004b58:	6053      	str	r3, [r2, #4]
 8004b5a:	e057      	b.n	8004c0c <HAL_DMA_Abort_IT+0x1b0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a36      	ldr	r2, [pc, #216]	; (8004c3c <HAL_DMA_Abort_IT+0x1e0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d04f      	beq.n	8004c06 <HAL_DMA_Abort_IT+0x1aa>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a35      	ldr	r2, [pc, #212]	; (8004c40 <HAL_DMA_Abort_IT+0x1e4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d048      	beq.n	8004c02 <HAL_DMA_Abort_IT+0x1a6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a33      	ldr	r2, [pc, #204]	; (8004c44 <HAL_DMA_Abort_IT+0x1e8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d040      	beq.n	8004bfc <HAL_DMA_Abort_IT+0x1a0>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a32      	ldr	r2, [pc, #200]	; (8004c48 <HAL_DMA_Abort_IT+0x1ec>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d038      	beq.n	8004bf6 <HAL_DMA_Abort_IT+0x19a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a30      	ldr	r2, [pc, #192]	; (8004c4c <HAL_DMA_Abort_IT+0x1f0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d030      	beq.n	8004bf0 <HAL_DMA_Abort_IT+0x194>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a2f      	ldr	r2, [pc, #188]	; (8004c50 <HAL_DMA_Abort_IT+0x1f4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d028      	beq.n	8004bea <HAL_DMA_Abort_IT+0x18e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a26      	ldr	r2, [pc, #152]	; (8004c38 <HAL_DMA_Abort_IT+0x1dc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d020      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x188>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a2b      	ldr	r2, [pc, #172]	; (8004c54 <HAL_DMA_Abort_IT+0x1f8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d019      	beq.n	8004be0 <HAL_DMA_Abort_IT+0x184>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a29      	ldr	r2, [pc, #164]	; (8004c58 <HAL_DMA_Abort_IT+0x1fc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d012      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x180>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a28      	ldr	r2, [pc, #160]	; (8004c5c <HAL_DMA_Abort_IT+0x200>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_DMA_Abort_IT+0x17a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a26      	ldr	r2, [pc, #152]	; (8004c60 <HAL_DMA_Abort_IT+0x204>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d102      	bne.n	8004bd0 <HAL_DMA_Abort_IT+0x174>
 8004bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bce:	e01b      	b.n	8004c08 <HAL_DMA_Abort_IT+0x1ac>
 8004bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bd4:	e018      	b.n	8004c08 <HAL_DMA_Abort_IT+0x1ac>
 8004bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bda:	e015      	b.n	8004c08 <HAL_DMA_Abort_IT+0x1ac>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	e013      	b.n	8004c08 <HAL_DMA_Abort_IT+0x1ac>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e011      	b.n	8004c08 <HAL_DMA_Abort_IT+0x1ac>
 8004be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004be8:	e00e      	b.n	8004c08 <HAL_DMA_Abort_IT+0x1ac>
 8004bea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bee:	e00b      	b.n	8004c08 <HAL_DMA_Abort_IT+0x1ac>
 8004bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bf4:	e008      	b.n	8004c08 <HAL_DMA_Abort_IT+0x1ac>
 8004bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bfa:	e005      	b.n	8004c08 <HAL_DMA_Abort_IT+0x1ac>
 8004bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c00:	e002      	b.n	8004c08 <HAL_DMA_Abort_IT+0x1ac>
 8004c02:	2310      	movs	r3, #16
 8004c04:	e000      	b.n	8004c08 <HAL_DMA_Abort_IT+0x1ac>
 8004c06:	2301      	movs	r3, #1
 8004c08:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <HAL_DMA_Abort_IT+0x20c>)
 8004c0a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4798      	blx	r3
    } 
  }
  return status;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40020080 	.word	0x40020080
 8004c3c:	40020008 	.word	0x40020008
 8004c40:	4002001c 	.word	0x4002001c
 8004c44:	40020030 	.word	0x40020030
 8004c48:	40020044 	.word	0x40020044
 8004c4c:	40020058 	.word	0x40020058
 8004c50:	4002006c 	.word	0x4002006c
 8004c54:	40020408 	.word	0x40020408
 8004c58:	4002041c 	.word	0x4002041c
 8004c5c:	40020430 	.word	0x40020430
 8004c60:	40020444 	.word	0x40020444
 8004c64:	40020400 	.word	0x40020400
 8004c68:	40020000 	.word	0x40020000

08004c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b08b      	sub	sp, #44	; 0x2c
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c7e:	e179      	b.n	8004f74 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004c80:	2201      	movs	r2, #1
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	f040 8168 	bne.w	8004f6e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	4aa0      	ldr	r2, [pc, #640]	; (8004f24 <HAL_GPIO_Init+0x2b8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d05e      	beq.n	8004d66 <HAL_GPIO_Init+0xfa>
 8004ca8:	4a9e      	ldr	r2, [pc, #632]	; (8004f24 <HAL_GPIO_Init+0x2b8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d875      	bhi.n	8004d9a <HAL_GPIO_Init+0x12e>
 8004cae:	4a9e      	ldr	r2, [pc, #632]	; (8004f28 <HAL_GPIO_Init+0x2bc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d058      	beq.n	8004d66 <HAL_GPIO_Init+0xfa>
 8004cb4:	4a9c      	ldr	r2, [pc, #624]	; (8004f28 <HAL_GPIO_Init+0x2bc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d86f      	bhi.n	8004d9a <HAL_GPIO_Init+0x12e>
 8004cba:	4a9c      	ldr	r2, [pc, #624]	; (8004f2c <HAL_GPIO_Init+0x2c0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d052      	beq.n	8004d66 <HAL_GPIO_Init+0xfa>
 8004cc0:	4a9a      	ldr	r2, [pc, #616]	; (8004f2c <HAL_GPIO_Init+0x2c0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d869      	bhi.n	8004d9a <HAL_GPIO_Init+0x12e>
 8004cc6:	4a9a      	ldr	r2, [pc, #616]	; (8004f30 <HAL_GPIO_Init+0x2c4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d04c      	beq.n	8004d66 <HAL_GPIO_Init+0xfa>
 8004ccc:	4a98      	ldr	r2, [pc, #608]	; (8004f30 <HAL_GPIO_Init+0x2c4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d863      	bhi.n	8004d9a <HAL_GPIO_Init+0x12e>
 8004cd2:	4a98      	ldr	r2, [pc, #608]	; (8004f34 <HAL_GPIO_Init+0x2c8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d046      	beq.n	8004d66 <HAL_GPIO_Init+0xfa>
 8004cd8:	4a96      	ldr	r2, [pc, #600]	; (8004f34 <HAL_GPIO_Init+0x2c8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d85d      	bhi.n	8004d9a <HAL_GPIO_Init+0x12e>
 8004cde:	2b12      	cmp	r3, #18
 8004ce0:	d82a      	bhi.n	8004d38 <HAL_GPIO_Init+0xcc>
 8004ce2:	2b12      	cmp	r3, #18
 8004ce4:	d859      	bhi.n	8004d9a <HAL_GPIO_Init+0x12e>
 8004ce6:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <HAL_GPIO_Init+0x80>)
 8004ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cec:	08004d67 	.word	0x08004d67
 8004cf0:	08004d41 	.word	0x08004d41
 8004cf4:	08004d53 	.word	0x08004d53
 8004cf8:	08004d95 	.word	0x08004d95
 8004cfc:	08004d9b 	.word	0x08004d9b
 8004d00:	08004d9b 	.word	0x08004d9b
 8004d04:	08004d9b 	.word	0x08004d9b
 8004d08:	08004d9b 	.word	0x08004d9b
 8004d0c:	08004d9b 	.word	0x08004d9b
 8004d10:	08004d9b 	.word	0x08004d9b
 8004d14:	08004d9b 	.word	0x08004d9b
 8004d18:	08004d9b 	.word	0x08004d9b
 8004d1c:	08004d9b 	.word	0x08004d9b
 8004d20:	08004d9b 	.word	0x08004d9b
 8004d24:	08004d9b 	.word	0x08004d9b
 8004d28:	08004d9b 	.word	0x08004d9b
 8004d2c:	08004d9b 	.word	0x08004d9b
 8004d30:	08004d49 	.word	0x08004d49
 8004d34:	08004d5d 	.word	0x08004d5d
 8004d38:	4a7f      	ldr	r2, [pc, #508]	; (8004f38 <HAL_GPIO_Init+0x2cc>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d3e:	e02c      	b.n	8004d9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	623b      	str	r3, [r7, #32]
          break;
 8004d46:	e029      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	623b      	str	r3, [r7, #32]
          break;
 8004d50:	e024      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	3308      	adds	r3, #8
 8004d58:	623b      	str	r3, [r7, #32]
          break;
 8004d5a:	e01f      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	330c      	adds	r3, #12
 8004d62:	623b      	str	r3, [r7, #32]
          break;
 8004d64:	e01a      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004d6e:	2304      	movs	r3, #4
 8004d70:	623b      	str	r3, [r7, #32]
          break;
 8004d72:	e013      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	611a      	str	r2, [r3, #16]
          break;
 8004d86:	e009      	b.n	8004d9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d88:	2308      	movs	r3, #8
 8004d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	615a      	str	r2, [r3, #20]
          break;
 8004d92:	e003      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004d94:	2300      	movs	r3, #0
 8004d96:	623b      	str	r3, [r7, #32]
          break;
 8004d98:	e000      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          break;
 8004d9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2bff      	cmp	r3, #255	; 0xff
 8004da0:	d801      	bhi.n	8004da6 <HAL_GPIO_Init+0x13a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	e001      	b.n	8004daa <HAL_GPIO_Init+0x13e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3304      	adds	r3, #4
 8004daa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2bff      	cmp	r3, #255	; 0xff
 8004db0:	d802      	bhi.n	8004db8 <HAL_GPIO_Init+0x14c>
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	e002      	b.n	8004dbe <HAL_GPIO_Init+0x152>
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	3b08      	subs	r3, #8
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	210f      	movs	r1, #15
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	401a      	ands	r2, r3
 8004dd0:	6a39      	ldr	r1, [r7, #32]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80c1 	beq.w	8004f6e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004dec:	4b53      	ldr	r3, [pc, #332]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	4a52      	ldr	r2, [pc, #328]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6193      	str	r3, [r2, #24]
 8004df8:	4b50      	ldr	r3, [pc, #320]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e04:	4a4e      	ldr	r2, [pc, #312]	; (8004f40 <HAL_GPIO_Init+0x2d4>)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	089b      	lsrs	r3, r3, #2
 8004e0a:	3302      	adds	r3, #2
 8004e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4013      	ands	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a46      	ldr	r2, [pc, #280]	; (8004f44 <HAL_GPIO_Init+0x2d8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d01f      	beq.n	8004e70 <HAL_GPIO_Init+0x204>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a45      	ldr	r2, [pc, #276]	; (8004f48 <HAL_GPIO_Init+0x2dc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d019      	beq.n	8004e6c <HAL_GPIO_Init+0x200>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a44      	ldr	r2, [pc, #272]	; (8004f4c <HAL_GPIO_Init+0x2e0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d013      	beq.n	8004e68 <HAL_GPIO_Init+0x1fc>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a43      	ldr	r2, [pc, #268]	; (8004f50 <HAL_GPIO_Init+0x2e4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00d      	beq.n	8004e64 <HAL_GPIO_Init+0x1f8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a42      	ldr	r2, [pc, #264]	; (8004f54 <HAL_GPIO_Init+0x2e8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <HAL_GPIO_Init+0x1f4>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a41      	ldr	r2, [pc, #260]	; (8004f58 <HAL_GPIO_Init+0x2ec>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <HAL_GPIO_Init+0x1f0>
 8004e58:	2305      	movs	r3, #5
 8004e5a:	e00a      	b.n	8004e72 <HAL_GPIO_Init+0x206>
 8004e5c:	2306      	movs	r3, #6
 8004e5e:	e008      	b.n	8004e72 <HAL_GPIO_Init+0x206>
 8004e60:	2304      	movs	r3, #4
 8004e62:	e006      	b.n	8004e72 <HAL_GPIO_Init+0x206>
 8004e64:	2303      	movs	r3, #3
 8004e66:	e004      	b.n	8004e72 <HAL_GPIO_Init+0x206>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e002      	b.n	8004e72 <HAL_GPIO_Init+0x206>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_GPIO_Init+0x206>
 8004e70:	2300      	movs	r3, #0
 8004e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e74:	f002 0203 	and.w	r2, r2, #3
 8004e78:	0092      	lsls	r2, r2, #2
 8004e7a:	4093      	lsls	r3, r2
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004e82:	492f      	ldr	r1, [pc, #188]	; (8004f40 <HAL_GPIO_Init+0x2d4>)
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	3302      	adds	r3, #2
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d006      	beq.n	8004eaa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004e9c:	4b2f      	ldr	r3, [pc, #188]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	492e      	ldr	r1, [pc, #184]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	600b      	str	r3, [r1, #0]
 8004ea8:	e006      	b.n	8004eb8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004eaa:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	492a      	ldr	r1, [pc, #168]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d006      	beq.n	8004ed2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004ec4:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	4924      	ldr	r1, [pc, #144]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]
 8004ed0:	e006      	b.n	8004ee0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004ed2:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	4920      	ldr	r1, [pc, #128]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d006      	beq.n	8004efa <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	491a      	ldr	r1, [pc, #104]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	608b      	str	r3, [r1, #8]
 8004ef8:	e006      	b.n	8004f08 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004efa:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	43db      	mvns	r3, r3
 8004f02:	4916      	ldr	r1, [pc, #88]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d025      	beq.n	8004f60 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f14:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	4910      	ldr	r1, [pc, #64]	; (8004f5c <HAL_GPIO_Init+0x2f0>)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60cb      	str	r3, [r1, #12]
 8004f20:	e025      	b.n	8004f6e <HAL_GPIO_Init+0x302>
 8004f22:	bf00      	nop
 8004f24:	10320000 	.word	0x10320000
 8004f28:	10310000 	.word	0x10310000
 8004f2c:	10220000 	.word	0x10220000
 8004f30:	10210000 	.word	0x10210000
 8004f34:	10120000 	.word	0x10120000
 8004f38:	10110000 	.word	0x10110000
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40010800 	.word	0x40010800
 8004f48:	40010c00 	.word	0x40010c00
 8004f4c:	40011000 	.word	0x40011000
 8004f50:	40011400 	.word	0x40011400
 8004f54:	40011800 	.word	0x40011800
 8004f58:	40011c00 	.word	0x40011c00
 8004f5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_GPIO_Init+0x324>)
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	43db      	mvns	r3, r3
 8004f68:	4909      	ldr	r1, [pc, #36]	; (8004f90 <HAL_GPIO_Init+0x324>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	3301      	adds	r3, #1
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f47f ae7e 	bne.w	8004c80 <HAL_GPIO_Init+0x14>
  }
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	372c      	adds	r7, #44	; 0x2c
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr
 8004f90:	40010400 	.word	0x40010400

08004f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	807b      	strh	r3, [r7, #2]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fa4:	787b      	ldrb	r3, [r7, #1]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004fb0:	e003      	b.n	8004fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fb2:	887b      	ldrh	r3, [r7, #2]
 8004fb4:	041a      	lsls	r2, r3, #16
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	611a      	str	r2, [r3, #16]
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e26c      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 8087 	beq.w	80050f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fe4:	4b92      	ldr	r3, [pc, #584]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 030c 	and.w	r3, r3, #12
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d00c      	beq.n	800500a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ff0:	4b8f      	ldr	r3, [pc, #572]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 030c 	and.w	r3, r3, #12
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d112      	bne.n	8005022 <HAL_RCC_OscConfig+0x5e>
 8004ffc:	4b8c      	ldr	r3, [pc, #560]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005008:	d10b      	bne.n	8005022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800500a:	4b89      	ldr	r3, [pc, #548]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d06c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x12c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d168      	bne.n	80050f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e246      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502a:	d106      	bne.n	800503a <HAL_RCC_OscConfig+0x76>
 800502c:	4b80      	ldr	r3, [pc, #512]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a7f      	ldr	r2, [pc, #508]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	e02e      	b.n	8005098 <HAL_RCC_OscConfig+0xd4>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10c      	bne.n	800505c <HAL_RCC_OscConfig+0x98>
 8005042:	4b7b      	ldr	r3, [pc, #492]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a7a      	ldr	r2, [pc, #488]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4b78      	ldr	r3, [pc, #480]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a77      	ldr	r2, [pc, #476]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e01d      	b.n	8005098 <HAL_RCC_OscConfig+0xd4>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0xbc>
 8005066:	4b72      	ldr	r3, [pc, #456]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a71      	ldr	r2, [pc, #452]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800506c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b6f      	ldr	r3, [pc, #444]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a6e      	ldr	r2, [pc, #440]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e00b      	b.n	8005098 <HAL_RCC_OscConfig+0xd4>
 8005080:	4b6b      	ldr	r3, [pc, #428]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a6a      	ldr	r2, [pc, #424]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4b68      	ldr	r3, [pc, #416]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a67      	ldr	r2, [pc, #412]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d013      	beq.n	80050c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a0:	f7ff fb8a 	bl	80047b8 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a8:	f7ff fb86 	bl	80047b8 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	; 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e1fa      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	4b5d      	ldr	r3, [pc, #372]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0xe4>
 80050c6:	e014      	b.n	80050f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7ff fb76 	bl	80047b8 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d0:	f7ff fb72 	bl	80047b8 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	; 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e1e6      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e2:	4b53      	ldr	r3, [pc, #332]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x10c>
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d063      	beq.n	80051c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050fe:	4b4c      	ldr	r3, [pc, #304]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800510a:	4b49      	ldr	r3, [pc, #292]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b08      	cmp	r3, #8
 8005114:	d11c      	bne.n	8005150 <HAL_RCC_OscConfig+0x18c>
 8005116:	4b46      	ldr	r3, [pc, #280]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d116      	bne.n	8005150 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005122:	4b43      	ldr	r3, [pc, #268]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_RCC_OscConfig+0x176>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d001      	beq.n	800513a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e1ba      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800513a:	4b3d      	ldr	r3, [pc, #244]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4939      	ldr	r1, [pc, #228]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800514a:	4313      	orrs	r3, r2
 800514c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514e:	e03a      	b.n	80051c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d020      	beq.n	800519a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005158:	4b36      	ldr	r3, [pc, #216]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800515a:	2201      	movs	r2, #1
 800515c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515e:	f7ff fb2b 	bl	80047b8 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005166:	f7ff fb27 	bl	80047b8 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e19b      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005178:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005184:	4b2a      	ldr	r3, [pc, #168]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4927      	ldr	r1, [pc, #156]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]
 8005198:	e015      	b.n	80051c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800519a:	4b26      	ldr	r3, [pc, #152]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a0:	f7ff fb0a 	bl	80047b8 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a8:	f7ff fb06 	bl	80047b8 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e17a      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ba:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d03a      	beq.n	8005248 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d019      	beq.n	800520e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051da:	4b17      	ldr	r3, [pc, #92]	; (8005238 <HAL_RCC_OscConfig+0x274>)
 80051dc:	2201      	movs	r2, #1
 80051de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e0:	f7ff faea 	bl	80047b8 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e8:	f7ff fae6 	bl	80047b8 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e15a      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fa:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005206:	2001      	movs	r0, #1
 8005208:	f000 fad8 	bl	80057bc <RCC_Delay>
 800520c:	e01c      	b.n	8005248 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <HAL_RCC_OscConfig+0x274>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005214:	f7ff fad0 	bl	80047b8 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800521a:	e00f      	b.n	800523c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800521c:	f7ff facc 	bl	80047b8 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d908      	bls.n	800523c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e140      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000
 8005234:	42420000 	.word	0x42420000
 8005238:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800523c:	4b9e      	ldr	r3, [pc, #632]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e9      	bne.n	800521c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 80a6 	beq.w	80053a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800525a:	4b97      	ldr	r3, [pc, #604]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10d      	bne.n	8005282 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005266:	4b94      	ldr	r3, [pc, #592]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	4a93      	ldr	r2, [pc, #588]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 800526c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005270:	61d3      	str	r3, [r2, #28]
 8005272:	4b91      	ldr	r3, [pc, #580]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527e:	2301      	movs	r3, #1
 8005280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005282:	4b8e      	ldr	r3, [pc, #568]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d118      	bne.n	80052c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800528e:	4b8b      	ldr	r3, [pc, #556]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a8a      	ldr	r2, [pc, #552]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 8005294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800529a:	f7ff fa8d 	bl	80047b8 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a2:	f7ff fa89 	bl	80047b8 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b64      	cmp	r3, #100	; 0x64
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e0fd      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b4:	4b81      	ldr	r3, [pc, #516]	; (80054bc <HAL_RCC_OscConfig+0x4f8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d106      	bne.n	80052d6 <HAL_RCC_OscConfig+0x312>
 80052c8:	4b7b      	ldr	r3, [pc, #492]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	4a7a      	ldr	r2, [pc, #488]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	6213      	str	r3, [r2, #32]
 80052d4:	e02d      	b.n	8005332 <HAL_RCC_OscConfig+0x36e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x334>
 80052de:	4b76      	ldr	r3, [pc, #472]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	4a75      	ldr	r2, [pc, #468]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	6213      	str	r3, [r2, #32]
 80052ea:	4b73      	ldr	r3, [pc, #460]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	4a72      	ldr	r2, [pc, #456]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 80052f0:	f023 0304 	bic.w	r3, r3, #4
 80052f4:	6213      	str	r3, [r2, #32]
 80052f6:	e01c      	b.n	8005332 <HAL_RCC_OscConfig+0x36e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	2b05      	cmp	r3, #5
 80052fe:	d10c      	bne.n	800531a <HAL_RCC_OscConfig+0x356>
 8005300:	4b6d      	ldr	r3, [pc, #436]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	4a6c      	ldr	r2, [pc, #432]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 8005306:	f043 0304 	orr.w	r3, r3, #4
 800530a:	6213      	str	r3, [r2, #32]
 800530c:	4b6a      	ldr	r3, [pc, #424]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	4a69      	ldr	r2, [pc, #420]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	6213      	str	r3, [r2, #32]
 8005318:	e00b      	b.n	8005332 <HAL_RCC_OscConfig+0x36e>
 800531a:	4b67      	ldr	r3, [pc, #412]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	4a66      	ldr	r2, [pc, #408]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	6213      	str	r3, [r2, #32]
 8005326:	4b64      	ldr	r3, [pc, #400]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	4a63      	ldr	r2, [pc, #396]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 800532c:	f023 0304 	bic.w	r3, r3, #4
 8005330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d015      	beq.n	8005366 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800533a:	f7ff fa3d 	bl	80047b8 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005340:	e00a      	b.n	8005358 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005342:	f7ff fa39 	bl	80047b8 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005350:	4293      	cmp	r3, r2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e0ab      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005358:	4b57      	ldr	r3, [pc, #348]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0ee      	beq.n	8005342 <HAL_RCC_OscConfig+0x37e>
 8005364:	e014      	b.n	8005390 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005366:	f7ff fa27 	bl	80047b8 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536c:	e00a      	b.n	8005384 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536e:	f7ff fa23 	bl	80047b8 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f241 3288 	movw	r2, #5000	; 0x1388
 800537c:	4293      	cmp	r3, r2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e095      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005384:	4b4c      	ldr	r3, [pc, #304]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1ee      	bne.n	800536e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005390:	7dfb      	ldrb	r3, [r7, #23]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d105      	bne.n	80053a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005396:	4b48      	ldr	r3, [pc, #288]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	4a47      	ldr	r2, [pc, #284]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 800539c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 8081 	beq.w	80054ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053ac:	4b42      	ldr	r3, [pc, #264]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f003 030c 	and.w	r3, r3, #12
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d061      	beq.n	800547c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d146      	bne.n	800544e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c0:	4b3f      	ldr	r3, [pc, #252]	; (80054c0 <HAL_RCC_OscConfig+0x4fc>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c6:	f7ff f9f7 	bl	80047b8 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ce:	f7ff f9f3 	bl	80047b8 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e067      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e0:	4b35      	ldr	r3, [pc, #212]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f0      	bne.n	80053ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f4:	d108      	bne.n	8005408 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053f6:	4b30      	ldr	r3, [pc, #192]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	492d      	ldr	r1, [pc, #180]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 8005404:	4313      	orrs	r3, r2
 8005406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005408:	4b2b      	ldr	r3, [pc, #172]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a19      	ldr	r1, [r3, #32]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	430b      	orrs	r3, r1
 800541a:	4927      	ldr	r1, [pc, #156]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005420:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <HAL_RCC_OscConfig+0x4fc>)
 8005422:	2201      	movs	r2, #1
 8005424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005426:	f7ff f9c7 	bl	80047b8 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800542e:	f7ff f9c3 	bl	80047b8 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e037      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCC_OscConfig+0x46a>
 800544c:	e02f      	b.n	80054ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544e:	4b1c      	ldr	r3, [pc, #112]	; (80054c0 <HAL_RCC_OscConfig+0x4fc>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7ff f9b0 	bl	80047b8 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7ff f9ac 	bl	80047b8 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e020      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800546e:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x498>
 800547a:	e018      	b.n	80054ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e013      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005488:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <HAL_RCC_OscConfig+0x4f4>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	429a      	cmp	r2, r3
 800549a:	d106      	bne.n	80054aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d001      	beq.n	80054ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40007000 	.word	0x40007000
 80054c0:	42420060 	.word	0x42420060

080054c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0d0      	b.n	800567a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054d8:	4b6a      	ldr	r3, [pc, #424]	; (8005684 <HAL_RCC_ClockConfig+0x1c0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d910      	bls.n	8005508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e6:	4b67      	ldr	r3, [pc, #412]	; (8005684 <HAL_RCC_ClockConfig+0x1c0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 0207 	bic.w	r2, r3, #7
 80054ee:	4965      	ldr	r1, [pc, #404]	; (8005684 <HAL_RCC_ClockConfig+0x1c0>)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f6:	4b63      	ldr	r3, [pc, #396]	; (8005684 <HAL_RCC_ClockConfig+0x1c0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d001      	beq.n	8005508 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0b8      	b.n	800567a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d020      	beq.n	8005556 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005520:	4b59      	ldr	r3, [pc, #356]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	4a58      	ldr	r2, [pc, #352]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 8005526:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800552a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005538:	4b53      	ldr	r3, [pc, #332]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	4a52      	ldr	r2, [pc, #328]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 800553e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005542:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005544:	4b50      	ldr	r3, [pc, #320]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	494d      	ldr	r1, [pc, #308]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 8005552:	4313      	orrs	r3, r2
 8005554:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d040      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d107      	bne.n	800557a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556a:	4b47      	ldr	r3, [pc, #284]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d115      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e07f      	b.n	800567a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d107      	bne.n	8005592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005582:	4b41      	ldr	r3, [pc, #260]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e073      	b.n	800567a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005592:	4b3d      	ldr	r3, [pc, #244]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e06b      	b.n	800567a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055a2:	4b39      	ldr	r3, [pc, #228]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f023 0203 	bic.w	r2, r3, #3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4936      	ldr	r1, [pc, #216]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055b4:	f7ff f900 	bl	80047b8 <HAL_GetTick>
 80055b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055bc:	f7ff f8fc 	bl	80047b8 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e053      	b.n	800567a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d2:	4b2d      	ldr	r3, [pc, #180]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f003 020c 	and.w	r2, r3, #12
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d1eb      	bne.n	80055bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <HAL_RCC_ClockConfig+0x1c0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d210      	bcs.n	8005614 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f2:	4b24      	ldr	r3, [pc, #144]	; (8005684 <HAL_RCC_ClockConfig+0x1c0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f023 0207 	bic.w	r2, r3, #7
 80055fa:	4922      	ldr	r1, [pc, #136]	; (8005684 <HAL_RCC_ClockConfig+0x1c0>)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	4313      	orrs	r3, r2
 8005600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005602:	4b20      	ldr	r3, [pc, #128]	; (8005684 <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d001      	beq.n	8005614 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e032      	b.n	800567a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005620:	4b19      	ldr	r3, [pc, #100]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4916      	ldr	r1, [pc, #88]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 800562e:	4313      	orrs	r3, r2
 8005630:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d009      	beq.n	8005652 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800563e:	4b12      	ldr	r3, [pc, #72]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	490e      	ldr	r1, [pc, #56]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 800564e:	4313      	orrs	r3, r2
 8005650:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005652:	f000 f821 	bl	8005698 <HAL_RCC_GetSysClockFreq>
 8005656:	4602      	mov	r2, r0
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_RCC_ClockConfig+0x1c4>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	091b      	lsrs	r3, r3, #4
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	490a      	ldr	r1, [pc, #40]	; (800568c <HAL_RCC_ClockConfig+0x1c8>)
 8005664:	5ccb      	ldrb	r3, [r1, r3]
 8005666:	fa22 f303 	lsr.w	r3, r2, r3
 800566a:	4a09      	ldr	r2, [pc, #36]	; (8005690 <HAL_RCC_ClockConfig+0x1cc>)
 800566c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800566e:	4b09      	ldr	r3, [pc, #36]	; (8005694 <HAL_RCC_ClockConfig+0x1d0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff f85e 	bl	8004734 <HAL_InitTick>

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40022000 	.word	0x40022000
 8005688:	40021000 	.word	0x40021000
 800568c:	08007d84 	.word	0x08007d84
 8005690:	20000000 	.word	0x20000000
 8005694:	20000004 	.word	0x20000004

08005698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005698:	b490      	push	{r4, r7}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800569e:	4b2a      	ldr	r3, [pc, #168]	; (8005748 <HAL_RCC_GetSysClockFreq+0xb0>)
 80056a0:	1d3c      	adds	r4, r7, #4
 80056a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80056a8:	f240 2301 	movw	r3, #513	; 0x201
 80056ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	2300      	movs	r3, #0
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056c2:	4b22      	ldr	r3, [pc, #136]	; (800574c <HAL_RCC_GetSysClockFreq+0xb4>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	f003 030c 	and.w	r3, r3, #12
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d002      	beq.n	80056d8 <HAL_RCC_GetSysClockFreq+0x40>
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d003      	beq.n	80056de <HAL_RCC_GetSysClockFreq+0x46>
 80056d6:	e02d      	b.n	8005734 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056d8:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056da:	623b      	str	r3, [r7, #32]
      break;
 80056dc:	e02d      	b.n	800573a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	0c9b      	lsrs	r3, r3, #18
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056ea:	4413      	add	r3, r2
 80056ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80056f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d013      	beq.n	8005724 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056fc:	4b13      	ldr	r3, [pc, #76]	; (800574c <HAL_RCC_GetSysClockFreq+0xb4>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	0c5b      	lsrs	r3, r3, #17
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800570a:	4413      	add	r3, r2
 800570c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005710:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	4a0e      	ldr	r2, [pc, #56]	; (8005750 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005716:	fb02 f203 	mul.w	r2, r2, r3
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
 8005722:	e004      	b.n	800572e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4a0b      	ldr	r2, [pc, #44]	; (8005754 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005728:	fb02 f303 	mul.w	r3, r2, r3
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	623b      	str	r3, [r7, #32]
      break;
 8005732:	e002      	b.n	800573a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005734:	4b06      	ldr	r3, [pc, #24]	; (8005750 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005736:	623b      	str	r3, [r7, #32]
      break;
 8005738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800573a:	6a3b      	ldr	r3, [r7, #32]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3728      	adds	r7, #40	; 0x28
 8005740:	46bd      	mov	sp, r7
 8005742:	bc90      	pop	{r4, r7}
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	08007d74 	.word	0x08007d74
 800574c:	40021000 	.word	0x40021000
 8005750:	007a1200 	.word	0x007a1200
 8005754:	003d0900 	.word	0x003d0900

08005758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800575c:	4b02      	ldr	r3, [pc, #8]	; (8005768 <HAL_RCC_GetHCLKFreq+0x10>)
 800575e:	681b      	ldr	r3, [r3, #0]
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr
 8005768:	20000000 	.word	0x20000000

0800576c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005770:	f7ff fff2 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 8005774:	4602      	mov	r2, r0
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	4903      	ldr	r1, [pc, #12]	; (8005790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005782:	5ccb      	ldrb	r3, [r1, r3]
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005788:	4618      	mov	r0, r3
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40021000 	.word	0x40021000
 8005790:	08007d94 	.word	0x08007d94

08005794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005798:	f7ff ffde 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 800579c:	4602      	mov	r2, r0
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	0adb      	lsrs	r3, r3, #11
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	4903      	ldr	r1, [pc, #12]	; (80057b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057aa:	5ccb      	ldrb	r3, [r1, r3]
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40021000 	.word	0x40021000
 80057b8:	08007d94 	.word	0x08007d94

080057bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057c4:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <RCC_Delay+0x34>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a0a      	ldr	r2, [pc, #40]	; (80057f4 <RCC_Delay+0x38>)
 80057ca:	fba2 2303 	umull	r2, r3, r2, r3
 80057ce:	0a5b      	lsrs	r3, r3, #9
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
 80057d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057d8:	bf00      	nop
  }
  while (Delay --);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1e5a      	subs	r2, r3, #1
 80057de:	60fa      	str	r2, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f9      	bne.n	80057d8 <RCC_Delay+0x1c>
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr
 80057f0:	20000000 	.word	0x20000000
 80057f4:	10624dd3 	.word	0x10624dd3

080057f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e041      	b.n	800588e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fe fce8 	bl	80041f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f001 f80a 	bl	8006850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d001      	beq.n	80058b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e03c      	b.n	800592a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <HAL_TIM_Base_Start+0x9c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d018      	beq.n	80058f4 <HAL_TIM_Base_Start+0x5c>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <HAL_TIM_Base_Start+0xa0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d013      	beq.n	80058f4 <HAL_TIM_Base_Start+0x5c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d4:	d00e      	beq.n	80058f4 <HAL_TIM_Base_Start+0x5c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a18      	ldr	r2, [pc, #96]	; (800593c <HAL_TIM_Base_Start+0xa4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d009      	beq.n	80058f4 <HAL_TIM_Base_Start+0x5c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a16      	ldr	r2, [pc, #88]	; (8005940 <HAL_TIM_Base_Start+0xa8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_TIM_Base_Start+0x5c>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a15      	ldr	r2, [pc, #84]	; (8005944 <HAL_TIM_Base_Start+0xac>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d111      	bne.n	8005918 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b06      	cmp	r3, #6
 8005904:	d010      	beq.n	8005928 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0201 	orr.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005916:	e007      	b.n	8005928 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40013400 	.word	0x40013400
 800593c:	40000400 	.word	0x40000400
 8005940:	40000800 	.word	0x40000800
 8005944:	40000c00 	.word	0x40000c00

08005948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d001      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e044      	b.n	80059ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <HAL_TIM_Base_Start_IT+0xac>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d018      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0x6c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d013      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0x6c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005994:	d00e      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0x6c>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <HAL_TIM_Base_Start_IT+0xb4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d009      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0x6c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <HAL_TIM_Base_Start_IT+0xb8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d004      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0x6c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <HAL_TIM_Base_Start_IT+0xbc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d111      	bne.n	80059d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b06      	cmp	r3, #6
 80059c4:	d010      	beq.n	80059e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0201 	orr.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d6:	e007      	b.n	80059e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40013400 	.word	0x40013400
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00

08005a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e041      	b.n	8005a9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fe fb44 	bl	80040bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f000 ff02 	bl	8006850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d109      	bne.n	8005acc <HAL_TIM_PWM_Start+0x24>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	bf14      	ite	ne
 8005ac4:	2301      	movne	r3, #1
 8005ac6:	2300      	moveq	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	e022      	b.n	8005b12 <HAL_TIM_PWM_Start+0x6a>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d109      	bne.n	8005ae6 <HAL_TIM_PWM_Start+0x3e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	bf14      	ite	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	2300      	moveq	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	e015      	b.n	8005b12 <HAL_TIM_PWM_Start+0x6a>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d109      	bne.n	8005b00 <HAL_TIM_PWM_Start+0x58>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	bf14      	ite	ne
 8005af8:	2301      	movne	r3, #1
 8005afa:	2300      	moveq	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	e008      	b.n	8005b12 <HAL_TIM_PWM_Start+0x6a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	bf14      	ite	ne
 8005b0c:	2301      	movne	r3, #1
 8005b0e:	2300      	moveq	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e072      	b.n	8005c00 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d104      	bne.n	8005b2a <HAL_TIM_PWM_Start+0x82>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b28:	e013      	b.n	8005b52 <HAL_TIM_PWM_Start+0xaa>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIM_PWM_Start+0x92>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b38:	e00b      	b.n	8005b52 <HAL_TIM_PWM_Start+0xaa>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d104      	bne.n	8005b4a <HAL_TIM_PWM_Start+0xa2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b48:	e003      	b.n	8005b52 <HAL_TIM_PWM_Start+0xaa>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2201      	movs	r2, #1
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 fa4d 	bl	8006ffa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a28      	ldr	r2, [pc, #160]	; (8005c08 <HAL_TIM_PWM_Start+0x160>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_TIM_PWM_Start+0xcc>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a27      	ldr	r2, [pc, #156]	; (8005c0c <HAL_TIM_PWM_Start+0x164>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d101      	bne.n	8005b78 <HAL_TIM_PWM_Start+0xd0>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <HAL_TIM_PWM_Start+0xd2>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1d      	ldr	r2, [pc, #116]	; (8005c08 <HAL_TIM_PWM_Start+0x160>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d018      	beq.n	8005bca <HAL_TIM_PWM_Start+0x122>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <HAL_TIM_PWM_Start+0x164>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d013      	beq.n	8005bca <HAL_TIM_PWM_Start+0x122>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005baa:	d00e      	beq.n	8005bca <HAL_TIM_PWM_Start+0x122>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a17      	ldr	r2, [pc, #92]	; (8005c10 <HAL_TIM_PWM_Start+0x168>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d009      	beq.n	8005bca <HAL_TIM_PWM_Start+0x122>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a16      	ldr	r2, [pc, #88]	; (8005c14 <HAL_TIM_PWM_Start+0x16c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d004      	beq.n	8005bca <HAL_TIM_PWM_Start+0x122>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a14      	ldr	r2, [pc, #80]	; (8005c18 <HAL_TIM_PWM_Start+0x170>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d111      	bne.n	8005bee <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b06      	cmp	r3, #6
 8005bda:	d010      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bec:	e007      	b.n	8005bfe <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40012c00 	.word	0x40012c00
 8005c0c:	40013400 	.word	0x40013400
 8005c10:	40000400 	.word	0x40000400
 8005c14:	40000800 	.word	0x40000800
 8005c18:	40000c00 	.word	0x40000c00

08005c1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e041      	b.n	8005cb2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f839 	bl	8005cba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f000 fdf8 	bl	8006850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_IC_Start_IT+0x1a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	e013      	b.n	8005d0e <HAL_TIM_IC_Start_IT+0x42>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_IC_Start_IT+0x2a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	e00b      	b.n	8005d0e <HAL_TIM_IC_Start_IT+0x42>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d104      	bne.n	8005d06 <HAL_TIM_IC_Start_IT+0x3a>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	e003      	b.n	8005d0e <HAL_TIM_IC_Start_IT+0x42>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d104      	bne.n	8005d20 <HAL_TIM_IC_Start_IT+0x54>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	e013      	b.n	8005d48 <HAL_TIM_IC_Start_IT+0x7c>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d104      	bne.n	8005d30 <HAL_TIM_IC_Start_IT+0x64>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	e00b      	b.n	8005d48 <HAL_TIM_IC_Start_IT+0x7c>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d104      	bne.n	8005d40 <HAL_TIM_IC_Start_IT+0x74>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	e003      	b.n	8005d48 <HAL_TIM_IC_Start_IT+0x7c>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d102      	bne.n	8005d56 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d001      	beq.n	8005d5a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e0bd      	b.n	8005ed6 <HAL_TIM_IC_Start_IT+0x20a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d104      	bne.n	8005d6a <HAL_TIM_IC_Start_IT+0x9e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d68:	e013      	b.n	8005d92 <HAL_TIM_IC_Start_IT+0xc6>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d104      	bne.n	8005d7a <HAL_TIM_IC_Start_IT+0xae>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d78:	e00b      	b.n	8005d92 <HAL_TIM_IC_Start_IT+0xc6>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d104      	bne.n	8005d8a <HAL_TIM_IC_Start_IT+0xbe>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d88:	e003      	b.n	8005d92 <HAL_TIM_IC_Start_IT+0xc6>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d104      	bne.n	8005da2 <HAL_TIM_IC_Start_IT+0xd6>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da0:	e013      	b.n	8005dca <HAL_TIM_IC_Start_IT+0xfe>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d104      	bne.n	8005db2 <HAL_TIM_IC_Start_IT+0xe6>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db0:	e00b      	b.n	8005dca <HAL_TIM_IC_Start_IT+0xfe>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d104      	bne.n	8005dc2 <HAL_TIM_IC_Start_IT+0xf6>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc0:	e003      	b.n	8005dca <HAL_TIM_IC_Start_IT+0xfe>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	d841      	bhi.n	8005e54 <HAL_TIM_IC_Start_IT+0x188>
 8005dd0:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <HAL_TIM_IC_Start_IT+0x10c>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e55 	.word	0x08005e55
 8005de0:	08005e55 	.word	0x08005e55
 8005de4:	08005e55 	.word	0x08005e55
 8005de8:	08005e1f 	.word	0x08005e1f
 8005dec:	08005e55 	.word	0x08005e55
 8005df0:	08005e55 	.word	0x08005e55
 8005df4:	08005e55 	.word	0x08005e55
 8005df8:	08005e31 	.word	0x08005e31
 8005dfc:	08005e55 	.word	0x08005e55
 8005e00:	08005e55 	.word	0x08005e55
 8005e04:	08005e55 	.word	0x08005e55
 8005e08:	08005e43 	.word	0x08005e43
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0202 	orr.w	r2, r2, #2
 8005e1a:	60da      	str	r2, [r3, #12]
      break;
 8005e1c:	e01b      	b.n	8005e56 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0204 	orr.w	r2, r2, #4
 8005e2c:	60da      	str	r2, [r3, #12]
      break;
 8005e2e:	e012      	b.n	8005e56 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0208 	orr.w	r2, r2, #8
 8005e3e:	60da      	str	r2, [r3, #12]
      break;
 8005e40:	e009      	b.n	8005e56 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0210 	orr.w	r2, r2, #16
 8005e50:	60da      	str	r2, [r3, #12]
      break;
 8005e52:	e000      	b.n	8005e56 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8005e54:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 f8cb 	bl	8006ffa <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_TIM_IC_Start_IT+0x214>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_TIM_IC_Start_IT+0x1d4>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1c      	ldr	r2, [pc, #112]	; (8005ee4 <HAL_TIM_IC_Start_IT+0x218>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_TIM_IC_Start_IT+0x1d4>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e80:	d00e      	beq.n	8005ea0 <HAL_TIM_IC_Start_IT+0x1d4>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a18      	ldr	r2, [pc, #96]	; (8005ee8 <HAL_TIM_IC_Start_IT+0x21c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_TIM_IC_Start_IT+0x1d4>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a16      	ldr	r2, [pc, #88]	; (8005eec <HAL_TIM_IC_Start_IT+0x220>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_TIM_IC_Start_IT+0x1d4>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a15      	ldr	r2, [pc, #84]	; (8005ef0 <HAL_TIM_IC_Start_IT+0x224>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d111      	bne.n	8005ec4 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b06      	cmp	r3, #6
 8005eb0:	d010      	beq.n	8005ed4 <HAL_TIM_IC_Start_IT+0x208>
    {
      __HAL_TIM_ENABLE(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0201 	orr.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec2:	e007      	b.n	8005ed4 <HAL_TIM_IC_Start_IT+0x208>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40013400 	.word	0x40013400
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800
 8005ef0:	40000c00 	.word	0x40000c00

08005ef4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e093      	b.n	8006030 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d106      	bne.n	8005f22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7fe f8ff 	bl	8004120 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2202      	movs	r2, #2
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f38:	f023 0307 	bic.w	r3, r3, #7
 8005f3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3304      	adds	r3, #4
 8005f46:	4619      	mov	r1, r3
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f000 fc81 	bl	8006850 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	4313      	orrs	r3, r2
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f94:	f023 030c 	bic.w	r3, r3, #12
 8005f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	021b      	lsls	r3, r3, #8
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	011a      	lsls	r2, r3, #4
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	031b      	lsls	r3, r3, #12
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005fd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006048:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006050:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006058:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006060:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d110      	bne.n	800608a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d102      	bne.n	8006074 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800606e:	7b7b      	ldrb	r3, [r7, #13]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d001      	beq.n	8006078 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e069      	b.n	800614c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006088:	e031      	b.n	80060ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b04      	cmp	r3, #4
 800608e:	d110      	bne.n	80060b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d102      	bne.n	800609c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006096:	7b3b      	ldrb	r3, [r7, #12]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d001      	beq.n	80060a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e055      	b.n	800614c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060b0:	e01d      	b.n	80060ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d108      	bne.n	80060ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d105      	bne.n	80060ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060be:	7b7b      	ldrb	r3, [r7, #13]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d102      	bne.n	80060ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060c4:	7b3b      	ldrb	r3, [r7, #12]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d001      	beq.n	80060ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e03e      	b.n	800614c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2202      	movs	r2, #2
 80060d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <HAL_TIM_Encoder_Start+0xc4>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d008      	beq.n	800610c <HAL_TIM_Encoder_Start+0xd4>
 80060fa:	e00f      	b.n	800611c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2201      	movs	r2, #1
 8006102:	2100      	movs	r1, #0
 8006104:	4618      	mov	r0, r3
 8006106:	f000 ff78 	bl	8006ffa <TIM_CCxChannelCmd>
      break;
 800610a:	e016      	b.n	800613a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2201      	movs	r2, #1
 8006112:	2104      	movs	r1, #4
 8006114:	4618      	mov	r0, r3
 8006116:	f000 ff70 	bl	8006ffa <TIM_CCxChannelCmd>
      break;
 800611a:	e00e      	b.n	800613a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2201      	movs	r2, #1
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f000 ff68 	bl	8006ffa <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2201      	movs	r2, #1
 8006130:	2104      	movs	r1, #4
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ff61 	bl	8006ffa <TIM_CCxChannelCmd>
      break;
 8006138:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0201 	orr.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b02      	cmp	r3, #2
 8006168:	d122      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b02      	cmp	r3, #2
 8006176:	d11b      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0202 	mvn.w	r2, #2
 8006180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fc fb96 	bl	80028c8 <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fb3a 	bl	8006818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fb40 	bl	800682a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d122      	bne.n	8006204 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d11b      	bne.n	8006204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0204 	mvn.w	r2, #4
 80061d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2202      	movs	r2, #2
 80061da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fc fb6c 	bl	80028c8 <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fb10 	bl	8006818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb16 	bl	800682a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b08      	cmp	r3, #8
 8006210:	d122      	bne.n	8006258 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	2b08      	cmp	r3, #8
 800621e:	d11b      	bne.n	8006258 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0208 	mvn.w	r2, #8
 8006228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2204      	movs	r2, #4
 800622e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fc fb42 	bl	80028c8 <HAL_TIM_IC_CaptureCallback>
 8006244:	e005      	b.n	8006252 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fae6 	bl	8006818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 faec 	bl	800682a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0310 	and.w	r3, r3, #16
 8006262:	2b10      	cmp	r3, #16
 8006264:	d122      	bne.n	80062ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	2b10      	cmp	r3, #16
 8006272:	d11b      	bne.n	80062ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0210 	mvn.w	r2, #16
 800627c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2208      	movs	r2, #8
 8006282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fc fb18 	bl	80028c8 <HAL_TIM_IC_CaptureCallback>
 8006298:	e005      	b.n	80062a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fabc 	bl	8006818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fac2 	bl	800682a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d10e      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d107      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0201 	mvn.w	r2, #1
 80062d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fc f850 	bl	8002378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b80      	cmp	r3, #128	; 0x80
 80062e4:	d10e      	bne.n	8006304 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f0:	2b80      	cmp	r3, #128	; 0x80
 80062f2:	d107      	bne.n	8006304 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 ff66 	bl	80071d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	d10e      	bne.n	8006330 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631c:	2b40      	cmp	r3, #64	; 0x40
 800631e:	d107      	bne.n	8006330 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fa86 	bl	800683c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b20      	cmp	r3, #32
 800633c:	d10e      	bne.n	800635c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b20      	cmp	r3, #32
 800634a:	d107      	bne.n	800635c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0220 	mvn.w	r2, #32
 8006354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 ff31 	bl	80071be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_TIM_IC_ConfigChannel+0x1a>
 800637a:	2302      	movs	r3, #2
 800637c:	e082      	b.n	8006484 <HAL_TIM_IC_ConfigChannel+0x120>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d11b      	bne.n	80063c4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6818      	ldr	r0, [r3, #0]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	6819      	ldr	r1, [r3, #0]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f000 fc7e 	bl	8006c9c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 020c 	bic.w	r2, r2, #12
 80063ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6999      	ldr	r1, [r3, #24]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	619a      	str	r2, [r3, #24]
 80063c2:	e05a      	b.n	800647a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d11c      	bne.n	8006404 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	6819      	ldr	r1, [r3, #0]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f000 fcf3 	bl	8006dc4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	699a      	ldr	r2, [r3, #24]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80063ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6999      	ldr	r1, [r3, #24]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	021a      	lsls	r2, r3, #8
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	619a      	str	r2, [r3, #24]
 8006402:	e03a      	b.n	800647a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b08      	cmp	r3, #8
 8006408:	d11b      	bne.n	8006442 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6819      	ldr	r1, [r3, #0]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f000 fd3e 	bl	8006e9a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 020c 	bic.w	r2, r2, #12
 800642c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69d9      	ldr	r1, [r3, #28]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	61da      	str	r2, [r3, #28]
 8006440:	e01b      	b.n	800647a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6818      	ldr	r0, [r3, #0]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	6819      	ldr	r1, [r3, #0]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f000 fd5d 	bl	8006f10 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006464:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69d9      	ldr	r1, [r3, #28]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	021a      	lsls	r2, r3, #8
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e0ac      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x174>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b0c      	cmp	r3, #12
 80064b2:	f200 809f 	bhi.w	80065f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80064b6:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	080064f1 	.word	0x080064f1
 80064c0:	080065f5 	.word	0x080065f5
 80064c4:	080065f5 	.word	0x080065f5
 80064c8:	080065f5 	.word	0x080065f5
 80064cc:	08006531 	.word	0x08006531
 80064d0:	080065f5 	.word	0x080065f5
 80064d4:	080065f5 	.word	0x080065f5
 80064d8:	080065f5 	.word	0x080065f5
 80064dc:	08006573 	.word	0x08006573
 80064e0:	080065f5 	.word	0x080065f5
 80064e4:	080065f5 	.word	0x080065f5
 80064e8:	080065f5 	.word	0x080065f5
 80064ec:	080065b3 	.word	0x080065b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fa24 	bl	8006944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699a      	ldr	r2, [r3, #24]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0208 	orr.w	r2, r2, #8
 800650a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0204 	bic.w	r2, r2, #4
 800651a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6999      	ldr	r1, [r3, #24]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	619a      	str	r2, [r3, #24]
      break;
 800652e:	e062      	b.n	80065f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fa74 	bl	8006a24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800654a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800655a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6999      	ldr	r1, [r3, #24]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	021a      	lsls	r2, r3, #8
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	619a      	str	r2, [r3, #24]
      break;
 8006570:	e041      	b.n	80065f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68b9      	ldr	r1, [r7, #8]
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fac7 	bl	8006b0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69da      	ldr	r2, [r3, #28]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0208 	orr.w	r2, r2, #8
 800658c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69da      	ldr	r2, [r3, #28]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0204 	bic.w	r2, r2, #4
 800659c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69d9      	ldr	r1, [r3, #28]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	61da      	str	r2, [r3, #28]
      break;
 80065b0:	e021      	b.n	80065f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fb1b 	bl	8006bf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69d9      	ldr	r1, [r3, #28]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	021a      	lsls	r2, r3, #8
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	61da      	str	r2, [r3, #28]
      break;
 80065f2:	e000      	b.n	80065f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80065f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_TIM_ConfigClockSource+0x18>
 800661c:	2302      	movs	r3, #2
 800661e:	e0b3      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x180>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800663e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006646:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006658:	d03e      	beq.n	80066d8 <HAL_TIM_ConfigClockSource+0xd0>
 800665a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665e:	f200 8087 	bhi.w	8006770 <HAL_TIM_ConfigClockSource+0x168>
 8006662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006666:	f000 8085 	beq.w	8006774 <HAL_TIM_ConfigClockSource+0x16c>
 800666a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666e:	d87f      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x168>
 8006670:	2b70      	cmp	r3, #112	; 0x70
 8006672:	d01a      	beq.n	80066aa <HAL_TIM_ConfigClockSource+0xa2>
 8006674:	2b70      	cmp	r3, #112	; 0x70
 8006676:	d87b      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x168>
 8006678:	2b60      	cmp	r3, #96	; 0x60
 800667a:	d050      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x116>
 800667c:	2b60      	cmp	r3, #96	; 0x60
 800667e:	d877      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x168>
 8006680:	2b50      	cmp	r3, #80	; 0x50
 8006682:	d03c      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0xf6>
 8006684:	2b50      	cmp	r3, #80	; 0x50
 8006686:	d873      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x168>
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	d058      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x136>
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d86f      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x168>
 8006690:	2b30      	cmp	r3, #48	; 0x30
 8006692:	d064      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x156>
 8006694:	2b30      	cmp	r3, #48	; 0x30
 8006696:	d86b      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x168>
 8006698:	2b20      	cmp	r3, #32
 800669a:	d060      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x156>
 800669c:	2b20      	cmp	r3, #32
 800669e:	d867      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x168>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d05c      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x156>
 80066a4:	2b10      	cmp	r3, #16
 80066a6:	d05a      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80066a8:	e062      	b.n	8006770 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	6899      	ldr	r1, [r3, #8]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f000 fc7f 	bl	8006fbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	609a      	str	r2, [r3, #8]
      break;
 80066d6:	e04e      	b.n	8006776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	6899      	ldr	r1, [r3, #8]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f000 fc68 	bl	8006fbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066fa:	609a      	str	r2, [r3, #8]
      break;
 80066fc:	e03b      	b.n	8006776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6859      	ldr	r1, [r3, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	461a      	mov	r2, r3
 800670c:	f000 fb2c 	bl	8006d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2150      	movs	r1, #80	; 0x50
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fc36 	bl	8006f88 <TIM_ITRx_SetConfig>
      break;
 800671c:	e02b      	b.n	8006776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6859      	ldr	r1, [r3, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	461a      	mov	r2, r3
 800672c:	f000 fb86 	bl	8006e3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2160      	movs	r1, #96	; 0x60
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fc26 	bl	8006f88 <TIM_ITRx_SetConfig>
      break;
 800673c:	e01b      	b.n	8006776 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6859      	ldr	r1, [r3, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	461a      	mov	r2, r3
 800674c:	f000 fb0c 	bl	8006d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2140      	movs	r1, #64	; 0x40
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fc16 	bl	8006f88 <TIM_ITRx_SetConfig>
      break;
 800675c:	e00b      	b.n	8006776 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4619      	mov	r1, r3
 8006768:	4610      	mov	r0, r2
 800676a:	f000 fc0d 	bl	8006f88 <TIM_ITRx_SetConfig>
        break;
 800676e:	e002      	b.n	8006776 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006770:	bf00      	nop
 8006772:	e000      	b.n	8006776 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006774:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d831      	bhi.n	8006808 <HAL_TIM_ReadCapturedValue+0x78>
 80067a4:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	080067e1 	.word	0x080067e1
 80067b0:	08006809 	.word	0x08006809
 80067b4:	08006809 	.word	0x08006809
 80067b8:	08006809 	.word	0x08006809
 80067bc:	080067eb 	.word	0x080067eb
 80067c0:	08006809 	.word	0x08006809
 80067c4:	08006809 	.word	0x08006809
 80067c8:	08006809 	.word	0x08006809
 80067cc:	080067f5 	.word	0x080067f5
 80067d0:	08006809 	.word	0x08006809
 80067d4:	08006809 	.word	0x08006809
 80067d8:	08006809 	.word	0x08006809
 80067dc:	080067ff 	.word	0x080067ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e6:	60fb      	str	r3, [r7, #12]

      break;
 80067e8:	e00f      	b.n	800680a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	60fb      	str	r3, [r7, #12]

      break;
 80067f2:	e00a      	b.n	800680a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fa:	60fb      	str	r3, [r7, #12]

      break;
 80067fc:	e005      	b.n	800680a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006804:	60fb      	str	r3, [r7, #12]

      break;
 8006806:	e000      	b.n	800680a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006808:	bf00      	nop
  }

  return tmpreg;
 800680a:	68fb      	ldr	r3, [r7, #12]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop

08006818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	bc80      	pop	{r7}
 8006828:	4770      	bx	lr

0800682a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr

0800683c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr
	...

08006850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a33      	ldr	r2, [pc, #204]	; (8006930 <TIM_Base_SetConfig+0xe0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a32      	ldr	r2, [pc, #200]	; (8006934 <TIM_Base_SetConfig+0xe4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00f      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006876:	d00b      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a2f      	ldr	r2, [pc, #188]	; (8006938 <TIM_Base_SetConfig+0xe8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a2e      	ldr	r2, [pc, #184]	; (800693c <TIM_Base_SetConfig+0xec>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a2d      	ldr	r2, [pc, #180]	; (8006940 <TIM_Base_SetConfig+0xf0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d108      	bne.n	80068a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a22      	ldr	r2, [pc, #136]	; (8006930 <TIM_Base_SetConfig+0xe0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <TIM_Base_SetConfig+0x82>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a21      	ldr	r2, [pc, #132]	; (8006934 <TIM_Base_SetConfig+0xe4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00f      	beq.n	80068d2 <TIM_Base_SetConfig+0x82>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b8:	d00b      	beq.n	80068d2 <TIM_Base_SetConfig+0x82>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <TIM_Base_SetConfig+0xe8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d007      	beq.n	80068d2 <TIM_Base_SetConfig+0x82>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a1d      	ldr	r2, [pc, #116]	; (800693c <TIM_Base_SetConfig+0xec>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d003      	beq.n	80068d2 <TIM_Base_SetConfig+0x82>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a1c      	ldr	r2, [pc, #112]	; (8006940 <TIM_Base_SetConfig+0xf0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d108      	bne.n	80068e4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a09      	ldr	r2, [pc, #36]	; (8006930 <TIM_Base_SetConfig+0xe0>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_Base_SetConfig+0xc8>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a08      	ldr	r2, [pc, #32]	; (8006934 <TIM_Base_SetConfig+0xe4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d103      	bne.n	8006920 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	615a      	str	r2, [r3, #20]
}
 8006926:	bf00      	nop
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40013400 	.word	0x40013400
 8006938:	40000400 	.word	0x40000400
 800693c:	40000800 	.word	0x40000800
 8006940:	40000c00 	.word	0x40000c00

08006944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	f023 0201 	bic.w	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0303 	bic.w	r3, r3, #3
 800697a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f023 0302 	bic.w	r3, r3, #2
 800698c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	4313      	orrs	r3, r2
 8006996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a20      	ldr	r2, [pc, #128]	; (8006a1c <TIM_OC1_SetConfig+0xd8>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d003      	beq.n	80069a8 <TIM_OC1_SetConfig+0x64>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <TIM_OC1_SetConfig+0xdc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d10c      	bne.n	80069c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f023 0308 	bic.w	r3, r3, #8
 80069ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f023 0304 	bic.w	r3, r3, #4
 80069c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <TIM_OC1_SetConfig+0xd8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <TIM_OC1_SetConfig+0x8e>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a14      	ldr	r2, [pc, #80]	; (8006a20 <TIM_OC1_SetConfig+0xdc>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d111      	bne.n	80069f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	621a      	str	r2, [r3, #32]
}
 8006a10:	bf00      	nop
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40013400 	.word	0x40013400

08006a24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f023 0210 	bic.w	r2, r3, #16
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	021b      	lsls	r3, r3, #8
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0320 	bic.w	r3, r3, #32
 8006a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a21      	ldr	r2, [pc, #132]	; (8006b04 <TIM_OC2_SetConfig+0xe0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_OC2_SetConfig+0x68>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a20      	ldr	r2, [pc, #128]	; (8006b08 <TIM_OC2_SetConfig+0xe4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d10d      	bne.n	8006aa8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <TIM_OC2_SetConfig+0xe0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d003      	beq.n	8006ab8 <TIM_OC2_SetConfig+0x94>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <TIM_OC2_SetConfig+0xe4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d113      	bne.n	8006ae0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr
 8006b04:	40012c00 	.word	0x40012c00
 8006b08:	40013400 	.word	0x40013400

08006b0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0303 	bic.w	r3, r3, #3
 8006b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	021b      	lsls	r3, r3, #8
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a21      	ldr	r2, [pc, #132]	; (8006bec <TIM_OC3_SetConfig+0xe0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d003      	beq.n	8006b72 <TIM_OC3_SetConfig+0x66>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a20      	ldr	r2, [pc, #128]	; (8006bf0 <TIM_OC3_SetConfig+0xe4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d10d      	bne.n	8006b8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a16      	ldr	r2, [pc, #88]	; (8006bec <TIM_OC3_SetConfig+0xe0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_OC3_SetConfig+0x92>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a15      	ldr	r2, [pc, #84]	; (8006bf0 <TIM_OC3_SetConfig+0xe4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d113      	bne.n	8006bc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	621a      	str	r2, [r3, #32]
}
 8006be0:	bf00      	nop
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40012c00 	.word	0x40012c00
 8006bf0:	40013400 	.word	0x40013400

08006bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	031b      	lsls	r3, r3, #12
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <TIM_OC4_SetConfig+0xa0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_OC4_SetConfig+0x68>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a10      	ldr	r2, [pc, #64]	; (8006c98 <TIM_OC4_SetConfig+0xa4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d109      	bne.n	8006c70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	019b      	lsls	r3, r3, #6
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	621a      	str	r2, [r3, #32]
}
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr
 8006c94:	40012c00 	.word	0x40012c00
 8006c98:	40013400 	.word	0x40013400

08006c9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f023 0201 	bic.w	r2, r3, #1
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4a23      	ldr	r2, [pc, #140]	; (8006d54 <TIM_TI1_SetConfig+0xb8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d013      	beq.n	8006cf2 <TIM_TI1_SetConfig+0x56>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4a22      	ldr	r2, [pc, #136]	; (8006d58 <TIM_TI1_SetConfig+0xbc>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00f      	beq.n	8006cf2 <TIM_TI1_SetConfig+0x56>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd8:	d00b      	beq.n	8006cf2 <TIM_TI1_SetConfig+0x56>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	4a1f      	ldr	r2, [pc, #124]	; (8006d5c <TIM_TI1_SetConfig+0xc0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d007      	beq.n	8006cf2 <TIM_TI1_SetConfig+0x56>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4a1e      	ldr	r2, [pc, #120]	; (8006d60 <TIM_TI1_SetConfig+0xc4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d003      	beq.n	8006cf2 <TIM_TI1_SetConfig+0x56>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <TIM_TI1_SetConfig+0xc8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d101      	bne.n	8006cf6 <TIM_TI1_SetConfig+0x5a>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e000      	b.n	8006cf8 <TIM_TI1_SetConfig+0x5c>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d008      	beq.n	8006d0e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f023 0303 	bic.w	r3, r3, #3
 8006d02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	e003      	b.n	8006d16 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f023 030a 	bic.w	r3, r3, #10
 8006d30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f003 030a 	and.w	r3, r3, #10
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	621a      	str	r2, [r3, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bc80      	pop	{r7}
 8006d52:	4770      	bx	lr
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	40013400 	.word	0x40013400
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40000c00 	.word	0x40000c00

08006d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f023 0201 	bic.w	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	011b      	lsls	r3, r3, #4
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f023 030a 	bic.w	r3, r3, #10
 8006da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	621a      	str	r2, [r3, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bc80      	pop	{r7}
 8006dc2:	4770      	bx	lr

08006dc4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f023 0210 	bic.w	r2, r3, #16
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	021b      	lsls	r3, r3, #8
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	031b      	lsls	r3, r3, #12
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e16:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr

08006e3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	f023 0210 	bic.w	r2, r3, #16
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	031b      	lsls	r3, r3, #12
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	621a      	str	r2, [r3, #32]
}
 8006e90:	bf00      	nop
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr

08006e9a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b087      	sub	sp, #28
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	607a      	str	r2, [r7, #4]
 8006ea6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f023 0303 	bic.w	r3, r3, #3
 8006ec6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ed6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	021b      	lsls	r3, r3, #8
 8006ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	621a      	str	r2, [r3, #32]
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	031b      	lsls	r3, r3, #12
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	031b      	lsls	r3, r3, #12
 8006f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	621a      	str	r2, [r3, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bc80      	pop	{r7}
 8006f86:	4770      	bx	lr

08006f88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	f043 0307 	orr.w	r3, r3, #7
 8006faa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	609a      	str	r2, [r3, #8]
}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr

08006fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
 8006fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	021a      	lsls	r2, r3, #8
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	609a      	str	r2, [r3, #8]
}
 8006ff0:	bf00      	nop
 8006ff2:	371c      	adds	r7, #28
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr

08006ffa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b087      	sub	sp, #28
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	2201      	movs	r2, #1
 800700e:	fa02 f303 	lsl.w	r3, r2, r3
 8007012:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a1a      	ldr	r2, [r3, #32]
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	43db      	mvns	r3, r3
 800701c:	401a      	ands	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1a      	ldr	r2, [r3, #32]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f003 031f 	and.w	r3, r3, #31
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	fa01 f303 	lsl.w	r3, r1, r3
 8007032:	431a      	orrs	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	621a      	str	r2, [r3, #32]
}
 8007038:	bf00      	nop
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr
	...

08007044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007058:	2302      	movs	r3, #2
 800705a:	e050      	b.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a1b      	ldr	r2, [pc, #108]	; (8007108 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d018      	beq.n	80070d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a19      	ldr	r2, [pc, #100]	; (800710c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b2:	d00e      	beq.n	80070d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a15      	ldr	r2, [pc, #84]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d009      	beq.n	80070d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a14      	ldr	r2, [pc, #80]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d004      	beq.n	80070d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a12      	ldr	r2, [pc, #72]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d10c      	bne.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr
 8007108:	40012c00 	.word	0x40012c00
 800710c:	40013400 	.word	0x40013400
 8007110:	40000400 	.word	0x40000400
 8007114:	40000800 	.word	0x40000800
 8007118:	40000c00 	.word	0x40000c00

0800711c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007130:	2b01      	cmp	r3, #1
 8007132:	d101      	bne.n	8007138 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007134:	2302      	movs	r3, #2
 8007136:	e03d      	b.n	80071b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr

080071be <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bc80      	pop	{r7}
 80071ce:	4770      	bx	lr

080071d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr

080071e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e03f      	b.n	8007274 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7fd f97b 	bl	8004504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2224      	movs	r2, #36	; 0x24
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007224:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fcd8 	bl	8007bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800723a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	695a      	ldr	r2, [r3, #20]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800724a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800725a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08a      	sub	sp, #40	; 0x28
 8007280:	af02      	add	r7, sp, #8
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	4613      	mov	r3, r2
 800728a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b20      	cmp	r3, #32
 800729a:	f040 808c 	bne.w	80073b6 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <HAL_UART_Receive+0x2e>
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e084      	b.n	80073b8 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d101      	bne.n	80072bc <HAL_UART_Receive+0x40>
 80072b8:	2302      	movs	r3, #2
 80072ba:	e07d      	b.n	80073b8 <HAL_UART_Receive+0x13c>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2222      	movs	r2, #34	; 0x22
 80072ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072d8:	f7fd fa6e 	bl	80047b8 <HAL_GetTick>
 80072dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	88fa      	ldrh	r2, [r7, #6]
 80072e2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	88fa      	ldrh	r2, [r7, #6]
 80072e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f2:	d108      	bne.n	8007306 <HAL_UART_Receive+0x8a>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d104      	bne.n	8007306 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80072fc:	2300      	movs	r3, #0
 80072fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	61bb      	str	r3, [r7, #24]
 8007304:	e003      	b.n	800730e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800730a:	2300      	movs	r3, #0
 800730c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007316:	e043      	b.n	80073a0 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2200      	movs	r2, #0
 8007320:	2120      	movs	r1, #32
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 fa87 	bl	8007836 <UART_WaitOnFlagUntilTimeout>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e042      	b.n	80073b8 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10c      	bne.n	8007352 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	b29b      	uxth	r3, r3
 8007340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007344:	b29a      	uxth	r2, r3
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	3302      	adds	r3, #2
 800734e:	61bb      	str	r3, [r7, #24]
 8007350:	e01f      	b.n	8007392 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735a:	d007      	beq.n	800736c <HAL_UART_Receive+0xf0>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <HAL_UART_Receive+0xfe>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d106      	bne.n	800737a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	b2da      	uxtb	r2, r3
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	701a      	strb	r2, [r3, #0]
 8007378:	e008      	b.n	800738c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007386:	b2da      	uxtb	r2, r3
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	3301      	adds	r3, #1
 8007390:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1b6      	bne.n	8007318 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	e000      	b.n	80073b8 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80073b6:	2302      	movs	r3, #2
  }
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3720      	adds	r7, #32
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	4613      	mov	r3, r2
 80073cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	d130      	bne.n	800743c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <HAL_UART_Transmit_IT+0x26>
 80073e0:	88fb      	ldrh	r3, [r7, #6]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e029      	b.n	800743e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_UART_Transmit_IT+0x38>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e022      	b.n	800743e <HAL_UART_Transmit_IT+0x7e>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	88fa      	ldrh	r2, [r7, #6]
 800740a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	88fa      	ldrh	r2, [r7, #6]
 8007410:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2221      	movs	r2, #33	; 0x21
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007436:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	e000      	b.n	800743e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800743c:	2302      	movs	r3, #2
  }
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr

08007448 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b20      	cmp	r3, #32
 8007460:	d11d      	bne.n	800749e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <HAL_UART_Receive_IT+0x26>
 8007468:	88fb      	ldrh	r3, [r7, #6]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e016      	b.n	80074a0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <HAL_UART_Receive_IT+0x38>
 800747c:	2302      	movs	r3, #2
 800747e:	e00f      	b.n	80074a0 <HAL_UART_Receive_IT+0x58>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800748e:	88fb      	ldrh	r3, [r7, #6]
 8007490:	461a      	mov	r2, r3
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fa18 	bl	80078ca <UART_Start_Receive_IT>
 800749a:	4603      	mov	r3, r0
 800749c:	e000      	b.n	80074a0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800749e:	2302      	movs	r3, #2
  }
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08a      	sub	sp, #40	; 0x28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10d      	bne.n	80074fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d008      	beq.n	80074fa <HAL_UART_IRQHandler+0x52>
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fac9 	bl	8007a8a <UART_Receive_IT>
      return;
 80074f8:	e17b      	b.n	80077f2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 80b1 	beq.w	8007664 <HAL_UART_IRQHandler+0x1bc>
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b00      	cmp	r3, #0
 800750a:	d105      	bne.n	8007518 <HAL_UART_IRQHandler+0x70>
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 80a6 	beq.w	8007664 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <HAL_UART_IRQHandler+0x90>
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	f043 0201 	orr.w	r2, r3, #1
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <HAL_UART_IRQHandler+0xb0>
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	f043 0202 	orr.w	r2, r3, #2
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <HAL_UART_IRQHandler+0xd0>
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007570:	f043 0204 	orr.w	r2, r3, #4
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00f      	beq.n	80075a2 <HAL_UART_IRQHandler+0xfa>
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	f003 0320 	and.w	r3, r3, #32
 8007588:	2b00      	cmp	r3, #0
 800758a:	d104      	bne.n	8007596 <HAL_UART_IRQHandler+0xee>
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f043 0208 	orr.w	r2, r3, #8
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 811e 	beq.w	80077e8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d007      	beq.n	80075c6 <HAL_UART_IRQHandler+0x11e>
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fa62 	bl	8007a8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bf14      	ite	ne
 80075d4:	2301      	movne	r3, #1
 80075d6:	2300      	moveq	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <HAL_UART_IRQHandler+0x146>
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d031      	beq.n	8007652 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f9a4 	bl	800793c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d023      	beq.n	800764a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	695a      	ldr	r2, [r3, #20]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007610:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007616:	2b00      	cmp	r3, #0
 8007618:	d013      	beq.n	8007642 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761e:	4a76      	ldr	r2, [pc, #472]	; (80077f8 <HAL_UART_IRQHandler+0x350>)
 8007620:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	4618      	mov	r0, r3
 8007628:	f7fd fa18 	bl	8004a5c <HAL_DMA_Abort_IT>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d016      	beq.n	8007660 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007640:	e00e      	b.n	8007660 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f8e3 	bl	800780e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007648:	e00a      	b.n	8007660 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f8df 	bl	800780e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007650:	e006      	b.n	8007660 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f8db 	bl	800780e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800765e:	e0c3      	b.n	80077e8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007660:	bf00      	nop
    return;
 8007662:	e0c1      	b.n	80077e8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007668:	2b01      	cmp	r3, #1
 800766a:	f040 80a1 	bne.w	80077b0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 809b 	beq.w	80077b0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 8095 	beq.w	80077b0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	60fb      	str	r3, [r7, #12]
 800769a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d04e      	beq.n	8007748 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80076b4:	8a3b      	ldrh	r3, [r7, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 8098 	beq.w	80077ec <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076c0:	8a3a      	ldrh	r2, [r7, #16]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	f080 8092 	bcs.w	80077ec <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8a3a      	ldrh	r2, [r7, #16]
 80076cc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	2b20      	cmp	r3, #32
 80076d6:	d02b      	beq.n	8007730 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68da      	ldr	r2, [r3, #12]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076e6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695a      	ldr	r2, [r3, #20]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0201 	bic.w	r2, r2, #1
 80076f6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	695a      	ldr	r2, [r3, #20]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007706:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2220      	movs	r2, #32
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0210 	bic.w	r2, r2, #16
 8007724:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	4618      	mov	r0, r3
 800772c:	f7fd f95b 	bl	80049e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007738:	b29b      	uxth	r3, r3
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	b29b      	uxth	r3, r3
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f86d 	bl	8007820 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007746:	e051      	b.n	80077ec <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007750:	b29b      	uxth	r3, r3
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d047      	beq.n	80077f0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007760:	8a7b      	ldrh	r3, [r7, #18]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d044      	beq.n	80077f0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007774:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	695a      	ldr	r2, [r3, #20]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0201 	bic.w	r2, r2, #1
 8007784:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2220      	movs	r2, #32
 800778a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0210 	bic.w	r2, r2, #16
 80077a2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077a4:	8a7b      	ldrh	r3, [r7, #18]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f839 	bl	8007820 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80077ae:	e01f      	b.n	80077f0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d008      	beq.n	80077cc <HAL_UART_IRQHandler+0x324>
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f8f9 	bl	80079bc <UART_Transmit_IT>
    return;
 80077ca:	e012      	b.n	80077f2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00d      	beq.n	80077f2 <HAL_UART_IRQHandler+0x34a>
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d008      	beq.n	80077f2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f93a 	bl	8007a5a <UART_EndTransmit_IT>
    return;
 80077e6:	e004      	b.n	80077f2 <HAL_UART_IRQHandler+0x34a>
    return;
 80077e8:	bf00      	nop
 80077ea:	e002      	b.n	80077f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80077ec:	bf00      	nop
 80077ee:	e000      	b.n	80077f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80077f0:	bf00      	nop
  }
}
 80077f2:	3728      	adds	r7, #40	; 0x28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	08007995 	.word	0x08007995

080077fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	bc80      	pop	{r7}
 800780c:	4770      	bx	lr

0800780e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr

08007820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	bc80      	pop	{r7}
 8007834:	4770      	bx	lr

08007836 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	60f8      	str	r0, [r7, #12]
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	603b      	str	r3, [r7, #0]
 8007842:	4613      	mov	r3, r2
 8007844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007846:	e02c      	b.n	80078a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784e:	d028      	beq.n	80078a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d007      	beq.n	8007866 <UART_WaitOnFlagUntilTimeout+0x30>
 8007856:	f7fc ffaf 	bl	80047b8 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	429a      	cmp	r2, r3
 8007864:	d21d      	bcs.n	80078a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007874:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0201 	bic.w	r2, r2, #1
 8007884:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2220      	movs	r2, #32
 800788a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2220      	movs	r2, #32
 8007892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e00f      	b.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	4013      	ands	r3, r2
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	bf0c      	ite	eq
 80078b2:	2301      	moveq	r3, #1
 80078b4:	2300      	movne	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d0c3      	beq.n	8007848 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b085      	sub	sp, #20
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	60b9      	str	r1, [r7, #8]
 80078d4:	4613      	mov	r3, r2
 80078d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	88fa      	ldrh	r2, [r7, #6]
 80078e2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2222      	movs	r2, #34	; 0x22
 80078f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800790e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	695a      	ldr	r2, [r3, #20]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 0201 	orr.w	r2, r2, #1
 800791e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0220 	orr.w	r2, r2, #32
 800792e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	bc80      	pop	{r7}
 800793a:	4770      	bx	lr

0800793c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007952:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695a      	ldr	r2, [r3, #20]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0201 	bic.w	r2, r2, #1
 8007962:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	2b01      	cmp	r3, #1
 800796a:	d107      	bne.n	800797c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0210 	bic.w	r2, r2, #16
 800797a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	631a      	str	r2, [r3, #48]	; 0x30
}
 800798a:	bf00      	nop
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	bc80      	pop	{r7}
 8007992:	4770      	bx	lr

08007994 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f7ff ff2d 	bl	800780e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079b4:	bf00      	nop
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b21      	cmp	r3, #33	; 0x21
 80079ce:	d13e      	bne.n	8007a4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d8:	d114      	bne.n	8007a04 <UART_Transmit_IT+0x48>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d110      	bne.n	8007a04 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	1c9a      	adds	r2, r3, #2
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	621a      	str	r2, [r3, #32]
 8007a02:	e008      	b.n	8007a16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	1c59      	adds	r1, r3, #1
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6211      	str	r1, [r2, #32]
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	4619      	mov	r1, r3
 8007a24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10f      	bne.n	8007a4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68da      	ldr	r2, [r3, #12]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e000      	b.n	8007a50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a4e:	2302      	movs	r3, #2
  }
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr

08007a5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff febe 	bl	80077fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b086      	sub	sp, #24
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b22      	cmp	r3, #34	; 0x22
 8007a9c:	f040 8099 	bne.w	8007bd2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa8:	d117      	bne.n	8007ada <UART_Receive_IT+0x50>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d113      	bne.n	8007ada <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	1c9a      	adds	r2, r3, #2
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ad8:	e026      	b.n	8007b28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ade:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aec:	d007      	beq.n	8007afe <UART_Receive_IT+0x74>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <UART_Receive_IT+0x82>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d106      	bne.n	8007b0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	701a      	strb	r2, [r3, #0]
 8007b0a:	e008      	b.n	8007b1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	4619      	mov	r1, r3
 8007b36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d148      	bne.n	8007bce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0220 	bic.w	r2, r2, #32
 8007b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695a      	ldr	r2, [r3, #20]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0201 	bic.w	r2, r2, #1
 8007b6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d123      	bne.n	8007bc4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0210 	bic.w	r2, r2, #16
 8007b90:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b10      	cmp	r3, #16
 8007b9e:	d10a      	bne.n	8007bb6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff fe2f 	bl	8007820 <HAL_UARTEx_RxEventCallback>
 8007bc2:	e002      	b.n	8007bca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7fb f8b5 	bl	8002d34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e002      	b.n	8007bd4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e000      	b.n	8007bd4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007bd2:	2302      	movs	r3, #2
  }
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689a      	ldr	r2, [r3, #8]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	431a      	orrs	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007c16:	f023 030c 	bic.w	r3, r3, #12
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6812      	ldr	r2, [r2, #0]
 8007c1e:	68b9      	ldr	r1, [r7, #8]
 8007c20:	430b      	orrs	r3, r1
 8007c22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	699a      	ldr	r2, [r3, #24]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a2c      	ldr	r2, [pc, #176]	; (8007cf0 <UART_SetConfig+0x114>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d103      	bne.n	8007c4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007c44:	f7fd fda6 	bl	8005794 <HAL_RCC_GetPCLK2Freq>
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	e002      	b.n	8007c52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c4c:	f7fd fd8e 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8007c50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009a      	lsls	r2, r3, #2
 8007c5c:	441a      	add	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c68:	4a22      	ldr	r2, [pc, #136]	; (8007cf4 <UART_SetConfig+0x118>)
 8007c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	0119      	lsls	r1, r3, #4
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4613      	mov	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	009a      	lsls	r2, r3, #2
 8007c7c:	441a      	add	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c88:	4b1a      	ldr	r3, [pc, #104]	; (8007cf4 <UART_SetConfig+0x118>)
 8007c8a:	fba3 0302 	umull	r0, r3, r3, r2
 8007c8e:	095b      	lsrs	r3, r3, #5
 8007c90:	2064      	movs	r0, #100	; 0x64
 8007c92:	fb00 f303 	mul.w	r3, r0, r3
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	3332      	adds	r3, #50	; 0x32
 8007c9c:	4a15      	ldr	r2, [pc, #84]	; (8007cf4 <UART_SetConfig+0x118>)
 8007c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca2:	095b      	lsrs	r3, r3, #5
 8007ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ca8:	4419      	add	r1, r3
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4613      	mov	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009a      	lsls	r2, r3, #2
 8007cb4:	441a      	add	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cc0:	4b0c      	ldr	r3, [pc, #48]	; (8007cf4 <UART_SetConfig+0x118>)
 8007cc2:	fba3 0302 	umull	r0, r3, r3, r2
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	2064      	movs	r0, #100	; 0x64
 8007cca:	fb00 f303 	mul.w	r3, r0, r3
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	3332      	adds	r3, #50	; 0x32
 8007cd4:	4a07      	ldr	r2, [pc, #28]	; (8007cf4 <UART_SetConfig+0x118>)
 8007cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	f003 020f 	and.w	r2, r3, #15
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	440a      	add	r2, r1
 8007ce6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007ce8:	bf00      	nop
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	40013800 	.word	0x40013800
 8007cf4:	51eb851f 	.word	0x51eb851f

08007cf8 <__libc_init_array>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	2600      	movs	r6, #0
 8007cfc:	4d0c      	ldr	r5, [pc, #48]	; (8007d30 <__libc_init_array+0x38>)
 8007cfe:	4c0d      	ldr	r4, [pc, #52]	; (8007d34 <__libc_init_array+0x3c>)
 8007d00:	1b64      	subs	r4, r4, r5
 8007d02:	10a4      	asrs	r4, r4, #2
 8007d04:	42a6      	cmp	r6, r4
 8007d06:	d109      	bne.n	8007d1c <__libc_init_array+0x24>
 8007d08:	f000 f822 	bl	8007d50 <_init>
 8007d0c:	2600      	movs	r6, #0
 8007d0e:	4d0a      	ldr	r5, [pc, #40]	; (8007d38 <__libc_init_array+0x40>)
 8007d10:	4c0a      	ldr	r4, [pc, #40]	; (8007d3c <__libc_init_array+0x44>)
 8007d12:	1b64      	subs	r4, r4, r5
 8007d14:	10a4      	asrs	r4, r4, #2
 8007d16:	42a6      	cmp	r6, r4
 8007d18:	d105      	bne.n	8007d26 <__libc_init_array+0x2e>
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d20:	4798      	blx	r3
 8007d22:	3601      	adds	r6, #1
 8007d24:	e7ee      	b.n	8007d04 <__libc_init_array+0xc>
 8007d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d2a:	4798      	blx	r3
 8007d2c:	3601      	adds	r6, #1
 8007d2e:	e7f2      	b.n	8007d16 <__libc_init_array+0x1e>
 8007d30:	08007d9c 	.word	0x08007d9c
 8007d34:	08007d9c 	.word	0x08007d9c
 8007d38:	08007d9c 	.word	0x08007d9c
 8007d3c:	08007da0 	.word	0x08007da0

08007d40 <memset>:
 8007d40:	4603      	mov	r3, r0
 8007d42:	4402      	add	r2, r0
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d100      	bne.n	8007d4a <memset+0xa>
 8007d48:	4770      	bx	lr
 8007d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4e:	e7f9      	b.n	8007d44 <memset+0x4>

08007d50 <_init>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr

08007d5c <_fini>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	bf00      	nop
 8007d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d62:	bc08      	pop	{r3}
 8007d64:	469e      	mov	lr, r3
 8007d66:	4770      	bx	lr

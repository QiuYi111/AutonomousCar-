
autoCAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005670  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080057f8  080057f8  000067f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005828  08005828  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005828  08005828  00006828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005830  08005830  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005830  08005830  00006830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005834  08005834  00006834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005838  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          00000400  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000414  20000414  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fdcc  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271e  00000000  00000000  00016e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00019530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a7f  00000000  00000000  0001a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a55  00000000  00000000  0001ad37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011987  00000000  00000000  0003c78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb391  00000000  00000000  0004e113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001194a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003704  00000000  00000000  001194e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0011cbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080057e0 	.word	0x080057e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080057e0 	.word	0x080057e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <uint8_to_float>:

}


// Function to convert uint8_t array to float
float uint8_to_float(uint8_t* u8arry, int point_length) {
 80004b8:	b480      	push	{r7}
 80004ba:	b08b      	sub	sp, #44	@ 0x2c
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
	int points = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	627b      	str	r3, [r7, #36]	@ 0x24
	int status = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	623b      	str	r3, [r7, #32]
	int num_length = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61fb      	str	r3, [r7, #28]
	float number = 0;
 80004ce:	f04f 0300 	mov.w	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
	for (; num_length < 256; num_length++) {
 80004d4:	e013      	b.n	80004fe <uint8_to_float+0x46>
		if (u8arry[num_length] == '.') {
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4413      	add	r3, r2
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b2e      	cmp	r3, #46	@ 0x2e
 80004e0:	d101      	bne.n	80004e6 <uint8_to_float+0x2e>
			points = num_length;
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (u8arry[num_length] == 'o') {
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	4413      	add	r3, r2
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b6f      	cmp	r3, #111	@ 0x6f
 80004f0:	d102      	bne.n	80004f8 <uint8_to_float+0x40>
			status = num_length;
 80004f2:	69fb      	ldr	r3, [r7, #28]
 80004f4:	623b      	str	r3, [r7, #32]
			break;
 80004f6:	e005      	b.n	8000504 <uint8_to_float+0x4c>
	for (; num_length < 256; num_length++) {
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	3301      	adds	r3, #1
 80004fc:	61fb      	str	r3, [r7, #28]
 80004fe:	69fb      	ldr	r3, [r7, #28]
 8000500:	2bff      	cmp	r3, #255	@ 0xff
 8000502:	dde8      	ble.n	80004d6 <uint8_to_float+0x1e>
		}
	}
	if (status == 0) {
 8000504:	6a3b      	ldr	r3, [r7, #32]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d101      	bne.n	800050e <uint8_to_float+0x56>
		return -1;
 800050a:	4b47      	ldr	r3, [pc, #284]	@ (8000628 <uint8_to_float+0x170>)
 800050c:	e083      	b.n	8000616 <uint8_to_float+0x15e>
	}
	else {
		float tens = 1;
 800050e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000512:	617b      	str	r3, [r7, #20]

		if (points == 0) {
 8000514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000516:	2b00      	cmp	r3, #0
 8000518:	d121      	bne.n	800055e <uint8_to_float+0xa6>
			for (size_t i= 0; i < num_length; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	e019      	b.n	8000554 <uint8_to_float+0x9c>
			number += (float)(u8arry[i] - '0');
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	3b30      	subs	r3, #48	@ 0x30
 800052a:	ee07 3a90 	vmov	s15, r3
 800052e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000532:	ed97 7a06 	vldr	s14, [r7, #24]
 8000536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800053a:	edc7 7a06 	vstr	s15, [r7, #24]
			number *= 10;
 800053e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000542:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800054a:	edc7 7a06 	vstr	s15, [r7, #24]
			for (size_t i= 0; i < num_length; i++) {
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	3301      	adds	r3, #1
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	693a      	ldr	r2, [r7, #16]
 8000558:	429a      	cmp	r2, r3
 800055a:	d3e1      	bcc.n	8000520 <uint8_to_float+0x68>
 800055c:	e04f      	b.n	80005fe <uint8_to_float+0x146>
		}
			}
			else {
				for (int i = 0; i <= points + point_length; i++) {
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	e046      	b.n	80005f2 <uint8_to_float+0x13a>
				if (i < points) {
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000568:	429a      	cmp	r2, r3
 800056a:	da17      	bge.n	800059c <uint8_to_float+0xe4>
					number += (float)(u8arry[i] - '0');
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	3b30      	subs	r3, #48	@ 0x30
 8000576:	ee07 3a90 	vmov	s15, r3
 800057a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800057e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000586:	edc7 7a06 	vstr	s15, [r7, #24]
					number *= 10;
 800058a:	edd7 7a06 	vldr	s15, [r7, #24]
 800058e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000596:	edc7 7a06 	vstr	s15, [r7, #24]
 800059a:	e027      	b.n	80005ec <uint8_to_float+0x134>
				}
				else if (i > points) {
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005a0:	429a      	cmp	r2, r3
 80005a2:	dd1b      	ble.n	80005dc <uint8_to_float+0x124>
					tens /= 10;
 80005a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80005a8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80005ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005b0:	edc7 7a05 	vstr	s15, [r7, #20]
					number += ((float)(u8arry[i] - '0')) * tens;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	3b30      	subs	r3, #48	@ 0x30
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80005ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80005d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005d6:	edc7 7a06 	vstr	s15, [r7, #24]
 80005da:	e007      	b.n	80005ec <uint8_to_float+0x134>
				}
				else {
					number /= 10;
 80005dc:	ed97 7a06 	vldr	s14, [r7, #24]
 80005e0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80005e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005e8:	edc7 7a06 	vstr	s15, [r7, #24]
				for (int i = 0; i <= points + point_length; i++) {
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3301      	adds	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	4413      	add	r3, r2
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	ddb2      	ble.n	8000564 <uint8_to_float+0xac>
				}
				}
			}

		if (points == 0) {
 80005fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000600:	2b00      	cmp	r3, #0
 8000602:	d107      	bne.n	8000614 <uint8_to_float+0x15c>
			number /= 10;
 8000604:	ed97 7a06 	vldr	s14, [r7, #24]
 8000608:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800060c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000610:	edc7 7a06 	vstr	s15, [r7, #24]
		}
		return number;
 8000614:	69bb      	ldr	r3, [r7, #24]
	}

}
 8000616:	ee07 3a90 	vmov	s15, r3
 800061a:	eeb0 0a67 	vmov.f32	s0, s15
 800061e:	372c      	adds	r7, #44	@ 0x2c
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	bf800000 	.word	0xbf800000

0800062c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	 if (htim==&htim7){
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a12      	ldr	r2, [pc, #72]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d11d      	bne.n	8000678 <HAL_TIM_PeriodElapsedCallback+0x4c>
		 setLeftRpm(rpmLeft);
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800063e:	edd3 7a00 	vldr	s15, [r3]
 8000642:	eeb0 0a67 	vmov.f32	s0, s15
 8000646:	f000 f9f7 	bl	8000a38 <setLeftRpm>
		 setRightRpm(rpmRight);
 800064a:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800064c:	edd3 7a00 	vldr	s15, [r3]
 8000650:	eeb0 0a67 	vmov.f32	s0, s15
 8000654:	f000 fa18 	bl	8000a88 <setRightRpm>

		 currentLeft=getRpm(&htim2);
 8000658:	480c      	ldr	r0, [pc, #48]	@ (800068c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800065a:	f000 fafd 	bl	8000c58 <getRpm>
 800065e:	eef0 7a40 	vmov.f32	s15, s0
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000664:	edc3 7a00 	vstr	s15, [r3]
		currentRight=getRpm(&htim4);
 8000668:	480a      	ldr	r0, [pc, #40]	@ (8000694 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800066a:	f000 faf5 	bl	8000c58 <getRpm>
 800066e:	eef0 7a40 	vmov.f32	s15, s0
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000674:	edc3 7a00 	vstr	s15, [r3]
	}

}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200001b8 	.word	0x200001b8
 8000684:	2000003c 	.word	0x2000003c
 8000688:	20000038 	.word	0x20000038
 800068c:	200000e0 	.word	0x200000e0
 8000690:	20000030 	.word	0x20000030
 8000694:	20000128 	.word	0x20000128
 8000698:	20000034 	.word	0x20000034

0800069c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){//需要在main里启动接收函数
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b087      	sub	sp, #28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	807b      	strh	r3, [r7, #2]
	if(huart==&huart5){
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a44      	ldr	r2, [pc, #272]	@ (80007bc <HAL_UARTEx_RxEventCallback+0x120>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d17b      	bne.n	80007a8 <HAL_UARTEx_RxEventCallback+0x10c>
		if (rxData[0]=='w'||rxData[0]=='s'||rxData[0]=='b'||rxData[0]=='a'){//数据形式应该是“w1000”这样的
 80006b0:	4b43      	ldr	r3, [pc, #268]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x124>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b77      	cmp	r3, #119	@ 0x77
 80006b6:	d00b      	beq.n	80006d0 <HAL_UARTEx_RxEventCallback+0x34>
 80006b8:	4b41      	ldr	r3, [pc, #260]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x124>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b73      	cmp	r3, #115	@ 0x73
 80006be:	d007      	beq.n	80006d0 <HAL_UARTEx_RxEventCallback+0x34>
 80006c0:	4b3f      	ldr	r3, [pc, #252]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x124>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b62      	cmp	r3, #98	@ 0x62
 80006c6:	d003      	beq.n	80006d0 <HAL_UARTEx_RxEventCallback+0x34>
 80006c8:	4b3d      	ldr	r3, [pc, #244]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x124>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b61      	cmp	r3, #97	@ 0x61
 80006ce:	d119      	bne.n	8000704 <HAL_UARTEx_RxEventCallback+0x68>
		setDirection(rxData[0]);
 80006d0:	4b3b      	ldr	r3, [pc, #236]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x124>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fb1b 	bl	8000d10 <setDirection>
		rpmLeft=uint8_to_float(rxData+1,0);
 80006da:	4b3a      	ldr	r3, [pc, #232]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x128>)
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff feea 	bl	80004b8 <uint8_to_float>
 80006e4:	eef0 7a40 	vmov.f32	s15, s0
 80006e8:	4b37      	ldr	r3, [pc, #220]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x12c>)
 80006ea:	edc3 7a00 	vstr	s15, [r3]
		rpmRight=uint8_to_float(rxData+1,0);
 80006ee:	4b35      	ldr	r3, [pc, #212]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x128>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fee0 	bl	80004b8 <uint8_to_float>
 80006f8:	eef0 7a40 	vmov.f32	s15, s0
 80006fc:	4b33      	ldr	r3, [pc, #204]	@ (80007cc <HAL_UARTEx_RxEventCallback+0x130>)
 80006fe:	edc3 7a00 	vstr	s15, [r3]
 8000702:	e044      	b.n	800078e <HAL_UARTEx_RxEventCallback+0xf2>
		}else if (rxData[0]=='p'){//数据形式应该是"p0.5"这样的
 8000704:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x124>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b70      	cmp	r3, #112	@ 0x70
 800070a:	d10a      	bne.n	8000722 <HAL_UARTEx_RxEventCallback+0x86>
			kp=uint8_to_float(rxData+1,2);
 800070c:	4b2d      	ldr	r3, [pc, #180]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x128>)
 800070e:	2102      	movs	r1, #2
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fed1 	bl	80004b8 <uint8_to_float>
 8000716:	eef0 7a40 	vmov.f32	s15, s0
 800071a:	4b2d      	ldr	r3, [pc, #180]	@ (80007d0 <HAL_UARTEx_RxEventCallback+0x134>)
 800071c:	edc3 7a00 	vstr	s15, [r3]
 8000720:	e035      	b.n	800078e <HAL_UARTEx_RxEventCallback+0xf2>
		}else if (rxData[0]=='i'){
 8000722:	4b27      	ldr	r3, [pc, #156]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x124>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b69      	cmp	r3, #105	@ 0x69
 8000728:	d10a      	bne.n	8000740 <HAL_UARTEx_RxEventCallback+0xa4>
			ki=uint8_to_float(rxData+1,2);
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x128>)
 800072c:	2102      	movs	r1, #2
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fec2 	bl	80004b8 <uint8_to_float>
 8000734:	eef0 7a40 	vmov.f32	s15, s0
 8000738:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <HAL_UARTEx_RxEventCallback+0x138>)
 800073a:	edc3 7a00 	vstr	s15, [r3]
 800073e:	e026      	b.n	800078e <HAL_UARTEx_RxEventCallback+0xf2>
		}else if (rxData[0]=='d'){
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x124>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b64      	cmp	r3, #100	@ 0x64
 8000746:	d10a      	bne.n	800075e <HAL_UARTEx_RxEventCallback+0xc2>
			kd=uint8_to_float(rxData+1,2);
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x128>)
 800074a:	2102      	movs	r1, #2
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff feb3 	bl	80004b8 <uint8_to_float>
 8000752:	eef0 7a40 	vmov.f32	s15, s0
 8000756:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000758:	edc3 7a00 	vstr	s15, [r3]
 800075c:	e017      	b.n	800078e <HAL_UARTEx_RxEventCallback+0xf2>
		}else if (rxData[0]=='q'){
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x124>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b71      	cmp	r3, #113	@ 0x71
 8000764:	d113      	bne.n	800078e <HAL_UARTEx_RxEventCallback+0xf2>
			HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2102      	movs	r1, #2
 800076a:	481c      	ldr	r0, [pc, #112]	@ (80007dc <HAL_UARTEx_RxEventCallback+0x140>)
 800076c:	f002 f874 	bl	8002858 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2104      	movs	r1, #4
 8000774:	4819      	ldr	r0, [pc, #100]	@ (80007dc <HAL_UARTEx_RxEventCallback+0x140>)
 8000776:	f002 f86f 	bl	8002858 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2108      	movs	r1, #8
 800077e:	4817      	ldr	r0, [pc, #92]	@ (80007dc <HAL_UARTEx_RxEventCallback+0x140>)
 8000780:	f002 f86a 	bl	8002858 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2110      	movs	r1, #16
 8000788:	4814      	ldr	r0, [pc, #80]	@ (80007dc <HAL_UARTEx_RxEventCallback+0x140>)
 800078a:	f002 f865 	bl	8002858 <HAL_GPIO_WritePin>
		}
		uint8_t message[]="Order Received!";
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000790:	f107 0408 	add.w	r4, r7, #8
 8000794:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000796:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		//float_to_uint8_arry(message,pulseLeft,0);
		//float_to_uint8_arry(message+4,pulseRight,0);
		HAL_UART_Transmit_IT(&huart5, message, sizeof message);
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2210      	movs	r2, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	@ (80007bc <HAL_UARTEx_RxEventCallback+0x120>)
 80007a4:	f003 fed0 	bl	8004548 <HAL_UART_Transmit_IT>
	}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxData, sizeof rxData);
 80007a8:	2232      	movs	r2, #50	@ 0x32
 80007aa:	4905      	ldr	r1, [pc, #20]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x124>)
 80007ac:	4803      	ldr	r0, [pc, #12]	@ (80007bc <HAL_UARTEx_RxEventCallback+0x120>)
 80007ae:	f003 ff01 	bl	80045b4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80007b2:	bf00      	nop
 80007b4:	371c      	adds	r7, #28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd90      	pop	{r4, r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000248 	.word	0x20000248
 80007c0:	20000040 	.word	0x20000040
 80007c4:	20000041 	.word	0x20000041
 80007c8:	2000003c 	.word	0x2000003c
 80007cc:	20000038 	.word	0x20000038
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000074 	.word	0x20000074
 80007d8:	20000004 	.word	0x20000004
 80007dc:	40021000 	.word	0x40021000
 80007e0:	080057f8 	.word	0x080057f8

080007e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <MX_DMA_Init+0x6c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a17      	ldr	r2, [pc, #92]	@ (8000850 <MX_DMA_Init+0x6c>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_DMA_Init+0x6c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	200b      	movs	r0, #11
 800080c:	f001 fa4f 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000810:	200b      	movs	r0, #11
 8000812:	f001 fa68 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	200d      	movs	r0, #13
 800081c:	f001 fa47 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000820:	200d      	movs	r0, #13
 8000822:	f001 fa60 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	200f      	movs	r0, #15
 800082c:	f001 fa3f 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000830:	200f      	movs	r0, #15
 8000832:	f001 fa58 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	202f      	movs	r0, #47	@ 0x2f
 800083c:	f001 fa37 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000840:	202f      	movs	r0, #47	@ 0x2f
 8000842:	f001 fa50 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b26      	ldr	r3, [pc, #152]	@ (8000908 <MX_GPIO_Init+0xb4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a25      	ldr	r2, [pc, #148]	@ (8000908 <MX_GPIO_Init+0xb4>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <MX_GPIO_Init+0xb4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <MX_GPIO_Init+0xb4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a1e      	ldr	r2, [pc, #120]	@ (8000908 <MX_GPIO_Init+0xb4>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_GPIO_Init+0xb4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_GPIO_Init+0xb4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <MX_GPIO_Init+0xb4>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_GPIO_Init+0xb4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_GPIO_Init+0xb4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a10      	ldr	r2, [pc, #64]	@ (8000908 <MX_GPIO_Init+0xb4>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_GPIO_Init+0xb4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN2_Pin|IN3_Pin|IN4_Pin|IN1_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	211e      	movs	r1, #30
 80008de:	480b      	ldr	r0, [pc, #44]	@ (800090c <MX_GPIO_Init+0xb8>)
 80008e0:	f001 ffba 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = IN2_Pin|IN3_Pin|IN4_Pin|IN1_Pin;
 80008e4:	231e      	movs	r3, #30
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4804      	ldr	r0, [pc, #16]	@ (800090c <MX_GPIO_Init+0xb8>)
 80008fc:	f001 fe10 	bl	8002520 <HAL_GPIO_Init>

}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	@ 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40021000 	.word	0x40021000

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f001 f87e 	bl	8001a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f820 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f7ff ff9a 	bl	8000854 <MX_GPIO_Init>
  MX_DMA_Init();
 8000920:	f7ff ff60 	bl	80007e4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000924:	f000 fbc6 	bl	80010b4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000928:	f000 fc18 	bl	800115c <MX_TIM4_Init>
  MX_TIM5_Init();
 800092c:	f000 fc6a 	bl	8001204 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000930:	f000 fb08 	bl	8000f44 <MX_TIM1_Init>
  MX_UART5_Init();
 8000934:	f000 fe9e 	bl	8001674 <MX_UART5_Init>
  MX_UART4_Init();
 8000938:	f000 fe72 	bl	8001620 <MX_UART4_Init>
  MX_TIM7_Init();
 800093c:	f000 fce2 	bl	8001304 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  timersInit();
 8000940:	f000 fe48 	bl	80015d4 <timersInit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxData, sizeof rxData);
 8000944:	2232      	movs	r2, #50	@ 0x32
 8000946:	4903      	ldr	r1, [pc, #12]	@ (8000954 <main+0x44>)
 8000948:	4803      	ldr	r0, [pc, #12]	@ (8000958 <main+0x48>)
 800094a:	f003 fe33 	bl	80045b4 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800094e:	bf00      	nop
 8000950:	e7fd      	b.n	800094e <main+0x3e>
 8000952:	bf00      	nop
 8000954:	20000040 	.word	0x20000040
 8000958:	20000248 	.word	0x20000248

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b094      	sub	sp, #80	@ 0x50
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	2230      	movs	r2, #48	@ 0x30
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f004 ff0c 	bl	8005788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	4b27      	ldr	r3, [pc, #156]	@ (8000a24 <SystemClock_Config+0xc8>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000988:	4a26      	ldr	r2, [pc, #152]	@ (8000a24 <SystemClock_Config+0xc8>)
 800098a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000990:	4b24      	ldr	r3, [pc, #144]	@ (8000a24 <SystemClock_Config+0xc8>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <SystemClock_Config+0xcc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a20      	ldr	r2, [pc, #128]	@ (8000a28 <SystemClock_Config+0xcc>)
 80009a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <SystemClock_Config+0xcc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b8:	2302      	movs	r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009bc:	2301      	movs	r3, #1
 80009be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c0:	2310      	movs	r3, #16
 80009c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c8:	2300      	movs	r3, #0
 80009ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009cc:	2308      	movs	r3, #8
 80009ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009d0:	2348      	movs	r3, #72	@ 0x48
 80009d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0320 	add.w	r3, r7, #32
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 ff53 	bl	800288c <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009ec:	f000 f81e 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	230f      	movs	r3, #15
 80009f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f4:	2302      	movs	r3, #2
 80009f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 f9b5 	bl	8002d7c <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a18:	f000 f808 	bl	8000a2c <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3750      	adds	r7, #80	@ 0x50
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40007000 	.word	0x40007000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <setLeftRpm>:
 */
#include "motor.h"

float kp=0.8,ki=0,kd=0.5;int pulseLeft=0;int pulseRight=0;
float leftError=0,rightError=0;float error_last_left = 0,error_before_left= 0;float error_last_right = 0,error_before_right = 0;
void setLeftRpm(float rpm){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	ed87 0a01 	vstr	s0, [r7, #4]
	float currentRpm=getRpm(&htim2);
 8000a42:	480e      	ldr	r0, [pc, #56]	@ (8000a7c <setLeftRpm+0x44>)
 8000a44:	f000 f908 	bl	8000c58 <getRpm>
 8000a48:	ed87 0a03 	vstr	s0, [r7, #12]
	pulseLeft+=pidDiffLeft(rpm, currentRpm, &leftError);
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <setLeftRpm+0x48>)
 8000a4e:	edd7 0a03 	vldr	s1, [r7, #12]
 8000a52:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a56:	f000 f83f 	bl	8000ad8 <pidDiffLeft>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <setLeftRpm+0x4c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <setLeftRpm+0x4c>)
 8000a64:	6013      	str	r3, [r2, #0]
	setPWM(pulseLeft,TIM_CHANNEL_3);
 8000a66:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <setLeftRpm+0x4c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f919 	bl	8000ca4 <setPWM>
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000e0 	.word	0x200000e0
 8000a80:	20000080 	.word	0x20000080
 8000a84:	20000078 	.word	0x20000078

08000a88 <setRightRpm>:
void setRightRpm(float rpm){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	ed87 0a01 	vstr	s0, [r7, #4]
	float currentRpm=getRpm(&htim4);
 8000a92:	480e      	ldr	r0, [pc, #56]	@ (8000acc <setRightRpm+0x44>)
 8000a94:	f000 f8e0 	bl	8000c58 <getRpm>
 8000a98:	ed87 0a03 	vstr	s0, [r7, #12]
	pulseRight+=pidDiffRight(rpm, currentRpm, &rightError);
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <setRightRpm+0x48>)
 8000a9e:	edd7 0a03 	vldr	s1, [r7, #12]
 8000aa2:	ed97 0a01 	vldr	s0, [r7, #4]
 8000aa6:	f000 f877 	bl	8000b98 <pidDiffRight>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <setRightRpm+0x4c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a08      	ldr	r2, [pc, #32]	@ (8000ad4 <setRightRpm+0x4c>)
 8000ab4:	6013      	str	r3, [r2, #0]
	setPWM(pulseRight,TIM_CHANNEL_4);
 8000ab6:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <setRightRpm+0x4c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	210c      	movs	r1, #12
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f8f1 	bl	8000ca4 <setPWM>
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000128 	.word	0x20000128
 8000ad0:	20000084 	.word	0x20000084
 8000ad4:	2000007c 	.word	0x2000007c

08000ad8 <pidDiffLeft>:
void setPID(char factor,float index){
	if (factor=='p'){kp=index;}
	else if (factor=='i'){ki=index;}
	else if (factor=='d'){kd=index;};
}
int pidDiffLeft(float target,float present,float * erro){
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ae2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ae6:	6078      	str	r0, [r7, #4]
	float error = target - present;
 8000ae8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000aec:	edd7 7a02 	vldr	s15, [r7, #8]
 8000af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000af4:	edc7 7a05 	vstr	s15, [r7, #20]

		float pwm_pid=0;
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
		*erro = error;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	601a      	str	r2, [r3, #0]
		pwm_pid = kp*(error- error_last_left)+ki* error
 8000b04:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <pidDiffLeft+0xac>)
 8000b06:	edd3 7a00 	vldr	s15, [r3]
 8000b0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000b0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <pidDiffLeft+0xb0>)
 8000b14:	edd3 7a00 	vldr	s15, [r3]
 8000b18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <pidDiffLeft+0xb4>)
 8000b1e:	edd3 6a00 	vldr	s13, [r3]
 8000b22:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b2a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+kd*( error-2* error_last_left+ error_before_left);
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <pidDiffLeft+0xac>)
 8000b30:	edd3 7a00 	vldr	s15, [r3]
 8000b34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000b38:	edd7 6a05 	vldr	s13, [r7, #20]
 8000b3c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <pidDiffLeft+0xb8>)
 8000b42:	edd3 7a00 	vldr	s15, [r3]
 8000b46:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000b4a:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <pidDiffLeft+0xbc>)
 8000b4c:	edd3 7a00 	vldr	s15, [r3]
 8000b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
		pwm_pid = kp*(error- error_last_left)+ki* error
 8000b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b58:	edc7 7a04 	vstr	s15, [r7, #16]
		 error_before_left =  error_last_left;	  	    // 保存上上次误差
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <pidDiffLeft+0xac>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <pidDiffLeft+0xb8>)
 8000b62:	6013      	str	r3, [r2, #0]
		 error_last_left =  error;	              // 保存上次偏差
 8000b64:	4a07      	ldr	r2, [pc, #28]	@ (8000b84 <pidDiffLeft+0xac>)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	6013      	str	r3, [r2, #0]
		 return (int)pwm_pid;
 8000b6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b72:	ee17 3a90 	vmov	r3, s15
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	371c      	adds	r7, #28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000088 	.word	0x20000088
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000074 	.word	0x20000074
 8000b90:	2000008c 	.word	0x2000008c
 8000b94:	20000004 	.word	0x20000004

08000b98 <pidDiffRight>:
int pidDiffRight(float target,float present,float * erro){
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ba2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ba6:	6078      	str	r0, [r7, #4]
	float error = target - present;
 8000ba8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bac:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bb4:	edc7 7a05 	vstr	s15, [r7, #20]

		float pwm_pid=0;
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
		*erro = error;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	601a      	str	r2, [r3, #0]
		pwm_pid = kp*(error- error_last_right)+ki* error
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c44 <pidDiffRight+0xac>)
 8000bc6:	edd3 7a00 	vldr	s15, [r3]
 8000bca:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <pidDiffRight+0xb0>)
 8000bd4:	edd3 7a00 	vldr	s15, [r3]
 8000bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <pidDiffRight+0xb4>)
 8000bde:	edd3 6a00 	vldr	s13, [r3]
 8000be2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bea:	ee37 7a27 	vadd.f32	s14, s14, s15
				+kd*( error-2* error_last_right+ error_before_right);
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <pidDiffRight+0xac>)
 8000bf0:	edd3 7a00 	vldr	s15, [r3]
 8000bf4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000bf8:	edd7 6a05 	vldr	s13, [r7, #20]
 8000bfc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <pidDiffRight+0xb8>)
 8000c02:	edd3 7a00 	vldr	s15, [r3]
 8000c06:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c0a:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <pidDiffRight+0xbc>)
 8000c0c:	edd3 7a00 	vldr	s15, [r3]
 8000c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
		pwm_pid = kp*(error- error_last_right)+ki* error
 8000c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c18:	edc7 7a04 	vstr	s15, [r7, #16]
		 error_before_right =  error_last_right;	  	    // 保存上上次误差
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <pidDiffRight+0xac>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0b      	ldr	r2, [pc, #44]	@ (8000c50 <pidDiffRight+0xb8>)
 8000c22:	6013      	str	r3, [r2, #0]
		 error_last_right =  error;	              // 保存上次偏差
 8000c24:	4a07      	ldr	r2, [pc, #28]	@ (8000c44 <pidDiffRight+0xac>)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	6013      	str	r3, [r2, #0]
		 return (int)pwm_pid;
 8000c2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c32:	ee17 3a90 	vmov	r3, s15
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	371c      	adds	r7, #28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000090 	.word	0x20000090
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000074 	.word	0x20000074
 8000c50:	20000094 	.word	0x20000094
 8000c54:	20000004 	.word	0x20000004

08000c58 <getRpm>:
float getRpm(TIM_HandleTypeDef * htim){
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	uint16_t countnum =__HAL_TIM_GET_COUNTER(htim);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c66:	81fb      	strh	r3, [r7, #14]
	float rpm;
	rpm = (4*countnum)/3;//读取编码器数�????
 8000c68:	89fb      	ldrh	r3, [r7, #14]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca0 <getRpm+0x48>)
 8000c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c72:	17db      	asrs	r3, r3, #31
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	ee07 3a90 	vmov	s15, r3
 8000c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c7e:	edc7 7a02 	vstr	s15, [r7, #8]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	@ 0x24
	return rpm;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	ee07 3a90 	vmov	s15, r3
}
 8000c90:	eeb0 0a67 	vmov.f32	s0, s15
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	55555556 	.word	0x55555556

08000ca4 <setPWM>:
void setPWM(int pulse,uint32_t channel){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	int pwm_pulse;
	if(pulse>0){pwm_pulse=pulse;}else{pwm_pulse=0;};
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dd02      	ble.n	8000cba <setPWM+0x16>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e001      	b.n	8000cbe <setPWM+0x1a>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
	if(pwm_pulse>=255){pwm_pulse=255;};
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cc2:	dd01      	ble.n	8000cc8 <setPWM+0x24>
 8000cc4:	23ff      	movs	r3, #255	@ 0xff
 8000cc6:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d104      	bne.n	8000cd8 <setPWM+0x34>
 8000cce:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <setPWM+0x68>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000cd6:	e013      	b.n	8000d00 <setPWM+0x5c>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d104      	bne.n	8000ce8 <setPWM+0x44>
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <setPWM+0x68>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000ce6:	e00b      	b.n	8000d00 <setPWM+0x5c>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d104      	bne.n	8000cf8 <setPWM+0x54>
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <setPWM+0x68>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000cf6:	e003      	b.n	8000d00 <setPWM+0x5c>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <setPWM+0x68>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	20000170 	.word	0x20000170

08000d10 <setDirection>:
void setDirection(char dir){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	if (dir=='w'){
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b77      	cmp	r3, #119	@ 0x77
 8000d1e:	d114      	bne.n	8000d4a <setDirection+0x3a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2102      	movs	r1, #2
 8000d24:	482e      	ldr	r0, [pc, #184]	@ (8000de0 <setDirection+0xd0>)
 8000d26:	f001 fd97 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	482c      	ldr	r0, [pc, #176]	@ (8000de0 <setDirection+0xd0>)
 8000d30:	f001 fd92 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2108      	movs	r1, #8
 8000d38:	4829      	ldr	r0, [pc, #164]	@ (8000de0 <setDirection+0xd0>)
 8000d3a:	f001 fd8d 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2110      	movs	r1, #16
 8000d42:	4827      	ldr	r0, [pc, #156]	@ (8000de0 <setDirection+0xd0>)
 8000d44:	f001 fd88 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
	}
}
 8000d48:	e046      	b.n	8000dd8 <setDirection+0xc8>
	else if (dir=='s'){
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b73      	cmp	r3, #115	@ 0x73
 8000d4e:	d114      	bne.n	8000d7a <setDirection+0x6a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2102      	movs	r1, #2
 8000d54:	4822      	ldr	r0, [pc, #136]	@ (8000de0 <setDirection+0xd0>)
 8000d56:	f001 fd7f 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	4820      	ldr	r0, [pc, #128]	@ (8000de0 <setDirection+0xd0>)
 8000d60:	f001 fd7a 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2108      	movs	r1, #8
 8000d68:	481d      	ldr	r0, [pc, #116]	@ (8000de0 <setDirection+0xd0>)
 8000d6a:	f001 fd75 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2110      	movs	r1, #16
 8000d72:	481b      	ldr	r0, [pc, #108]	@ (8000de0 <setDirection+0xd0>)
 8000d74:	f001 fd70 	bl	8002858 <HAL_GPIO_WritePin>
}
 8000d78:	e02e      	b.n	8000dd8 <setDirection+0xc8>
	else if (dir=='a'){
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b61      	cmp	r3, #97	@ 0x61
 8000d7e:	d114      	bne.n	8000daa <setDirection+0x9a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2102      	movs	r1, #2
 8000d84:	4816      	ldr	r0, [pc, #88]	@ (8000de0 <setDirection+0xd0>)
 8000d86:	f001 fd67 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4814      	ldr	r0, [pc, #80]	@ (8000de0 <setDirection+0xd0>)
 8000d90:	f001 fd62 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2108      	movs	r1, #8
 8000d98:	4811      	ldr	r0, [pc, #68]	@ (8000de0 <setDirection+0xd0>)
 8000d9a:	f001 fd5d 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2110      	movs	r1, #16
 8000da2:	480f      	ldr	r0, [pc, #60]	@ (8000de0 <setDirection+0xd0>)
 8000da4:	f001 fd58 	bl	8002858 <HAL_GPIO_WritePin>
}
 8000da8:	e016      	b.n	8000dd8 <setDirection+0xc8>
	else if (dir=='d'){
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b64      	cmp	r3, #100	@ 0x64
 8000dae:	d113      	bne.n	8000dd8 <setDirection+0xc8>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2102      	movs	r1, #2
 8000db4:	480a      	ldr	r0, [pc, #40]	@ (8000de0 <setDirection+0xd0>)
 8000db6:	f001 fd4f 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	4808      	ldr	r0, [pc, #32]	@ (8000de0 <setDirection+0xd0>)
 8000dc0:	f001 fd4a 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <setDirection+0xd0>)
 8000dca:	f001 fd45 	bl	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	4803      	ldr	r0, [pc, #12]	@ (8000de0 <setDirection+0xd0>)
 8000dd4:	f001 fd40 	bl	8002858 <HAL_GPIO_WritePin>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e30 <HAL_MspInit+0x4c>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <HAL_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	4a08      	ldr	r2, [pc, #32]	@ (8000e30 <HAL_MspInit+0x4c>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <NMI_Handler+0x4>

08000e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8a:	f000 fe15 	bl	8001ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000e98:	4802      	ldr	r0, [pc, #8]	@ (8000ea4 <DMA1_Stream0_IRQHandler+0x10>)
 8000e9a:	f001 f8d7 	bl	800204c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000350 	.word	0x20000350

08000ea8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000eac:	4802      	ldr	r0, [pc, #8]	@ (8000eb8 <DMA1_Stream2_IRQHandler+0x10>)
 8000eae:	f001 f8cd 	bl	800204c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000290 	.word	0x20000290

08000ebc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000ec0:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <DMA1_Stream4_IRQHandler+0x10>)
 8000ec2:	f001 f8c3 	bl	800204c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200002f0 	.word	0x200002f0

08000ed0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000ed4:	4802      	ldr	r0, [pc, #8]	@ (8000ee0 <DMA1_Stream7_IRQHandler+0x10>)
 8000ed6:	f001 f8b9 	bl	800204c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200003b0 	.word	0x200003b0

08000ee4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <UART4_IRQHandler+0x10>)
 8000eea:	f003 fbc1 	bl	8004670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000200 	.word	0x20000200

08000ef8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <UART5_IRQHandler+0x10>)
 8000efe:	f003 fbb7 	bl	8004670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000248 	.word	0x20000248

08000f0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <TIM7_IRQHandler+0x10>)
 8000f12:	f002 fc29 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200001b8 	.word	0x200001b8

08000f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b096      	sub	sp, #88	@ 0x58
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
 8000f72:	615a      	str	r2, [r3, #20]
 8000f74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2220      	movs	r2, #32
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f004 fc03 	bl	8005788 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f82:	4b4a      	ldr	r3, [pc, #296]	@ (80010ac <MX_TIM1_Init+0x168>)
 8000f84:	4a4a      	ldr	r2, [pc, #296]	@ (80010b0 <MX_TIM1_Init+0x16c>)
 8000f86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000f88:	4b48      	ldr	r3, [pc, #288]	@ (80010ac <MX_TIM1_Init+0x168>)
 8000f8a:	2247      	movs	r2, #71	@ 0x47
 8000f8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8e:	4b47      	ldr	r3, [pc, #284]	@ (80010ac <MX_TIM1_Init+0x168>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000f94:	4b45      	ldr	r3, [pc, #276]	@ (80010ac <MX_TIM1_Init+0x168>)
 8000f96:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000f9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9c:	4b43      	ldr	r3, [pc, #268]	@ (80010ac <MX_TIM1_Init+0x168>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa2:	4b42      	ldr	r3, [pc, #264]	@ (80010ac <MX_TIM1_Init+0x168>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fa8:	4b40      	ldr	r3, [pc, #256]	@ (80010ac <MX_TIM1_Init+0x168>)
 8000faa:	2280      	movs	r2, #128	@ 0x80
 8000fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fae:	483f      	ldr	r0, [pc, #252]	@ (80010ac <MX_TIM1_Init+0x168>)
 8000fb0:	f002 f8c4 	bl	800313c <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fba:	f7ff fd37 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fc4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4838      	ldr	r0, [pc, #224]	@ (80010ac <MX_TIM1_Init+0x168>)
 8000fcc:	f002 fd7e 	bl	8003acc <HAL_TIM_ConfigClockSource>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fd6:	f7ff fd29 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fda:	4834      	ldr	r0, [pc, #208]	@ (80010ac <MX_TIM1_Init+0x168>)
 8000fdc:	f002 f96e 	bl	80032bc <HAL_TIM_PWM_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fe6:	f7ff fd21 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	482c      	ldr	r0, [pc, #176]	@ (80010ac <MX_TIM1_Init+0x168>)
 8000ffa:	f003 f973 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001004:	f7ff fd12 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001008:	2360      	movs	r3, #96	@ 0x60
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001014:	2300      	movs	r3, #0
 8001016:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001028:	2200      	movs	r2, #0
 800102a:	4619      	mov	r1, r3
 800102c:	481f      	ldr	r0, [pc, #124]	@ (80010ac <MX_TIM1_Init+0x168>)
 800102e:	f002 fc8b 	bl	8003948 <HAL_TIM_PWM_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001038:	f7ff fcf8 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800103c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001040:	2204      	movs	r2, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4819      	ldr	r0, [pc, #100]	@ (80010ac <MX_TIM1_Init+0x168>)
 8001046:	f002 fc7f 	bl	8003948 <HAL_TIM_PWM_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001050:	f7ff fcec 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001058:	2208      	movs	r2, #8
 800105a:	4619      	mov	r1, r3
 800105c:	4813      	ldr	r0, [pc, #76]	@ (80010ac <MX_TIM1_Init+0x168>)
 800105e:	f002 fc73 	bl	8003948 <HAL_TIM_PWM_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001068:	f7ff fce0 	bl	8000a2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001080:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001084:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4807      	ldr	r0, [pc, #28]	@ (80010ac <MX_TIM1_Init+0x168>)
 8001090:	f003 f9a4 	bl	80043dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800109a:	f7ff fcc7 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800109e:	4803      	ldr	r0, [pc, #12]	@ (80010ac <MX_TIM1_Init+0x168>)
 80010a0:	f000 fa36 	bl	8001510 <HAL_TIM_MspPostInit>

}
 80010a4:	bf00      	nop
 80010a6:	3758      	adds	r7, #88	@ 0x58
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000098 	.word	0x20000098
 80010b0:	40010000 	.word	0x40010000

080010b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	@ 0x30
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	2224      	movs	r2, #36	@ 0x24
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 fb60 	bl	8005788 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d0:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <MX_TIM2_Init+0xa4>)
 80010d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <MX_TIM2_Init+0xa4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <MX_TIM2_Init+0xa4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <MX_TIM2_Init+0xa4>)
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <MX_TIM2_Init+0xa4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f2:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <MX_TIM2_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010f8:	2303      	movs	r3, #3
 80010fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001100:	2301      	movs	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001110:	2301      	movs	r3, #1
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4619      	mov	r1, r3
 8001122:	480d      	ldr	r0, [pc, #52]	@ (8001158 <MX_TIM2_Init+0xa4>)
 8001124:	f002 f9ec 	bl	8003500 <HAL_TIM_Encoder_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800112e:	f7ff fc7d 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	@ (8001158 <MX_TIM2_Init+0xa4>)
 8001140:	f003 f8d0 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800114a:	f7ff fc6f 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	3730      	adds	r7, #48	@ 0x30
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200000e0 	.word	0x200000e0

0800115c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	@ 0x30
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	2224      	movs	r2, #36	@ 0x24
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fb0c 	bl	8005788 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001178:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <MX_TIM4_Init+0xa0>)
 800117a:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <MX_TIM4_Init+0xa4>)
 800117c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800117e:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <MX_TIM4_Init+0xa0>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <MX_TIM4_Init+0xa0>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <MX_TIM4_Init+0xa0>)
 800118c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001190:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <MX_TIM4_Init+0xa0>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <MX_TIM4_Init+0xa0>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800119e:	2303      	movs	r3, #3
 80011a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011a6:	2301      	movs	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011b6:	2301      	movs	r3, #1
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <MX_TIM4_Init+0xa0>)
 80011ca:	f002 f999 	bl	8003500 <HAL_TIM_Encoder_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80011d4:	f7ff fc2a 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_TIM4_Init+0xa0>)
 80011e6:	f003 f87d 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80011f0:	f7ff fc1c 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3730      	adds	r7, #48	@ 0x30
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000128 	.word	0x20000128
 8001200:	40000800 	.word	0x40000800

08001204 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	@ 0x38
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001234:	4b31      	ldr	r3, [pc, #196]	@ (80012fc <MX_TIM5_Init+0xf8>)
 8001236:	4a32      	ldr	r2, [pc, #200]	@ (8001300 <MX_TIM5_Init+0xfc>)
 8001238:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800123a:	4b30      	ldr	r3, [pc, #192]	@ (80012fc <MX_TIM5_Init+0xf8>)
 800123c:	2200      	movs	r2, #0
 800123e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b2e      	ldr	r3, [pc, #184]	@ (80012fc <MX_TIM5_Init+0xf8>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8001246:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <MX_TIM5_Init+0xf8>)
 8001248:	22ff      	movs	r2, #255	@ 0xff
 800124a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <MX_TIM5_Init+0xf8>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <MX_TIM5_Init+0xf8>)
 8001254:	2280      	movs	r2, #128	@ 0x80
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001258:	4828      	ldr	r0, [pc, #160]	@ (80012fc <MX_TIM5_Init+0xf8>)
 800125a:	f001 ff6f 	bl	800313c <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001264:	f7ff fbe2 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800126e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001272:	4619      	mov	r1, r3
 8001274:	4821      	ldr	r0, [pc, #132]	@ (80012fc <MX_TIM5_Init+0xf8>)
 8001276:	f002 fc29 	bl	8003acc <HAL_TIM_ConfigClockSource>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001280:	f7ff fbd4 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001284:	481d      	ldr	r0, [pc, #116]	@ (80012fc <MX_TIM5_Init+0xf8>)
 8001286:	f002 f819 	bl	80032bc <HAL_TIM_PWM_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001290:	f7ff fbcc 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	4619      	mov	r1, r3
 80012a2:	4816      	ldr	r0, [pc, #88]	@ (80012fc <MX_TIM5_Init+0xf8>)
 80012a4:	f003 f81e 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80012ae:	f7ff fbbd 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b2:	2360      	movs	r3, #96	@ 0x60
 80012b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2208      	movs	r2, #8
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	@ (80012fc <MX_TIM5_Init+0xf8>)
 80012ca:	f002 fb3d 	bl	8003948 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80012d4:	f7ff fbaa 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	220c      	movs	r2, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	4807      	ldr	r0, [pc, #28]	@ (80012fc <MX_TIM5_Init+0xf8>)
 80012e0:	f002 fb32 	bl	8003948 <HAL_TIM_PWM_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 80012ea:	f7ff fb9f 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012ee:	4803      	ldr	r0, [pc, #12]	@ (80012fc <MX_TIM5_Init+0xf8>)
 80012f0:	f000 f90e 	bl	8001510 <HAL_TIM_MspPostInit>

}
 80012f4:	bf00      	nop
 80012f6:	3738      	adds	r7, #56	@ 0x38
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000170 	.word	0x20000170
 8001300:	40000c00 	.word	0x40000c00

08001304 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <MX_TIM7_Init+0x64>)
 8001314:	4a15      	ldr	r2, [pc, #84]	@ (800136c <MX_TIM7_Init+0x68>)
 8001316:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200-1;
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <MX_TIM7_Init+0x64>)
 800131a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800131e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_TIM7_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 8001326:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <MX_TIM7_Init+0x64>)
 8001328:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800132c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_TIM7_Init+0x64>)
 8001330:	2280      	movs	r2, #128	@ 0x80
 8001332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <MX_TIM7_Init+0x64>)
 8001336:	f001 ff01 	bl	800313c <HAL_TIM_Base_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001340:	f7ff fb74 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	@ (8001368 <MX_TIM7_Init+0x64>)
 8001352:	f002 ffc7 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800135c:	f7ff fb66 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200001b8 	.word	0x200001b8
 800136c:	40001400 	.word	0x40001400

08001370 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a22      	ldr	r2, [pc, #136]	@ (8001408 <HAL_TIM_Base_MspInit+0x98>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10e      	bne.n	80013a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <HAL_TIM_Base_MspInit+0x9c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	4a20      	ldr	r2, [pc, #128]	@ (800140c <HAL_TIM_Base_MspInit+0x9c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6453      	str	r3, [r2, #68]	@ 0x44
 8001392:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <HAL_TIM_Base_MspInit+0x9c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800139e:	e02e      	b.n	80013fe <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001410 <HAL_TIM_Base_MspInit+0xa0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10e      	bne.n	80013c8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b17      	ldr	r3, [pc, #92]	@ (800140c <HAL_TIM_Base_MspInit+0x9c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	4a16      	ldr	r2, [pc, #88]	@ (800140c <HAL_TIM_Base_MspInit+0x9c>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ba:	4b14      	ldr	r3, [pc, #80]	@ (800140c <HAL_TIM_Base_MspInit+0x9c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
}
 80013c6:	e01a      	b.n	80013fe <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM7)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a11      	ldr	r2, [pc, #68]	@ (8001414 <HAL_TIM_Base_MspInit+0xa4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d115      	bne.n	80013fe <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <HAL_TIM_Base_MspInit+0x9c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	4a0c      	ldr	r2, [pc, #48]	@ (800140c <HAL_TIM_Base_MspInit+0x9c>)
 80013dc:	f043 0320 	orr.w	r3, r3, #32
 80013e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <HAL_TIM_Base_MspInit+0x9c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f003 0320 	and.w	r3, r3, #32
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2037      	movs	r0, #55	@ 0x37
 80013f4:	f000 fc5b 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013f8:	2037      	movs	r0, #55	@ 0x37
 80013fa:	f000 fc74 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40010000 	.word	0x40010000
 800140c:	40023800 	.word	0x40023800
 8001410:	40000c00 	.word	0x40000c00
 8001414:	40001400 	.word	0x40001400

08001418 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	@ 0x30
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001438:	d12c      	bne.n	8001494 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	4b30      	ldr	r3, [pc, #192]	@ (8001500 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	4a2f      	ldr	r2, [pc, #188]	@ (8001500 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6413      	str	r3, [r2, #64]	@ 0x40
 800144a:	4b2d      	ldr	r3, [pc, #180]	@ (8001500 <HAL_TIM_Encoder_MspInit+0xe8>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <HAL_TIM_Encoder_MspInit+0xe8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a28      	ldr	r2, [pc, #160]	@ (8001500 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b26      	ldr	r3, [pc, #152]	@ (8001500 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001472:	2303      	movs	r3, #3
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001482:	2301      	movs	r3, #1
 8001484:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	481d      	ldr	r0, [pc, #116]	@ (8001504 <HAL_TIM_Encoder_MspInit+0xec>)
 800148e:	f001 f847 	bl	8002520 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001492:	e031      	b.n	80014f8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a1b      	ldr	r2, [pc, #108]	@ (8001508 <HAL_TIM_Encoder_MspInit+0xf0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12c      	bne.n	80014f8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <HAL_TIM_Encoder_MspInit+0xe8>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	4a16      	ldr	r2, [pc, #88]	@ (8001500 <HAL_TIM_Encoder_MspInit+0xe8>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ae:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <HAL_TIM_Encoder_MspInit+0xe8>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <HAL_TIM_Encoder_MspInit+0xe8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001500 <HAL_TIM_Encoder_MspInit+0xe8>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <HAL_TIM_Encoder_MspInit+0xe8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014d6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014e8:	2302      	movs	r3, #2
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	@ (800150c <HAL_TIM_Encoder_MspInit+0xf4>)
 80014f4:	f001 f814 	bl	8002520 <HAL_GPIO_Init>
}
 80014f8:	bf00      	nop
 80014fa:	3730      	adds	r7, #48	@ 0x30
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000
 8001508:	40000800 	.word	0x40000800
 800150c:	40020c00 	.word	0x40020c00

08001510 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a24      	ldr	r2, [pc, #144]	@ (80015c0 <HAL_TIM_MspPostInit+0xb0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d11f      	bne.n	8001572 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <HAL_TIM_MspPostInit+0xb4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a22      	ldr	r2, [pc, #136]	@ (80015c4 <HAL_TIM_MspPostInit+0xb4>)
 800153c:	f043 0310 	orr.w	r3, r3, #16
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <HAL_TIM_MspPostInit+0xb4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800154e:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001560:	2301      	movs	r3, #1
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	4817      	ldr	r0, [pc, #92]	@ (80015c8 <HAL_TIM_MspPostInit+0xb8>)
 800156c:	f000 ffd8 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001570:	e022      	b.n	80015b8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a15      	ldr	r2, [pc, #84]	@ (80015cc <HAL_TIM_MspPostInit+0xbc>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d11d      	bne.n	80015b8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <HAL_TIM_MspPostInit+0xb4>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <HAL_TIM_MspPostInit+0xb4>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6313      	str	r3, [r2, #48]	@ 0x30
 800158c:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <HAL_TIM_MspPostInit+0xb4>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001598:	230c      	movs	r3, #12
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015a8:	2302      	movs	r3, #2
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	4807      	ldr	r0, [pc, #28]	@ (80015d0 <HAL_TIM_MspPostInit+0xc0>)
 80015b4:	f000 ffb4 	bl	8002520 <HAL_GPIO_Init>
}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	@ 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40010000 	.word	0x40010000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40000c00 	.word	0x40000c00
 80015d0:	40020000 	.word	0x40020000

080015d4 <timersInit>:
 *
 *  Created on: Jul 21, 2024
 *      Author: 25138
 */
#include "timersInit.h"
void timersInit(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80015d8:	2108      	movs	r1, #8
 80015da:	480c      	ldr	r0, [pc, #48]	@ (800160c <timersInit+0x38>)
 80015dc:	f001 fec8 	bl	8003370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);//开启电机PWM，最值255
 80015e0:	210c      	movs	r1, #12
 80015e2:	480a      	ldr	r0, [pc, #40]	@ (800160c <timersInit+0x38>)
 80015e4:	f001 fec4 	bl	8003370 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_ALL);//开启舵机PWM，最值1999
 80015e8:	213c      	movs	r1, #60	@ 0x3c
 80015ea:	4809      	ldr	r0, [pc, #36]	@ (8001610 <timersInit+0x3c>)
 80015ec:	f001 fec0 	bl	8003370 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);//左轮编码器
 80015f0:	213c      	movs	r1, #60	@ 0x3c
 80015f2:	4808      	ldr	r0, [pc, #32]	@ (8001614 <timersInit+0x40>)
 80015f4:	f002 f82a 	bl	800364c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);//右轮编码器
 80015f8:	213c      	movs	r1, #60	@ 0x3c
 80015fa:	4807      	ldr	r0, [pc, #28]	@ (8001618 <timersInit+0x44>)
 80015fc:	f002 f826 	bl	800364c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim7);//中断定时器，50ms一次中断
 8001600:	4806      	ldr	r0, [pc, #24]	@ (800161c <timersInit+0x48>)
 8001602:	f001 fdeb 	bl	80031dc <HAL_TIM_Base_Start_IT>

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000170 	.word	0x20000170
 8001610:	20000098 	.word	0x20000098
 8001614:	200000e0 	.word	0x200000e0
 8001618:	20000128 	.word	0x20000128
 800161c:	200001b8 	.word	0x200001b8

08001620 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_UART4_Init+0x4c>)
 8001626:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <MX_UART4_Init+0x50>)
 8001628:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <MX_UART4_Init+0x4c>)
 800162c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001630:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <MX_UART4_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <MX_UART4_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <MX_UART4_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <MX_UART4_Init+0x4c>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b08      	ldr	r3, [pc, #32]	@ (800166c <MX_UART4_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <MX_UART4_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	@ (800166c <MX_UART4_Init+0x4c>)
 8001658:	f002 ff26 	bl	80044a8 <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001662:	f7ff f9e3 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000200 	.word	0x20000200
 8001670:	40004c00 	.word	0x40004c00

08001674 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_UART5_Init+0x4c>)
 800167a:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <MX_UART5_Init+0x50>)
 800167c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <MX_UART5_Init+0x4c>)
 8001680:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001684:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_UART5_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_UART5_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <MX_UART5_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_UART5_Init+0x4c>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <MX_UART5_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_UART5_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_UART5_Init+0x4c>)
 80016ac:	f002 fefc 	bl	80044a8 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80016b6:	f7ff f9b9 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000248 	.word	0x20000248
 80016c4:	40005000 	.word	0x40005000

080016c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	@ 0x30
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001810 <HAL_UART_MspInit+0x148>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	f040 80a0 	bne.w	800182c <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	4b48      	ldr	r3, [pc, #288]	@ (8001814 <HAL_UART_MspInit+0x14c>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	4a47      	ldr	r2, [pc, #284]	@ (8001814 <HAL_UART_MspInit+0x14c>)
 80016f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fc:	4b45      	ldr	r3, [pc, #276]	@ (8001814 <HAL_UART_MspInit+0x14c>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <HAL_UART_MspInit+0x14c>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001710:	4a40      	ldr	r2, [pc, #256]	@ (8001814 <HAL_UART_MspInit+0x14c>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6313      	str	r3, [r2, #48]	@ 0x30
 8001718:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <HAL_UART_MspInit+0x14c>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001724:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001736:	2308      	movs	r3, #8
 8001738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	4835      	ldr	r0, [pc, #212]	@ (8001818 <HAL_UART_MspInit+0x150>)
 8001742:	f000 feed 	bl	8002520 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001746:	4b35      	ldr	r3, [pc, #212]	@ (800181c <HAL_UART_MspInit+0x154>)
 8001748:	4a35      	ldr	r2, [pc, #212]	@ (8001820 <HAL_UART_MspInit+0x158>)
 800174a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800174c:	4b33      	ldr	r3, [pc, #204]	@ (800181c <HAL_UART_MspInit+0x154>)
 800174e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001752:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001754:	4b31      	ldr	r3, [pc, #196]	@ (800181c <HAL_UART_MspInit+0x154>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800175a:	4b30      	ldr	r3, [pc, #192]	@ (800181c <HAL_UART_MspInit+0x154>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001760:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <HAL_UART_MspInit+0x154>)
 8001762:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001766:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001768:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <HAL_UART_MspInit+0x154>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800176e:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <HAL_UART_MspInit+0x154>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001774:	4b29      	ldr	r3, [pc, #164]	@ (800181c <HAL_UART_MspInit+0x154>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800177a:	4b28      	ldr	r3, [pc, #160]	@ (800181c <HAL_UART_MspInit+0x154>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001780:	4b26      	ldr	r3, [pc, #152]	@ (800181c <HAL_UART_MspInit+0x154>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001786:	4825      	ldr	r0, [pc, #148]	@ (800181c <HAL_UART_MspInit+0x154>)
 8001788:	f000 fac8 	bl	8001d1c <HAL_DMA_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001792:	f7ff f94b 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a20      	ldr	r2, [pc, #128]	@ (800181c <HAL_UART_MspInit+0x154>)
 800179a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800179c:	4a1f      	ldr	r2, [pc, #124]	@ (800181c <HAL_UART_MspInit+0x154>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80017a2:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017a4:	4a20      	ldr	r2, [pc, #128]	@ (8001828 <HAL_UART_MspInit+0x160>)
 80017a6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017ae:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017b2:	2240      	movs	r2, #64	@ 0x40
 80017b4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017c2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017c4:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017d6:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80017e2:	4810      	ldr	r0, [pc, #64]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017e4:	f000 fa9a 	bl	8001d1c <HAL_DMA_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80017ee:	f7ff f91d 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80017f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <HAL_UART_MspInit+0x15c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	2034      	movs	r0, #52	@ 0x34
 8001804:	f000 fa53 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001808:	2034      	movs	r0, #52	@ 0x34
 800180a:	f000 fa6c 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800180e:	e0c2      	b.n	8001996 <HAL_UART_MspInit+0x2ce>
 8001810:	40004c00 	.word	0x40004c00
 8001814:	40023800 	.word	0x40023800
 8001818:	40020800 	.word	0x40020800
 800181c:	20000290 	.word	0x20000290
 8001820:	40026040 	.word	0x40026040
 8001824:	200002f0 	.word	0x200002f0
 8001828:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a5b      	ldr	r2, [pc, #364]	@ (80019a0 <HAL_UART_MspInit+0x2d8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	f040 80af 	bne.w	8001996 <HAL_UART_MspInit+0x2ce>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	4b59      	ldr	r3, [pc, #356]	@ (80019a4 <HAL_UART_MspInit+0x2dc>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	4a58      	ldr	r2, [pc, #352]	@ (80019a4 <HAL_UART_MspInit+0x2dc>)
 8001842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001846:	6413      	str	r3, [r2, #64]	@ 0x40
 8001848:	4b56      	ldr	r3, [pc, #344]	@ (80019a4 <HAL_UART_MspInit+0x2dc>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4b52      	ldr	r3, [pc, #328]	@ (80019a4 <HAL_UART_MspInit+0x2dc>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185c:	4a51      	ldr	r2, [pc, #324]	@ (80019a4 <HAL_UART_MspInit+0x2dc>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6313      	str	r3, [r2, #48]	@ 0x30
 8001864:	4b4f      	ldr	r3, [pc, #316]	@ (80019a4 <HAL_UART_MspInit+0x2dc>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	4b4b      	ldr	r3, [pc, #300]	@ (80019a4 <HAL_UART_MspInit+0x2dc>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001878:	4a4a      	ldr	r2, [pc, #296]	@ (80019a4 <HAL_UART_MspInit+0x2dc>)
 800187a:	f043 0308 	orr.w	r3, r3, #8
 800187e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001880:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <HAL_UART_MspInit+0x2dc>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800188c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800189e:	2308      	movs	r3, #8
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	483f      	ldr	r0, [pc, #252]	@ (80019a8 <HAL_UART_MspInit+0x2e0>)
 80018aa:	f000 fe39 	bl	8002520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018ae:	2304      	movs	r3, #4
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80018be:	2308      	movs	r3, #8
 80018c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	4838      	ldr	r0, [pc, #224]	@ (80019ac <HAL_UART_MspInit+0x2e4>)
 80018ca:	f000 fe29 	bl	8002520 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80018ce:	4b38      	ldr	r3, [pc, #224]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 80018d0:	4a38      	ldr	r2, [pc, #224]	@ (80019b4 <HAL_UART_MspInit+0x2ec>)
 80018d2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80018d4:	4b36      	ldr	r3, [pc, #216]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 80018d6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018da:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018dc:	4b34      	ldr	r3, [pc, #208]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e2:	4b33      	ldr	r3, [pc, #204]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018e8:	4b31      	ldr	r3, [pc, #196]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 80018ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018ee:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f0:	4b2f      	ldr	r3, [pc, #188]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018f6:	4b2e      	ldr	r3, [pc, #184]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80018fc:	4b2c      	ldr	r3, [pc, #176]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001902:	4b2b      	ldr	r3, [pc, #172]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001908:	4b29      	ldr	r3, [pc, #164]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 800190a:	2200      	movs	r2, #0
 800190c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800190e:	4828      	ldr	r0, [pc, #160]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 8001910:	f000 fa04 	bl	8001d1c <HAL_DMA_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_UART_MspInit+0x256>
      Error_Handler();
 800191a:	f7ff f887 	bl	8000a2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a23      	ldr	r2, [pc, #140]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 8001922:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001924:	4a22      	ldr	r2, [pc, #136]	@ (80019b0 <HAL_UART_MspInit+0x2e8>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800192a:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 800192c:	4a23      	ldr	r2, [pc, #140]	@ (80019bc <HAL_UART_MspInit+0x2f4>)
 800192e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001930:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 8001932:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001936:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 800193a:	2240      	movs	r2, #64	@ 0x40
 800193c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001944:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 8001946:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800194a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001958:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800195e:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001964:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800196a:	4813      	ldr	r0, [pc, #76]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 800196c:	f000 f9d6 	bl	8001d1c <HAL_DMA_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8001976:	f7ff f859 	bl	8000a2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a0e      	ldr	r2, [pc, #56]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 800197e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001980:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <HAL_UART_MspInit+0x2f0>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	2035      	movs	r0, #53	@ 0x35
 800198c:	f000 f98f 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001990:	2035      	movs	r0, #53	@ 0x35
 8001992:	f000 f9a8 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3730      	adds	r7, #48	@ 0x30
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40005000 	.word	0x40005000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020800 	.word	0x40020800
 80019ac:	40020c00 	.word	0x40020c00
 80019b0:	20000350 	.word	0x20000350
 80019b4:	40026010 	.word	0x40026010
 80019b8:	200003b0 	.word	0x200003b0
 80019bc:	400260b8 	.word	0x400260b8

080019c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019c4:	f7ff faac 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c8:	480c      	ldr	r0, [pc, #48]	@ (80019fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ca:	490d      	ldr	r1, [pc, #52]	@ (8001a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e0:	4c0a      	ldr	r4, [pc, #40]	@ (8001a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ee:	f003 fed3 	bl	8005798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f2:	f7fe ff8d 	bl	8000910 <main>
  bx  lr    
 80019f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a00:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001a04:	08005838 	.word	0x08005838
  ldr r2, =_sbss
 8001a08:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001a0c:	20000414 	.word	0x20000414

08001a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC_IRQHandler>
	...

08001a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a18:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <HAL_Init+0x40>)
 8001a1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a24:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <HAL_Init+0x40>)
 8001a2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a07      	ldr	r2, [pc, #28]	@ (8001a54 <HAL_Init+0x40>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f000 f92b 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a42:	200f      	movs	r0, #15
 8001a44:	f000 f808 	bl	8001a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a48:	f7ff f9cc 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023c00 	.word	0x40023c00

08001a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_InitTick+0x54>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_InitTick+0x58>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f943 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00e      	b.n	8001aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b0f      	cmp	r3, #15
 8001a8a:	d80a      	bhi.n	8001aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f000 f90b 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a98:	4a06      	ldr	r2, [pc, #24]	@ (8001ab4 <HAL_InitTick+0x5c>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e000      	b.n	8001aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000010 	.word	0x20000010
 8001ab4:	2000000c 	.word	0x2000000c

08001ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x20>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_IncTick+0x24>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <HAL_IncTick+0x24>)
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000010 	.word	0x20000010
 8001adc:	20000410 	.word	0x20000410

08001ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <HAL_GetTick+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000410 	.word	0x20000410

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	@ (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	@ (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	@ (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	@ 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	@ 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff3e 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff8e 	bl	8001bec <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff31 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d28:	f7ff feda 	bl	8001ae0 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e099      	b.n	8001e6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0201 	bic.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d58:	e00f      	b.n	8001d7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d5a:	f7ff fec1 	bl	8001ae0 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b05      	cmp	r3, #5
 8001d66:	d908      	bls.n	8001d7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2203      	movs	r2, #3
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e078      	b.n	8001e6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e8      	bne.n	8001d5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4b38      	ldr	r3, [pc, #224]	@ (8001e74 <HAL_DMA_Init+0x158>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d107      	bne.n	8001de4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f023 0307 	bic.w	r3, r3, #7
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d117      	bne.n	8001e3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00e      	beq.n	8001e3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fb01 	bl	8002428 <DMA_CheckFifoParam>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2240      	movs	r2, #64	@ 0x40
 8001e30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e016      	b.n	8001e6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fab8 	bl	80023bc <DMA_CalcBaseAndBitshift>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e54:	223f      	movs	r2, #63	@ 0x3f
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	f010803f 	.word	0xf010803f

08001e78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_DMA_Start_IT+0x26>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e040      	b.n	8001f20 <HAL_DMA_Start_IT+0xa8>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d12f      	bne.n	8001f12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fa4a 	bl	8002360 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed0:	223f      	movs	r2, #63	@ 0x3f
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0216 	orr.w	r2, r2, #22
 8001ee6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0208 	orr.w	r2, r2, #8
 8001efe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	e005      	b.n	8001f1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f36:	f7ff fdd3 	bl	8001ae0 <HAL_GetTick>
 8001f3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d008      	beq.n	8001f5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2280      	movs	r2, #128	@ 0x80
 8001f4c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e052      	b.n	8002000 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0216 	bic.w	r2, r2, #22
 8001f68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d103      	bne.n	8001f8a <HAL_DMA_Abort+0x62>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0208 	bic.w	r2, r2, #8
 8001f98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0201 	bic.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001faa:	e013      	b.n	8001fd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fac:	f7ff fd98 	bl	8001ae0 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d90c      	bls.n	8001fd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e015      	b.n	8002000 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1e4      	bne.n	8001fac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe6:	223f      	movs	r2, #63	@ 0x3f
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d004      	beq.n	8002026 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2280      	movs	r2, #128	@ 0x80
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e00c      	b.n	8002040 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2205      	movs	r2, #5
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002058:	4b8e      	ldr	r3, [pc, #568]	@ (8002294 <HAL_DMA_IRQHandler+0x248>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a8e      	ldr	r2, [pc, #568]	@ (8002298 <HAL_DMA_IRQHandler+0x24c>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	0a9b      	lsrs	r3, r3, #10
 8002064:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	2208      	movs	r2, #8
 8002078:	409a      	lsls	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01a      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0204 	bic.w	r2, r2, #4
 800209e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a4:	2208      	movs	r2, #8
 80020a6:	409a      	lsls	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020bc:	2201      	movs	r2, #1
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d012      	beq.n	80020ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020da:	2201      	movs	r2, #1
 80020dc:	409a      	lsls	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e6:	f043 0202 	orr.w	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f2:	2204      	movs	r2, #4
 80020f4:	409a      	lsls	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d012      	beq.n	8002124 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	2204      	movs	r2, #4
 8002112:	409a      	lsls	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211c:	f043 0204 	orr.w	r2, r3, #4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002128:	2210      	movs	r2, #16
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d043      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d03c      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	2210      	movs	r2, #16
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d018      	beq.n	800218e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d108      	bne.n	800217c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d024      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
 800217a:	e01f      	b.n	80021bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01b      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
 800218c:	e016      	b.n	80021bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d107      	bne.n	80021ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0208 	bic.w	r2, r2, #8
 80021aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c0:	2220      	movs	r2, #32
 80021c2:	409a      	lsls	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 808f 	beq.w	80022ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8087 	beq.w	80022ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e2:	2220      	movs	r2, #32
 80021e4:	409a      	lsls	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b05      	cmp	r3, #5
 80021f4:	d136      	bne.n	8002264 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0216 	bic.w	r2, r2, #22
 8002204:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002214:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d103      	bne.n	8002226 <HAL_DMA_IRQHandler+0x1da>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0208 	bic.w	r2, r2, #8
 8002234:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223a:	223f      	movs	r2, #63	@ 0x3f
 800223c:	409a      	lsls	r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002256:	2b00      	cmp	r3, #0
 8002258:	d07e      	beq.n	8002358 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
        }
        return;
 8002262:	e079      	b.n	8002358 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01d      	beq.n	80022ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10d      	bne.n	800229c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002284:	2b00      	cmp	r3, #0
 8002286:	d031      	beq.n	80022ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
 8002290:	e02c      	b.n	80022ec <HAL_DMA_IRQHandler+0x2a0>
 8002292:	bf00      	nop
 8002294:	20000008 	.word	0x20000008
 8002298:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d023      	beq.n	80022ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
 80022ac:	e01e      	b.n	80022ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10f      	bne.n	80022dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0210 	bic.w	r2, r2, #16
 80022ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d032      	beq.n	800235a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d022      	beq.n	8002346 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2205      	movs	r2, #5
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	3301      	adds	r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	429a      	cmp	r2, r3
 8002322:	d307      	bcc.n	8002334 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f2      	bne.n	8002318 <HAL_DMA_IRQHandler+0x2cc>
 8002332:	e000      	b.n	8002336 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002334:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
 8002356:	e000      	b.n	800235a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002358:	bf00      	nop
    }
  }
}
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800237c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b40      	cmp	r3, #64	@ 0x40
 800238c:	d108      	bne.n	80023a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800239e:	e007      	b.n	80023b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	3b10      	subs	r3, #16
 80023cc:	4a14      	ldr	r2, [pc, #80]	@ (8002420 <DMA_CalcBaseAndBitshift+0x64>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023d6:	4a13      	ldr	r2, [pc, #76]	@ (8002424 <DMA_CalcBaseAndBitshift+0x68>)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4413      	add	r3, r2
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d909      	bls.n	80023fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023f2:	f023 0303 	bic.w	r3, r3, #3
 80023f6:	1d1a      	adds	r2, r3, #4
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80023fc:	e007      	b.n	800240e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002406:	f023 0303 	bic.w	r3, r3, #3
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	aaaaaaab 	.word	0xaaaaaaab
 8002424:	08005820 	.word	0x08005820

08002428 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d11f      	bne.n	8002482 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d856      	bhi.n	80024f6 <DMA_CheckFifoParam+0xce>
 8002448:	a201      	add	r2, pc, #4	@ (adr r2, 8002450 <DMA_CheckFifoParam+0x28>)
 800244a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244e:	bf00      	nop
 8002450:	08002461 	.word	0x08002461
 8002454:	08002473 	.word	0x08002473
 8002458:	08002461 	.word	0x08002461
 800245c:	080024f7 	.word	0x080024f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002464:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d046      	beq.n	80024fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002470:	e043      	b.n	80024fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800247a:	d140      	bne.n	80024fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002480:	e03d      	b.n	80024fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800248a:	d121      	bne.n	80024d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d837      	bhi.n	8002502 <DMA_CheckFifoParam+0xda>
 8002492:	a201      	add	r2, pc, #4	@ (adr r2, 8002498 <DMA_CheckFifoParam+0x70>)
 8002494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002498:	080024a9 	.word	0x080024a9
 800249c:	080024af 	.word	0x080024af
 80024a0:	080024a9 	.word	0x080024a9
 80024a4:	080024c1 	.word	0x080024c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
      break;
 80024ac:	e030      	b.n	8002510 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d025      	beq.n	8002506 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024be:	e022      	b.n	8002506 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024c8:	d11f      	bne.n	800250a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024ce:	e01c      	b.n	800250a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d903      	bls.n	80024de <DMA_CheckFifoParam+0xb6>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d003      	beq.n	80024e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024dc:	e018      	b.n	8002510 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
      break;
 80024e2:	e015      	b.n	8002510 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00e      	beq.n	800250e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
      break;
 80024f4:	e00b      	b.n	800250e <DMA_CheckFifoParam+0xe6>
      break;
 80024f6:	bf00      	nop
 80024f8:	e00a      	b.n	8002510 <DMA_CheckFifoParam+0xe8>
      break;
 80024fa:	bf00      	nop
 80024fc:	e008      	b.n	8002510 <DMA_CheckFifoParam+0xe8>
      break;
 80024fe:	bf00      	nop
 8002500:	e006      	b.n	8002510 <DMA_CheckFifoParam+0xe8>
      break;
 8002502:	bf00      	nop
 8002504:	e004      	b.n	8002510 <DMA_CheckFifoParam+0xe8>
      break;
 8002506:	bf00      	nop
 8002508:	e002      	b.n	8002510 <DMA_CheckFifoParam+0xe8>
      break;   
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <DMA_CheckFifoParam+0xe8>
      break;
 800250e:	bf00      	nop
    }
  } 
  
  return status; 
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	@ 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e16b      	b.n	8002814 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	f040 815a 	bne.w	800280e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d005      	beq.n	8002572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256e:	2b02      	cmp	r3, #2
 8002570:	d130      	bne.n	80025d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 0201 	and.w	r2, r3, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d017      	beq.n	8002610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d123      	bne.n	8002664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0203 	and.w	r2, r3, #3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80b4 	beq.w	800280e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b60      	ldr	r3, [pc, #384]	@ (800282c <HAL_GPIO_Init+0x30c>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	4a5f      	ldr	r2, [pc, #380]	@ (800282c <HAL_GPIO_Init+0x30c>)
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b6:	4b5d      	ldr	r3, [pc, #372]	@ (800282c <HAL_GPIO_Init+0x30c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002830 <HAL_GPIO_Init+0x310>)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	3302      	adds	r3, #2
 80026ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	220f      	movs	r2, #15
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a52      	ldr	r2, [pc, #328]	@ (8002834 <HAL_GPIO_Init+0x314>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d02b      	beq.n	8002746 <HAL_GPIO_Init+0x226>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a51      	ldr	r2, [pc, #324]	@ (8002838 <HAL_GPIO_Init+0x318>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d025      	beq.n	8002742 <HAL_GPIO_Init+0x222>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a50      	ldr	r2, [pc, #320]	@ (800283c <HAL_GPIO_Init+0x31c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01f      	beq.n	800273e <HAL_GPIO_Init+0x21e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4f      	ldr	r2, [pc, #316]	@ (8002840 <HAL_GPIO_Init+0x320>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d019      	beq.n	800273a <HAL_GPIO_Init+0x21a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4e      	ldr	r2, [pc, #312]	@ (8002844 <HAL_GPIO_Init+0x324>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_GPIO_Init+0x216>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4d      	ldr	r2, [pc, #308]	@ (8002848 <HAL_GPIO_Init+0x328>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00d      	beq.n	8002732 <HAL_GPIO_Init+0x212>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4c      	ldr	r2, [pc, #304]	@ (800284c <HAL_GPIO_Init+0x32c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <HAL_GPIO_Init+0x20e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4b      	ldr	r2, [pc, #300]	@ (8002850 <HAL_GPIO_Init+0x330>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d101      	bne.n	800272a <HAL_GPIO_Init+0x20a>
 8002726:	2307      	movs	r3, #7
 8002728:	e00e      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800272a:	2308      	movs	r3, #8
 800272c:	e00c      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800272e:	2306      	movs	r3, #6
 8002730:	e00a      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002732:	2305      	movs	r3, #5
 8002734:	e008      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002736:	2304      	movs	r3, #4
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800273a:	2303      	movs	r3, #3
 800273c:	e004      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800273e:	2302      	movs	r3, #2
 8002740:	e002      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002746:	2300      	movs	r3, #0
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f002 0203 	and.w	r2, r2, #3
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	4093      	lsls	r3, r2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002758:	4935      	ldr	r1, [pc, #212]	@ (8002830 <HAL_GPIO_Init+0x310>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002766:	4b3b      	ldr	r3, [pc, #236]	@ (8002854 <HAL_GPIO_Init+0x334>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278a:	4a32      	ldr	r2, [pc, #200]	@ (8002854 <HAL_GPIO_Init+0x334>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002790:	4b30      	ldr	r3, [pc, #192]	@ (8002854 <HAL_GPIO_Init+0x334>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b4:	4a27      	ldr	r2, [pc, #156]	@ (8002854 <HAL_GPIO_Init+0x334>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ba:	4b26      	ldr	r3, [pc, #152]	@ (8002854 <HAL_GPIO_Init+0x334>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027de:	4a1d      	ldr	r2, [pc, #116]	@ (8002854 <HAL_GPIO_Init+0x334>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <HAL_GPIO_Init+0x334>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002808:	4a12      	ldr	r2, [pc, #72]	@ (8002854 <HAL_GPIO_Init+0x334>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	f67f ae90 	bls.w	800253c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	@ 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40013800 	.word	0x40013800
 8002834:	40020000 	.word	0x40020000
 8002838:	40020400 	.word	0x40020400
 800283c:	40020800 	.word	0x40020800
 8002840:	40020c00 	.word	0x40020c00
 8002844:	40021000 	.word	0x40021000
 8002848:	40021400 	.word	0x40021400
 800284c:	40021800 	.word	0x40021800
 8002850:	40021c00 	.word	0x40021c00
 8002854:	40013c00 	.word	0x40013c00

08002858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
 8002864:	4613      	mov	r3, r2
 8002866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002868:	787b      	ldrb	r3, [r7, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002874:	e003      	b.n	800287e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	041a      	lsls	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	619a      	str	r2, [r3, #24]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e267      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d075      	beq.n	8002996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028aa:	4b88      	ldr	r3, [pc, #544]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d00c      	beq.n	80028d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b6:	4b85      	ldr	r3, [pc, #532]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d112      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4b82      	ldr	r3, [pc, #520]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028ce:	d10b      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	4b7e      	ldr	r3, [pc, #504]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05b      	beq.n	8002994 <HAL_RCC_OscConfig+0x108>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d157      	bne.n	8002994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e242      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_OscConfig+0x74>
 80028f2:	4b76      	ldr	r3, [pc, #472]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a75      	ldr	r2, [pc, #468]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e01d      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x98>
 800290a:	4b70      	ldr	r3, [pc, #448]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a6f      	ldr	r2, [pc, #444]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b6d      	ldr	r3, [pc, #436]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6c      	ldr	r2, [pc, #432]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002924:	4b69      	ldr	r3, [pc, #420]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a68      	ldr	r2, [pc, #416]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b66      	ldr	r3, [pc, #408]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a65      	ldr	r2, [pc, #404]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff f8cc 	bl	8001ae0 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294c:	f7ff f8c8 	bl	8001ae0 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	@ 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e207      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b5b      	ldr	r3, [pc, #364]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0xc0>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff f8b8 	bl	8001ae0 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002974:	f7ff f8b4 	bl	8001ae0 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	@ 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1f3      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	4b51      	ldr	r3, [pc, #324]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0xe8>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d063      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a2:	4b4a      	ldr	r3, [pc, #296]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ae:	4b47      	ldr	r3, [pc, #284]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d11c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b44      	ldr	r3, [pc, #272]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	4b41      	ldr	r3, [pc, #260]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_RCC_OscConfig+0x152>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e1c7      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	4b3b      	ldr	r3, [pc, #236]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4937      	ldr	r1, [pc, #220]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	e03a      	b.n	8002a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fc:	4b34      	ldr	r3, [pc, #208]	@ (8002ad0 <HAL_RCC_OscConfig+0x244>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7ff f86d 	bl	8001ae0 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7ff f869 	bl	8001ae0 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1a8      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a28:	4b28      	ldr	r3, [pc, #160]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4925      	ldr	r1, [pc, #148]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
 8002a3c:	e015      	b.n	8002a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ad0 <HAL_RCC_OscConfig+0x244>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7ff f84c 	bl	8001ae0 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7ff f848 	bl	8001ae0 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e187      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d036      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <HAL_RCC_OscConfig+0x248>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7ff f82c 	bl	8001ae0 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7ff f828 	bl	8001ae0 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e167      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <HAL_RCC_OscConfig+0x240>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x200>
 8002aaa:	e01b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aac:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <HAL_RCC_OscConfig+0x248>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7ff f815 	bl	8001ae0 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab8:	e00e      	b.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aba:	f7ff f811 	bl	8001ae0 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d907      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e150      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	42470000 	.word	0x42470000
 8002ad4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad8:	4b88      	ldr	r3, [pc, #544]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ea      	bne.n	8002aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8097 	beq.w	8002c20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af6:	4b81      	ldr	r3, [pc, #516]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	4b7d      	ldr	r3, [pc, #500]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	4a7c      	ldr	r2, [pc, #496]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b12:	4b7a      	ldr	r3, [pc, #488]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b77      	ldr	r3, [pc, #476]	@ (8002d00 <HAL_RCC_OscConfig+0x474>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d118      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2e:	4b74      	ldr	r3, [pc, #464]	@ (8002d00 <HAL_RCC_OscConfig+0x474>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a73      	ldr	r2, [pc, #460]	@ (8002d00 <HAL_RCC_OscConfig+0x474>)
 8002b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3a:	f7fe ffd1 	bl	8001ae0 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b42:	f7fe ffcd 	bl	8001ae0 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e10c      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	4b6a      	ldr	r3, [pc, #424]	@ (8002d00 <HAL_RCC_OscConfig+0x474>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0x2ea>
 8002b68:	4b64      	ldr	r3, [pc, #400]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6c:	4a63      	ldr	r2, [pc, #396]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x324>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x30c>
 8002b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b82:	4a5e      	ldr	r2, [pc, #376]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	4a5b      	ldr	r2, [pc, #364]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x324>
 8002b98:	4b58      	ldr	r3, [pc, #352]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9c:	4a57      	ldr	r2, [pc, #348]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba4:	4b55      	ldr	r3, [pc, #340]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba8:	4a54      	ldr	r2, [pc, #336]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002baa:	f023 0304 	bic.w	r3, r3, #4
 8002bae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d015      	beq.n	8002be4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fe ff92 	bl	8001ae0 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc0:	f7fe ff8e 	bl	8001ae0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0cb      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd6:	4b49      	ldr	r3, [pc, #292]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0ee      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x334>
 8002be2:	e014      	b.n	8002c0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7fe ff7c 	bl	8001ae0 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7fe ff78 	bl	8001ae0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0b5      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c02:	4b3e      	ldr	r3, [pc, #248]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1ee      	bne.n	8002bec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c14:	4b39      	ldr	r3, [pc, #228]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	4a38      	ldr	r2, [pc, #224]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80a1 	beq.w	8002d6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c2a:	4b34      	ldr	r3, [pc, #208]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d05c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d141      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3e:	4b31      	ldr	r3, [pc, #196]	@ (8002d04 <HAL_RCC_OscConfig+0x478>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe ff4c 	bl	8001ae0 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe ff48 	bl	8001ae0 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e087      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	4b27      	ldr	r3, [pc, #156]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	019b      	lsls	r3, r3, #6
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	3b01      	subs	r3, #1
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	491b      	ldr	r1, [pc, #108]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c94:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <HAL_RCC_OscConfig+0x478>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7fe ff21 	bl	8001ae0 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe ff1d 	bl	8001ae0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e05c      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb4:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x416>
 8002cc0:	e054      	b.n	8002d6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <HAL_RCC_OscConfig+0x478>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe ff0a 	bl	8001ae0 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe ff06 	bl	8001ae0 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e045      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x444>
 8002cee:	e03d      	b.n	8002d6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e038      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40007000 	.word	0x40007000
 8002d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	@ (8002d78 <HAL_RCC_OscConfig+0x4ec>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d028      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d121      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d11a      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d111      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	3b01      	subs	r3, #1
 8002d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0cc      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	4b68      	ldr	r3, [pc, #416]	@ (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d90c      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b65      	ldr	r3, [pc, #404]	@ (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b63      	ldr	r3, [pc, #396]	@ (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0b8      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd0:	4b59      	ldr	r3, [pc, #356]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a58      	ldr	r2, [pc, #352]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de8:	4b53      	ldr	r3, [pc, #332]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a52      	ldr	r2, [pc, #328]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b50      	ldr	r3, [pc, #320]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	494d      	ldr	r1, [pc, #308]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d044      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	4b47      	ldr	r3, [pc, #284]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d119      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e07f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d003      	beq.n	8002e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e06f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e067      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5a:	4b37      	ldr	r3, [pc, #220]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f023 0203 	bic.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4934      	ldr	r1, [pc, #208]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fe38 	bl	8001ae0 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7fe fe34 	bl	8001ae0 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e04f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 020c 	and.w	r2, r3, #12
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1eb      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b25      	ldr	r3, [pc, #148]	@ (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d20c      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b22      	ldr	r3, [pc, #136]	@ (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b20      	ldr	r3, [pc, #128]	@ (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e032      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed0:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4916      	ldr	r1, [pc, #88]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eee:	4b12      	ldr	r3, [pc, #72]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	490e      	ldr	r1, [pc, #56]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f02:	f000 f821 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002f06:	4602      	mov	r2, r0
 8002f08:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	490a      	ldr	r1, [pc, #40]	@ (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	5ccb      	ldrb	r3, [r1, r3]
 8002f16:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1a:	4a09      	ldr	r2, [pc, #36]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f1e:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fd98 	bl	8001a58 <HAL_InitTick>

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023c00 	.word	0x40023c00
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	08005808 	.word	0x08005808
 8002f40:	20000008 	.word	0x20000008
 8002f44:	2000000c 	.word	0x2000000c

08002f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f4c:	b090      	sub	sp, #64	@ 0x40
 8002f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f54:	2300      	movs	r3, #0
 8002f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f58:	2300      	movs	r3, #0
 8002f5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f60:	4b59      	ldr	r3, [pc, #356]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d00d      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x40>
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	f200 80a1 	bhi.w	80030b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x34>
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d003      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f7a:	e09b      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f7c:	4b53      	ldr	r3, [pc, #332]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x184>)
 8002f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002f80:	e09b      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f82:	4b53      	ldr	r3, [pc, #332]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f86:	e098      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f88:	4b4f      	ldr	r3, [pc, #316]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f90:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f92:	4b4d      	ldr	r3, [pc, #308]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d028      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	099b      	lsrs	r3, r3, #6
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4b47      	ldr	r3, [pc, #284]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fb4:	fb03 f201 	mul.w	r2, r3, r1
 8002fb8:	2300      	movs	r3, #0
 8002fba:	fb00 f303 	mul.w	r3, r0, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4a43      	ldr	r2, [pc, #268]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fc2:	fba0 1202 	umull	r1, r2, r0, r2
 8002fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fc8:	460a      	mov	r2, r1
 8002fca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002fcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fce:	4413      	add	r3, r2
 8002fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	61fa      	str	r2, [r7, #28]
 8002fda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002fe2:	f7fd f8f1 	bl	80001c8 <__aeabi_uldivmod>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4613      	mov	r3, r2
 8002fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fee:	e053      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff0:	4b35      	ldr	r3, [pc, #212]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	617a      	str	r2, [r7, #20]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003002:	f04f 0b00 	mov.w	fp, #0
 8003006:	4652      	mov	r2, sl
 8003008:	465b      	mov	r3, fp
 800300a:	f04f 0000 	mov.w	r0, #0
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	0159      	lsls	r1, r3, #5
 8003014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003018:	0150      	lsls	r0, r2, #5
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	ebb2 080a 	subs.w	r8, r2, sl
 8003022:	eb63 090b 	sbc.w	r9, r3, fp
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003032:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003036:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800303a:	ebb2 0408 	subs.w	r4, r2, r8
 800303e:	eb63 0509 	sbc.w	r5, r3, r9
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	00eb      	lsls	r3, r5, #3
 800304c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003050:	00e2      	lsls	r2, r4, #3
 8003052:	4614      	mov	r4, r2
 8003054:	461d      	mov	r5, r3
 8003056:	eb14 030a 	adds.w	r3, r4, sl
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	eb45 030b 	adc.w	r3, r5, fp
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306e:	4629      	mov	r1, r5
 8003070:	028b      	lsls	r3, r1, #10
 8003072:	4621      	mov	r1, r4
 8003074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003078:	4621      	mov	r1, r4
 800307a:	028a      	lsls	r2, r1, #10
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003082:	2200      	movs	r2, #0
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	60fa      	str	r2, [r7, #12]
 8003088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800308c:	f7fd f89c 	bl	80001c8 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4613      	mov	r3, r2
 8003096:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	3301      	adds	r3, #1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80030a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030b2:	e002      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b4:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x184>)
 80030b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3740      	adds	r7, #64	@ 0x40
 80030c0:	46bd      	mov	sp, r7
 80030c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	00f42400 	.word	0x00f42400
 80030d0:	017d7840 	.word	0x017d7840

080030d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d8:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000008 	.word	0x20000008

080030ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030f0:	f7ff fff0 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b05      	ldr	r3, [pc, #20]	@ (800310c <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0a9b      	lsrs	r3, r3, #10
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4903      	ldr	r1, [pc, #12]	@ (8003110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40023800 	.word	0x40023800
 8003110:	08005818 	.word	0x08005818

08003114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003118:	f7ff ffdc 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	0b5b      	lsrs	r3, r3, #13
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4903      	ldr	r1, [pc, #12]	@ (8003138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	08005818 	.word	0x08005818

0800313c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e041      	b.n	80031d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe f904 	bl	8001370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 fd96 	bl	8003cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d001      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e04e      	b.n	8003292 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a23      	ldr	r2, [pc, #140]	@ (80032a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d022      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x80>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800321e:	d01d      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x80>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1f      	ldr	r2, [pc, #124]	@ (80032a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d018      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x80>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1e      	ldr	r2, [pc, #120]	@ (80032a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d013      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x80>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1c      	ldr	r2, [pc, #112]	@ (80032ac <HAL_TIM_Base_Start_IT+0xd0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00e      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x80>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1b      	ldr	r2, [pc, #108]	@ (80032b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x80>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a19      	ldr	r2, [pc, #100]	@ (80032b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x80>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a18      	ldr	r2, [pc, #96]	@ (80032b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d111      	bne.n	8003280 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b06      	cmp	r3, #6
 800326c:	d010      	beq.n	8003290 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	e007      	b.n	8003290 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40010000 	.word	0x40010000
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800
 80032ac:	40000c00 	.word	0x40000c00
 80032b0:	40010400 	.word	0x40010400
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40001800 	.word	0x40001800

080032bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e041      	b.n	8003352 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f839 	bl	800335a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3304      	adds	r3, #4
 80032f8:	4619      	mov	r1, r3
 80032fa:	4610      	mov	r0, r2
 80032fc:	f000 fcd6 	bl	8003cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <HAL_TIM_PWM_Start+0x24>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	bf14      	ite	ne
 800338c:	2301      	movne	r3, #1
 800338e:	2300      	moveq	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e022      	b.n	80033da <HAL_TIM_PWM_Start+0x6a>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b04      	cmp	r3, #4
 8003398:	d109      	bne.n	80033ae <HAL_TIM_PWM_Start+0x3e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	bf14      	ite	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	2300      	moveq	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	e015      	b.n	80033da <HAL_TIM_PWM_Start+0x6a>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d109      	bne.n	80033c8 <HAL_TIM_PWM_Start+0x58>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e008      	b.n	80033da <HAL_TIM_PWM_Start+0x6a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e07c      	b.n	80034dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_PWM_Start+0x82>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033f0:	e013      	b.n	800341a <HAL_TIM_PWM_Start+0xaa>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_PWM_Start+0x92>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003400:	e00b      	b.n	800341a <HAL_TIM_PWM_Start+0xaa>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d104      	bne.n	8003412 <HAL_TIM_PWM_Start+0xa2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003410:	e003      	b.n	800341a <HAL_TIM_PWM_Start+0xaa>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 ff38 	bl	8004298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2d      	ldr	r2, [pc, #180]	@ (80034e4 <HAL_TIM_PWM_Start+0x174>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_TIM_PWM_Start+0xcc>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2c      	ldr	r2, [pc, #176]	@ (80034e8 <HAL_TIM_PWM_Start+0x178>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_TIM_PWM_Start+0xd0>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_TIM_PWM_Start+0xd2>
 8003440:	2300      	movs	r3, #0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003454:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a22      	ldr	r2, [pc, #136]	@ (80034e4 <HAL_TIM_PWM_Start+0x174>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d022      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003468:	d01d      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1f      	ldr	r2, [pc, #124]	@ (80034ec <HAL_TIM_PWM_Start+0x17c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d018      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1d      	ldr	r2, [pc, #116]	@ (80034f0 <HAL_TIM_PWM_Start+0x180>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1c      	ldr	r2, [pc, #112]	@ (80034f4 <HAL_TIM_PWM_Start+0x184>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00e      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a16      	ldr	r2, [pc, #88]	@ (80034e8 <HAL_TIM_PWM_Start+0x178>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d009      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a18      	ldr	r2, [pc, #96]	@ (80034f8 <HAL_TIM_PWM_Start+0x188>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x136>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a16      	ldr	r2, [pc, #88]	@ (80034fc <HAL_TIM_PWM_Start+0x18c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d111      	bne.n	80034ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d010      	beq.n	80034da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c8:	e007      	b.n	80034da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40010400 	.word	0x40010400
 80034ec:	40000400 	.word	0x40000400
 80034f0:	40000800 	.word	0x40000800
 80034f4:	40000c00 	.word	0x40000c00
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40001800 	.word	0x40001800

08003500 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e097      	b.n	8003644 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd ff75 	bl	8001418 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003544:	f023 0307 	bic.w	r3, r3, #7
 8003548:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f000 fba9 	bl	8003cac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	4313      	orrs	r3, r2
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80035a0:	f023 030c 	bic.w	r3, r3, #12
 80035a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	4313      	orrs	r3, r2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	011a      	lsls	r2, r3, #4
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	031b      	lsls	r3, r3, #12
 80035d0:	4313      	orrs	r3, r2
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80035de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80035e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	4313      	orrs	r3, r2
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800365c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003664:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800366c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003674:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d110      	bne.n	800369e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d102      	bne.n	8003688 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003682:	7b7b      	ldrb	r3, [r7, #13]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d001      	beq.n	800368c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e069      	b.n	8003760 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800369c:	e031      	b.n	8003702 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d110      	bne.n	80036c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80036a4:	7bbb      	ldrb	r3, [r7, #14]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d102      	bne.n	80036b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036aa:	7b3b      	ldrb	r3, [r7, #12]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d001      	beq.n	80036b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e055      	b.n	8003760 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036c4:	e01d      	b.n	8003702 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d108      	bne.n	80036de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80036cc:	7bbb      	ldrb	r3, [r7, #14]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d105      	bne.n	80036de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036d2:	7b7b      	ldrb	r3, [r7, #13]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d102      	bne.n	80036de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036d8:	7b3b      	ldrb	r3, [r7, #12]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d001      	beq.n	80036e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e03e      	b.n	8003760 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_TIM_Encoder_Start+0xc4>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b04      	cmp	r3, #4
 800370c:	d008      	beq.n	8003720 <HAL_TIM_Encoder_Start+0xd4>
 800370e:	e00f      	b.n	8003730 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2201      	movs	r2, #1
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fdbd 	bl	8004298 <TIM_CCxChannelCmd>
      break;
 800371e:	e016      	b.n	800374e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2201      	movs	r2, #1
 8003726:	2104      	movs	r1, #4
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fdb5 	bl	8004298 <TIM_CCxChannelCmd>
      break;
 800372e:	e00e      	b.n	800374e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2201      	movs	r2, #1
 8003736:	2100      	movs	r1, #0
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fdad 	bl	8004298 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2201      	movs	r2, #1
 8003744:	2104      	movs	r1, #4
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fda6 	bl	8004298 <TIM_CCxChannelCmd>
      break;
 800374c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0201 	orr.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d020      	beq.n	80037cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01b      	beq.n	80037cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0202 	mvn.w	r2, #2
 800379c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fa5b 	bl	8003c6e <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa4d 	bl	8003c5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fa5e 	bl	8003c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d020      	beq.n	8003818 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01b      	beq.n	8003818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0204 	mvn.w	r2, #4
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa35 	bl	8003c6e <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa27 	bl	8003c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fa38 	bl	8003c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d020      	beq.n	8003864 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01b      	beq.n	8003864 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0208 	mvn.w	r2, #8
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa0f 	bl	8003c6e <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa01 	bl	8003c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fa12 	bl	8003c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d020      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01b      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0210 	mvn.w	r2, #16
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2208      	movs	r2, #8
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9e9 	bl	8003c6e <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f9db 	bl	8003c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f9ec 	bl	8003c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0201 	mvn.w	r2, #1
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fc feac 	bl	800062c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fdce 	bl	8004494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00c      	beq.n	800391c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f9bd 	bl	8003c96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0220 	mvn.w	r2, #32
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fda0 	bl	8004480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003962:	2302      	movs	r3, #2
 8003964:	e0ae      	b.n	8003ac4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	f200 809f 	bhi.w	8003ab4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003976:	a201      	add	r2, pc, #4	@ (adr r2, 800397c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	080039b1 	.word	0x080039b1
 8003980:	08003ab5 	.word	0x08003ab5
 8003984:	08003ab5 	.word	0x08003ab5
 8003988:	08003ab5 	.word	0x08003ab5
 800398c:	080039f1 	.word	0x080039f1
 8003990:	08003ab5 	.word	0x08003ab5
 8003994:	08003ab5 	.word	0x08003ab5
 8003998:	08003ab5 	.word	0x08003ab5
 800399c:	08003a33 	.word	0x08003a33
 80039a0:	08003ab5 	.word	0x08003ab5
 80039a4:	08003ab5 	.word	0x08003ab5
 80039a8:	08003ab5 	.word	0x08003ab5
 80039ac:	08003a73 	.word	0x08003a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fa24 	bl	8003e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0208 	orr.w	r2, r2, #8
 80039ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6999      	ldr	r1, [r3, #24]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	619a      	str	r2, [r3, #24]
      break;
 80039ee:	e064      	b.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fa74 	bl	8003ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6999      	ldr	r1, [r3, #24]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	021a      	lsls	r2, r3, #8
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	619a      	str	r2, [r3, #24]
      break;
 8003a30:	e043      	b.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fac9 	bl	8003fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0208 	orr.w	r2, r2, #8
 8003a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0204 	bic.w	r2, r2, #4
 8003a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69d9      	ldr	r1, [r3, #28]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	61da      	str	r2, [r3, #28]
      break;
 8003a70:	e023      	b.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fb1d 	bl	80040b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69d9      	ldr	r1, [r3, #28]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	021a      	lsls	r2, r3, #8
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	61da      	str	r2, [r3, #28]
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e0b4      	b.n	8003c52 <HAL_TIM_ConfigClockSource+0x186>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b20:	d03e      	beq.n	8003ba0 <HAL_TIM_ConfigClockSource+0xd4>
 8003b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b26:	f200 8087 	bhi.w	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b2e:	f000 8086 	beq.w	8003c3e <HAL_TIM_ConfigClockSource+0x172>
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b36:	d87f      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b38:	2b70      	cmp	r3, #112	@ 0x70
 8003b3a:	d01a      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0xa6>
 8003b3c:	2b70      	cmp	r3, #112	@ 0x70
 8003b3e:	d87b      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b40:	2b60      	cmp	r3, #96	@ 0x60
 8003b42:	d050      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x11a>
 8003b44:	2b60      	cmp	r3, #96	@ 0x60
 8003b46:	d877      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b48:	2b50      	cmp	r3, #80	@ 0x50
 8003b4a:	d03c      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b4c:	2b50      	cmp	r3, #80	@ 0x50
 8003b4e:	d873      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b50:	2b40      	cmp	r3, #64	@ 0x40
 8003b52:	d058      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x13a>
 8003b54:	2b40      	cmp	r3, #64	@ 0x40
 8003b56:	d86f      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b30      	cmp	r3, #48	@ 0x30
 8003b5a:	d064      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x15a>
 8003b5c:	2b30      	cmp	r3, #48	@ 0x30
 8003b5e:	d86b      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d060      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x15a>
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d867      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d05c      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x15a>
 8003b6c:	2b10      	cmp	r3, #16
 8003b6e:	d05a      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x15a>
 8003b70:	e062      	b.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b82:	f000 fb69 	bl	8004258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	609a      	str	r2, [r3, #8]
      break;
 8003b9e:	e04f      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bb0:	f000 fb52 	bl	8004258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bc2:	609a      	str	r2, [r3, #8]
      break;
 8003bc4:	e03c      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f000 fac6 	bl	8004164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2150      	movs	r1, #80	@ 0x50
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fb1f 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003be4:	e02c      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f000 fae5 	bl	80041c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2160      	movs	r1, #96	@ 0x60
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fb0f 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003c04:	e01c      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c12:	461a      	mov	r2, r3
 8003c14:	f000 faa6 	bl	8004164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2140      	movs	r1, #64	@ 0x40
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 faff 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003c24:	e00c      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f000 faf6 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003c36:	e003      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3c:	e000      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a46      	ldr	r2, [pc, #280]	@ (8003dd8 <TIM_Base_SetConfig+0x12c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cca:	d00f      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a43      	ldr	r2, [pc, #268]	@ (8003ddc <TIM_Base_SetConfig+0x130>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00b      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a42      	ldr	r2, [pc, #264]	@ (8003de0 <TIM_Base_SetConfig+0x134>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d007      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a41      	ldr	r2, [pc, #260]	@ (8003de4 <TIM_Base_SetConfig+0x138>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a40      	ldr	r2, [pc, #256]	@ (8003de8 <TIM_Base_SetConfig+0x13c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d108      	bne.n	8003cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a35      	ldr	r2, [pc, #212]	@ (8003dd8 <TIM_Base_SetConfig+0x12c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d02b      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0c:	d027      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a32      	ldr	r2, [pc, #200]	@ (8003ddc <TIM_Base_SetConfig+0x130>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d023      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a31      	ldr	r2, [pc, #196]	@ (8003de0 <TIM_Base_SetConfig+0x134>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01f      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a30      	ldr	r2, [pc, #192]	@ (8003de4 <TIM_Base_SetConfig+0x138>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01b      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a2f      	ldr	r2, [pc, #188]	@ (8003de8 <TIM_Base_SetConfig+0x13c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d017      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a2e      	ldr	r2, [pc, #184]	@ (8003dec <TIM_Base_SetConfig+0x140>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a2d      	ldr	r2, [pc, #180]	@ (8003df0 <TIM_Base_SetConfig+0x144>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00f      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a2c      	ldr	r2, [pc, #176]	@ (8003df4 <TIM_Base_SetConfig+0x148>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00b      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2b      	ldr	r2, [pc, #172]	@ (8003df8 <TIM_Base_SetConfig+0x14c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a2a      	ldr	r2, [pc, #168]	@ (8003dfc <TIM_Base_SetConfig+0x150>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d003      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a29      	ldr	r2, [pc, #164]	@ (8003e00 <TIM_Base_SetConfig+0x154>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d108      	bne.n	8003d70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a10      	ldr	r2, [pc, #64]	@ (8003dd8 <TIM_Base_SetConfig+0x12c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <TIM_Base_SetConfig+0xf8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a12      	ldr	r2, [pc, #72]	@ (8003de8 <TIM_Base_SetConfig+0x13c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d103      	bne.n	8003dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d105      	bne.n	8003dca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f023 0201 	bic.w	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	611a      	str	r2, [r3, #16]
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800
 8003de4:	40000c00 	.word	0x40000c00
 8003de8:	40010400 	.word	0x40010400
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40014400 	.word	0x40014400
 8003df4:	40014800 	.word	0x40014800
 8003df8:	40001800 	.word	0x40001800
 8003dfc:	40001c00 	.word	0x40001c00
 8003e00:	40002000 	.word	0x40002000

08003e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	f023 0201 	bic.w	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0303 	bic.w	r3, r3, #3
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f023 0302 	bic.w	r3, r3, #2
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a20      	ldr	r2, [pc, #128]	@ (8003edc <TIM_OC1_SetConfig+0xd8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_OC1_SetConfig+0x64>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee0 <TIM_OC1_SetConfig+0xdc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d10c      	bne.n	8003e82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 0308 	bic.w	r3, r3, #8
 8003e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f023 0304 	bic.w	r3, r3, #4
 8003e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a15      	ldr	r2, [pc, #84]	@ (8003edc <TIM_OC1_SetConfig+0xd8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_OC1_SetConfig+0x8e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ee0 <TIM_OC1_SetConfig+0xdc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d111      	bne.n	8003eb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	621a      	str	r2, [r3, #32]
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40010400 	.word	0x40010400

08003ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f023 0210 	bic.w	r2, r3, #16
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0320 	bic.w	r3, r3, #32
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a22      	ldr	r2, [pc, #136]	@ (8003fc8 <TIM_OC2_SetConfig+0xe4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_OC2_SetConfig+0x68>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a21      	ldr	r2, [pc, #132]	@ (8003fcc <TIM_OC2_SetConfig+0xe8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10d      	bne.n	8003f68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a17      	ldr	r2, [pc, #92]	@ (8003fc8 <TIM_OC2_SetConfig+0xe4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_OC2_SetConfig+0x94>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a16      	ldr	r2, [pc, #88]	@ (8003fcc <TIM_OC2_SetConfig+0xe8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d113      	bne.n	8003fa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40010400 	.word	0x40010400

08003fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a21      	ldr	r2, [pc, #132]	@ (80040b0 <TIM_OC3_SetConfig+0xe0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_OC3_SetConfig+0x66>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a20      	ldr	r2, [pc, #128]	@ (80040b4 <TIM_OC3_SetConfig+0xe4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d10d      	bne.n	8004052 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800403c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a16      	ldr	r2, [pc, #88]	@ (80040b0 <TIM_OC3_SetConfig+0xe0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d003      	beq.n	8004062 <TIM_OC3_SetConfig+0x92>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a15      	ldr	r2, [pc, #84]	@ (80040b4 <TIM_OC3_SetConfig+0xe4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d113      	bne.n	800408a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	621a      	str	r2, [r3, #32]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40010400 	.word	0x40010400

080040b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	031b      	lsls	r3, r3, #12
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a12      	ldr	r2, [pc, #72]	@ (800415c <TIM_OC4_SetConfig+0xa4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_OC4_SetConfig+0x68>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a11      	ldr	r2, [pc, #68]	@ (8004160 <TIM_OC4_SetConfig+0xa8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d109      	bne.n	8004134 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	019b      	lsls	r3, r3, #6
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40010000 	.word	0x40010000
 8004160:	40010400 	.word	0x40010400

08004164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0201 	bic.w	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800418e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 030a 	bic.w	r3, r3, #10
 80041a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b087      	sub	sp, #28
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f023 0210 	bic.w	r2, r3, #16
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	031b      	lsls	r3, r3, #12
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	f043 0307 	orr.w	r3, r3, #7
 8004244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	609a      	str	r2, [r3, #8]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	021a      	lsls	r2, r3, #8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	431a      	orrs	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	609a      	str	r2, [r3, #8]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2201      	movs	r2, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	401a      	ands	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e05a      	b.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a21      	ldr	r2, [pc, #132]	@ (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d022      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004348:	d01d      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1d      	ldr	r2, [pc, #116]	@ (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d018      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1b      	ldr	r2, [pc, #108]	@ (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1a      	ldr	r2, [pc, #104]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00e      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a18      	ldr	r2, [pc, #96]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d009      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a17      	ldr	r2, [pc, #92]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d004      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a15      	ldr	r2, [pc, #84]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10c      	bne.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800438c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	4313      	orrs	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40010000 	.word	0x40010000
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40000800 	.word	0x40000800
 80043cc:	40000c00 	.word	0x40000c00
 80043d0:	40010400 	.word	0x40010400
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40001800 	.word	0x40001800

080043dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e03d      	b.n	8004474 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e042      	b.n	8004540 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fd f8fa 	bl	80016c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2224      	movs	r2, #36	@ 0x24
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fed7 	bl	80052a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695a      	ldr	r2, [r3, #20]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b20      	cmp	r3, #32
 8004560:	d121      	bne.n	80045a6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_UART_Transmit_IT+0x26>
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e01a      	b.n	80045a8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	88fa      	ldrh	r2, [r7, #6]
 8004582:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2221      	movs	r2, #33	@ 0x21
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045a0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08c      	sub	sp, #48	@ 0x30
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	4613      	mov	r3, r2
 80045c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d14a      	bne.n	8004664 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e043      	b.n	8004666 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	461a      	mov	r2, r3
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fbf5 	bl	8004de0 <UART_Start_Receive_DMA>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80045fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004600:	2b00      	cmp	r3, #0
 8004602:	d12c      	bne.n	800465e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004608:	2b01      	cmp	r3, #1
 800460a:	d125      	bne.n	8004658 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	330c      	adds	r3, #12
 8004628:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	617b      	str	r3, [r7, #20]
   return(result);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f043 0310 	orr.w	r3, r3, #16
 8004638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004642:	627a      	str	r2, [r7, #36]	@ 0x24
 8004644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6a39      	ldr	r1, [r7, #32]
 8004648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e5      	bne.n	8004622 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004656:	e002      	b.n	800465e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800465e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004662:	e000      	b.n	8004666 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	3730      	adds	r7, #48	@ 0x30
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b0ba      	sub	sp, #232	@ 0xe8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80046ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10f      	bne.n	80046d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_UART_IRQHandler+0x66>
 80046c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fd27 	bl	8005122 <UART_Receive_IT>
      return;
 80046d4:	e25b      	b.n	8004b8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80de 	beq.w	800489c <HAL_UART_IRQHandler+0x22c>
 80046e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80d1 	beq.w	800489c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <HAL_UART_IRQHandler+0xae>
 8004706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800470a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004716:	f043 0201 	orr.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00b      	beq.n	8004742 <HAL_UART_IRQHandler+0xd2>
 800472a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473a:	f043 0202 	orr.w	r2, r3, #2
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_UART_IRQHandler+0xf6>
 800474e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	f043 0204 	orr.w	r2, r3, #4
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d011      	beq.n	8004796 <HAL_UART_IRQHandler+0x126>
 8004772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800477e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478e:	f043 0208 	orr.w	r2, r3, #8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 81f2 	beq.w	8004b84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_UART_IRQHandler+0x14e>
 80047ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fcb2 	bl	8005122 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <HAL_UART_IRQHandler+0x17a>
 80047e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d04f      	beq.n	800488a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fbba 	bl	8004f64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fa:	2b40      	cmp	r3, #64	@ 0x40
 80047fc:	d141      	bne.n	8004882 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800481c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3314      	adds	r3, #20
 8004826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800482a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800482e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1d9      	bne.n	80047fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d013      	beq.n	800487a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004856:	4a7e      	ldr	r2, [pc, #504]	@ (8004a50 <HAL_UART_IRQHandler+0x3e0>)
 8004858:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485e:	4618      	mov	r0, r3
 8004860:	f7fd fbd2 	bl	8002008 <HAL_DMA_Abort_IT>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004874:	4610      	mov	r0, r2
 8004876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	e00e      	b.n	8004898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f9a8 	bl	8004bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	e00a      	b.n	8004898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f9a4 	bl	8004bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	e006      	b.n	8004898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f9a0 	bl	8004bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004896:	e175      	b.n	8004b84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004898:	bf00      	nop
    return;
 800489a:	e173      	b.n	8004b84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	f040 814f 	bne.w	8004b44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8148 	beq.w	8004b44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8141 	beq.w	8004b44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	f040 80b6 	bne.w	8004a54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8145 	beq.w	8004b88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004906:	429a      	cmp	r2, r3
 8004908:	f080 813e 	bcs.w	8004b88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004912:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800491e:	f000 8088 	beq.w	8004a32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004938:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800493c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800494e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800495a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004966:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1d9      	bne.n	8004922 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3314      	adds	r3, #20
 8004974:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800497e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004980:	f023 0301 	bic.w	r3, r3, #1
 8004984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3314      	adds	r3, #20
 800498e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004992:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004996:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800499a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e1      	bne.n	800496e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3314      	adds	r3, #20
 80049b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3314      	adds	r3, #20
 80049ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e3      	bne.n	80049aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a02:	f023 0310 	bic.w	r3, r3, #16
 8004a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a14:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a16:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e3      	bne.n	80049f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fd fa7b 	bl	8001f28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7fb fe27 	bl	800069c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a4e:	e09b      	b.n	8004b88 <HAL_UART_IRQHandler+0x518>
 8004a50:	0800502b 	.word	0x0800502b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 808e 	beq.w	8004b8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8089 	beq.w	8004b8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	330c      	adds	r3, #12
 8004a9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004aa0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004aa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e3      	bne.n	8004a7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3314      	adds	r3, #20
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3314      	adds	r3, #20
 8004ad2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ad6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e3      	bne.n	8004ab2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0310 	bic.w	r3, r3, #16
 8004b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	330c      	adds	r3, #12
 8004b18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b1c:	61fa      	str	r2, [r7, #28]
 8004b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	69b9      	ldr	r1, [r7, #24]
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	617b      	str	r3, [r7, #20]
   return(result);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e3      	bne.n	8004af8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fb fdad 	bl	800069c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b42:	e023      	b.n	8004b8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <HAL_UART_IRQHandler+0x4f4>
 8004b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fa78 	bl	8005052 <UART_Transmit_IT>
    return;
 8004b62:	e014      	b.n	8004b8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00e      	beq.n	8004b8e <HAL_UART_IRQHandler+0x51e>
 8004b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fab8 	bl	80050f2 <UART_EndTransmit_IT>
    return;
 8004b82:	e004      	b.n	8004b8e <HAL_UART_IRQHandler+0x51e>
    return;
 8004b84:	bf00      	nop
 8004b86:	e002      	b.n	8004b8e <HAL_UART_IRQHandler+0x51e>
      return;
 8004b88:	bf00      	nop
 8004b8a:	e000      	b.n	8004b8e <HAL_UART_IRQHandler+0x51e>
      return;
 8004b8c:	bf00      	nop
  }
}
 8004b8e:	37e8      	adds	r7, #232	@ 0xe8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b09c      	sub	sp, #112	@ 0x70
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d172      	bne.n	8004ce6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c02:	2200      	movs	r2, #0
 8004c04:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004c26:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c28:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e5      	bne.n	8004c06 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3314      	adds	r3, #20
 8004c40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e5      	bne.n	8004c3a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3314      	adds	r3, #20
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c84:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3314      	adds	r3, #20
 8004c8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e5      	bne.n	8004c6e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d119      	bne.n	8004ce6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f023 0310 	bic.w	r3, r3, #16
 8004cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	330c      	adds	r3, #12
 8004cd0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004cd2:	61fa      	str	r2, [r7, #28]
 8004cd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	69b9      	ldr	r1, [r7, #24]
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	617b      	str	r3, [r7, #20]
   return(result);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e5      	bne.n	8004cb2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ce8:	2200      	movs	r2, #0
 8004cea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d106      	bne.n	8004d02 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cf6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004cfc:	f7fb fcce 	bl	800069c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d00:	e002      	b.n	8004d08 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004d02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d04:	f7ff ff50 	bl	8004ba8 <HAL_UART_RxCpltCallback>
}
 8004d08:	bf00      	nop
 8004d0a:	3770      	adds	r7, #112	@ 0x70
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d108      	bne.n	8004d3e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	4619      	mov	r1, r3
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7fb fcb0 	bl	800069c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d3c:	e002      	b.n	8004d44 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7ff ff3c 	bl	8004bbc <HAL_UART_RxHalfCpltCallback>
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d68:	2b80      	cmp	r3, #128	@ 0x80
 8004d6a:	bf0c      	ite	eq
 8004d6c:	2301      	moveq	r3, #1
 8004d6e:	2300      	movne	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b21      	cmp	r3, #33	@ 0x21
 8004d7e:	d108      	bne.n	8004d92 <UART_DMAError+0x46>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004d8c:	68b8      	ldr	r0, [r7, #8]
 8004d8e:	f000 f8c1 	bl	8004f14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9c:	2b40      	cmp	r3, #64	@ 0x40
 8004d9e:	bf0c      	ite	eq
 8004da0:	2301      	moveq	r3, #1
 8004da2:	2300      	movne	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b22      	cmp	r3, #34	@ 0x22
 8004db2:	d108      	bne.n	8004dc6 <UART_DMAError+0x7a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d005      	beq.n	8004dc6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004dc0:	68b8      	ldr	r0, [r7, #8]
 8004dc2:	f000 f8cf 	bl	8004f64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dca:	f043 0210 	orr.w	r2, r3, #16
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dd2:	68b8      	ldr	r0, [r7, #8]
 8004dd4:	f7ff fefc 	bl	8004bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b098      	sub	sp, #96	@ 0x60
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	4613      	mov	r3, r2
 8004dec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	88fa      	ldrh	r2, [r7, #6]
 8004df8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2222      	movs	r2, #34	@ 0x22
 8004e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0c:	4a3e      	ldr	r2, [pc, #248]	@ (8004f08 <UART_Start_Receive_DMA+0x128>)
 8004e0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e14:	4a3d      	ldr	r2, [pc, #244]	@ (8004f0c <UART_Start_Receive_DMA+0x12c>)
 8004e16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f10 <UART_Start_Receive_DMA+0x130>)
 8004e1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e24:	2200      	movs	r2, #0
 8004e26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004e28:	f107 0308 	add.w	r3, r7, #8
 8004e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	f7fd f81a 	bl	8001e78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004e44:	2300      	movs	r3, #0
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d019      	beq.n	8004e96 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e82:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004e88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e5      	bne.n	8004e62 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3314      	adds	r3, #20
 8004e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	657b      	str	r3, [r7, #84]	@ 0x54
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3314      	adds	r3, #20
 8004eb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004eb6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004eb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004ebc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e5      	bne.n	8004e96 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3314      	adds	r3, #20
 8004ed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ee0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3314      	adds	r3, #20
 8004ee8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004eea:	627a      	str	r2, [r7, #36]	@ 0x24
 8004eec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6a39      	ldr	r1, [r7, #32]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e5      	bne.n	8004eca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3760      	adds	r7, #96	@ 0x60
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	08004be5 	.word	0x08004be5
 8004f0c:	08004d11 	.word	0x08004d11
 8004f10:	08004d4d 	.word	0x08004d4d

08004f14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b089      	sub	sp, #36	@ 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	330c      	adds	r3, #12
 8004f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f32:	61fb      	str	r3, [r7, #28]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	61ba      	str	r2, [r7, #24]
 8004f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6979      	ldr	r1, [r7, #20]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e5      	bne.n	8004f1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004f58:	bf00      	nop
 8004f5a:	3724      	adds	r7, #36	@ 0x24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b095      	sub	sp, #84	@ 0x54
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3314      	adds	r3, #20
 8004fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3314      	adds	r3, #20
 8004fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d119      	bne.n	8005010 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f023 0310 	bic.w	r3, r3, #16
 8004ff2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ffc:	61ba      	str	r2, [r7, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6979      	ldr	r1, [r7, #20]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	613b      	str	r3, [r7, #16]
   return(result);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e5      	bne.n	8004fdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800501e:	bf00      	nop
 8005020:	3754      	adds	r7, #84	@ 0x54
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005036:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7ff fdc3 	bl	8004bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b21      	cmp	r3, #33	@ 0x21
 8005064:	d13e      	bne.n	80050e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506e:	d114      	bne.n	800509a <UART_Transmit_IT+0x48>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d110      	bne.n	800509a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800508c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	1c9a      	adds	r2, r3, #2
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	621a      	str	r2, [r3, #32]
 8005098:	e008      	b.n	80050ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	1c59      	adds	r1, r3, #1
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6211      	str	r1, [r2, #32]
 80050a4:	781a      	ldrb	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4619      	mov	r1, r3
 80050ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10f      	bne.n	80050e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	e000      	b.n	80050e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050e4:	2302      	movs	r3, #2
  }
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005108:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fd3e 	bl	8004b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b08c      	sub	sp, #48	@ 0x30
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b22      	cmp	r3, #34	@ 0x22
 8005134:	f040 80ae 	bne.w	8005294 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005140:	d117      	bne.n	8005172 <UART_Receive_IT+0x50>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d113      	bne.n	8005172 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005152:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	b29b      	uxth	r3, r3
 800515c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005160:	b29a      	uxth	r2, r3
 8005162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005164:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	1c9a      	adds	r2, r3, #2
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005170:	e026      	b.n	80051c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005184:	d007      	beq.n	8005196 <UART_Receive_IT+0x74>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10a      	bne.n	80051a4 <UART_Receive_IT+0x82>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	b2da      	uxtb	r2, r3
 800519e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e008      	b.n	80051b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	4619      	mov	r1, r3
 80051ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d15d      	bne.n	8005290 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0220 	bic.w	r2, r2, #32
 80051e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0201 	bic.w	r2, r2, #1
 8005202:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005216:	2b01      	cmp	r3, #1
 8005218:	d135      	bne.n	8005286 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	613b      	str	r3, [r7, #16]
   return(result);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f023 0310 	bic.w	r3, r3, #16
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005240:	623a      	str	r2, [r7, #32]
 8005242:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	69f9      	ldr	r1, [r7, #28]
 8005246:	6a3a      	ldr	r2, [r7, #32]
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	61bb      	str	r3, [r7, #24]
   return(result);
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e5      	bne.n	8005220 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0310 	and.w	r3, r3, #16
 800525e:	2b10      	cmp	r3, #16
 8005260:	d10a      	bne.n	8005278 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800527c:	4619      	mov	r1, r3
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fb fa0c 	bl	800069c <HAL_UARTEx_RxEventCallback>
 8005284:	e002      	b.n	800528c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff fc8e 	bl	8004ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e002      	b.n	8005296 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	e000      	b.n	8005296 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005294:	2302      	movs	r3, #2
  }
}
 8005296:	4618      	mov	r0, r3
 8005298:	3730      	adds	r7, #48	@ 0x30
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a4:	b0c0      	sub	sp, #256	@ 0x100
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052bc:	68d9      	ldr	r1, [r3, #12]
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	ea40 0301 	orr.w	r3, r0, r1
 80052c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	431a      	orrs	r2, r3
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052f8:	f021 010c 	bic.w	r1, r1, #12
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005306:	430b      	orrs	r3, r1
 8005308:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531a:	6999      	ldr	r1, [r3, #24]
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	ea40 0301 	orr.w	r3, r0, r1
 8005326:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4b8f      	ldr	r3, [pc, #572]	@ (800556c <UART_SetConfig+0x2cc>)
 8005330:	429a      	cmp	r2, r3
 8005332:	d005      	beq.n	8005340 <UART_SetConfig+0xa0>
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b8d      	ldr	r3, [pc, #564]	@ (8005570 <UART_SetConfig+0x2d0>)
 800533c:	429a      	cmp	r2, r3
 800533e:	d104      	bne.n	800534a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005340:	f7fd fee8 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8005344:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005348:	e003      	b.n	8005352 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800534a:	f7fd fecf 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 800534e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800535c:	f040 810c 	bne.w	8005578 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005364:	2200      	movs	r2, #0
 8005366:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800536a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800536e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005372:	4622      	mov	r2, r4
 8005374:	462b      	mov	r3, r5
 8005376:	1891      	adds	r1, r2, r2
 8005378:	65b9      	str	r1, [r7, #88]	@ 0x58
 800537a:	415b      	adcs	r3, r3
 800537c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800537e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005382:	4621      	mov	r1, r4
 8005384:	eb12 0801 	adds.w	r8, r2, r1
 8005388:	4629      	mov	r1, r5
 800538a:	eb43 0901 	adc.w	r9, r3, r1
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800539a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800539e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053a2:	4690      	mov	r8, r2
 80053a4:	4699      	mov	r9, r3
 80053a6:	4623      	mov	r3, r4
 80053a8:	eb18 0303 	adds.w	r3, r8, r3
 80053ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053b0:	462b      	mov	r3, r5
 80053b2:	eb49 0303 	adc.w	r3, r9, r3
 80053b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053ce:	460b      	mov	r3, r1
 80053d0:	18db      	adds	r3, r3, r3
 80053d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80053d4:	4613      	mov	r3, r2
 80053d6:	eb42 0303 	adc.w	r3, r2, r3
 80053da:	657b      	str	r3, [r7, #84]	@ 0x54
 80053dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053e4:	f7fa fef0 	bl	80001c8 <__aeabi_uldivmod>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4b61      	ldr	r3, [pc, #388]	@ (8005574 <UART_SetConfig+0x2d4>)
 80053ee:	fba3 2302 	umull	r2, r3, r3, r2
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	011c      	lsls	r4, r3, #4
 80053f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005400:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005404:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005408:	4642      	mov	r2, r8
 800540a:	464b      	mov	r3, r9
 800540c:	1891      	adds	r1, r2, r2
 800540e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005410:	415b      	adcs	r3, r3
 8005412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005414:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005418:	4641      	mov	r1, r8
 800541a:	eb12 0a01 	adds.w	sl, r2, r1
 800541e:	4649      	mov	r1, r9
 8005420:	eb43 0b01 	adc.w	fp, r3, r1
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005430:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005438:	4692      	mov	sl, r2
 800543a:	469b      	mov	fp, r3
 800543c:	4643      	mov	r3, r8
 800543e:	eb1a 0303 	adds.w	r3, sl, r3
 8005442:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005446:	464b      	mov	r3, r9
 8005448:	eb4b 0303 	adc.w	r3, fp, r3
 800544c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800545c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005460:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005464:	460b      	mov	r3, r1
 8005466:	18db      	adds	r3, r3, r3
 8005468:	643b      	str	r3, [r7, #64]	@ 0x40
 800546a:	4613      	mov	r3, r2
 800546c:	eb42 0303 	adc.w	r3, r2, r3
 8005470:	647b      	str	r3, [r7, #68]	@ 0x44
 8005472:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005476:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800547a:	f7fa fea5 	bl	80001c8 <__aeabi_uldivmod>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4611      	mov	r1, r2
 8005484:	4b3b      	ldr	r3, [pc, #236]	@ (8005574 <UART_SetConfig+0x2d4>)
 8005486:	fba3 2301 	umull	r2, r3, r3, r1
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	2264      	movs	r2, #100	@ 0x64
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	1acb      	subs	r3, r1, r3
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800549a:	4b36      	ldr	r3, [pc, #216]	@ (8005574 <UART_SetConfig+0x2d4>)
 800549c:	fba3 2302 	umull	r2, r3, r3, r2
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054a8:	441c      	add	r4, r3
 80054aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054bc:	4642      	mov	r2, r8
 80054be:	464b      	mov	r3, r9
 80054c0:	1891      	adds	r1, r2, r2
 80054c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054c4:	415b      	adcs	r3, r3
 80054c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054cc:	4641      	mov	r1, r8
 80054ce:	1851      	adds	r1, r2, r1
 80054d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80054d2:	4649      	mov	r1, r9
 80054d4:	414b      	adcs	r3, r1
 80054d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054e4:	4659      	mov	r1, fp
 80054e6:	00cb      	lsls	r3, r1, #3
 80054e8:	4651      	mov	r1, sl
 80054ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ee:	4651      	mov	r1, sl
 80054f0:	00ca      	lsls	r2, r1, #3
 80054f2:	4610      	mov	r0, r2
 80054f4:	4619      	mov	r1, r3
 80054f6:	4603      	mov	r3, r0
 80054f8:	4642      	mov	r2, r8
 80054fa:	189b      	adds	r3, r3, r2
 80054fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005500:	464b      	mov	r3, r9
 8005502:	460a      	mov	r2, r1
 8005504:	eb42 0303 	adc.w	r3, r2, r3
 8005508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005518:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800551c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005520:	460b      	mov	r3, r1
 8005522:	18db      	adds	r3, r3, r3
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005526:	4613      	mov	r3, r2
 8005528:	eb42 0303 	adc.w	r3, r2, r3
 800552c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800552e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005532:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005536:	f7fa fe47 	bl	80001c8 <__aeabi_uldivmod>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4b0d      	ldr	r3, [pc, #52]	@ (8005574 <UART_SetConfig+0x2d4>)
 8005540:	fba3 1302 	umull	r1, r3, r3, r2
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	2164      	movs	r1, #100	@ 0x64
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	3332      	adds	r3, #50	@ 0x32
 8005552:	4a08      	ldr	r2, [pc, #32]	@ (8005574 <UART_SetConfig+0x2d4>)
 8005554:	fba2 2303 	umull	r2, r3, r2, r3
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	f003 0207 	and.w	r2, r3, #7
 800555e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4422      	add	r2, r4
 8005566:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005568:	e106      	b.n	8005778 <UART_SetConfig+0x4d8>
 800556a:	bf00      	nop
 800556c:	40011000 	.word	0x40011000
 8005570:	40011400 	.word	0x40011400
 8005574:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800557c:	2200      	movs	r2, #0
 800557e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005582:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005586:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800558a:	4642      	mov	r2, r8
 800558c:	464b      	mov	r3, r9
 800558e:	1891      	adds	r1, r2, r2
 8005590:	6239      	str	r1, [r7, #32]
 8005592:	415b      	adcs	r3, r3
 8005594:	627b      	str	r3, [r7, #36]	@ 0x24
 8005596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800559a:	4641      	mov	r1, r8
 800559c:	1854      	adds	r4, r2, r1
 800559e:	4649      	mov	r1, r9
 80055a0:	eb43 0501 	adc.w	r5, r3, r1
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	00eb      	lsls	r3, r5, #3
 80055ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055b2:	00e2      	lsls	r2, r4, #3
 80055b4:	4614      	mov	r4, r2
 80055b6:	461d      	mov	r5, r3
 80055b8:	4643      	mov	r3, r8
 80055ba:	18e3      	adds	r3, r4, r3
 80055bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055c0:	464b      	mov	r3, r9
 80055c2:	eb45 0303 	adc.w	r3, r5, r3
 80055c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055e6:	4629      	mov	r1, r5
 80055e8:	008b      	lsls	r3, r1, #2
 80055ea:	4621      	mov	r1, r4
 80055ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055f0:	4621      	mov	r1, r4
 80055f2:	008a      	lsls	r2, r1, #2
 80055f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055f8:	f7fa fde6 	bl	80001c8 <__aeabi_uldivmod>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4b60      	ldr	r3, [pc, #384]	@ (8005784 <UART_SetConfig+0x4e4>)
 8005602:	fba3 2302 	umull	r2, r3, r3, r2
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	011c      	lsls	r4, r3, #4
 800560a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800560e:	2200      	movs	r2, #0
 8005610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005614:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005618:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800561c:	4642      	mov	r2, r8
 800561e:	464b      	mov	r3, r9
 8005620:	1891      	adds	r1, r2, r2
 8005622:	61b9      	str	r1, [r7, #24]
 8005624:	415b      	adcs	r3, r3
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800562c:	4641      	mov	r1, r8
 800562e:	1851      	adds	r1, r2, r1
 8005630:	6139      	str	r1, [r7, #16]
 8005632:	4649      	mov	r1, r9
 8005634:	414b      	adcs	r3, r1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005644:	4659      	mov	r1, fp
 8005646:	00cb      	lsls	r3, r1, #3
 8005648:	4651      	mov	r1, sl
 800564a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800564e:	4651      	mov	r1, sl
 8005650:	00ca      	lsls	r2, r1, #3
 8005652:	4610      	mov	r0, r2
 8005654:	4619      	mov	r1, r3
 8005656:	4603      	mov	r3, r0
 8005658:	4642      	mov	r2, r8
 800565a:	189b      	adds	r3, r3, r2
 800565c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005660:	464b      	mov	r3, r9
 8005662:	460a      	mov	r2, r1
 8005664:	eb42 0303 	adc.w	r3, r2, r3
 8005668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005676:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005684:	4649      	mov	r1, r9
 8005686:	008b      	lsls	r3, r1, #2
 8005688:	4641      	mov	r1, r8
 800568a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800568e:	4641      	mov	r1, r8
 8005690:	008a      	lsls	r2, r1, #2
 8005692:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005696:	f7fa fd97 	bl	80001c8 <__aeabi_uldivmod>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4611      	mov	r1, r2
 80056a0:	4b38      	ldr	r3, [pc, #224]	@ (8005784 <UART_SetConfig+0x4e4>)
 80056a2:	fba3 2301 	umull	r2, r3, r3, r1
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	2264      	movs	r2, #100	@ 0x64
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	1acb      	subs	r3, r1, r3
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	3332      	adds	r3, #50	@ 0x32
 80056b4:	4a33      	ldr	r2, [pc, #204]	@ (8005784 <UART_SetConfig+0x4e4>)
 80056b6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056c0:	441c      	add	r4, r3
 80056c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c6:	2200      	movs	r2, #0
 80056c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80056ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80056cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056d0:	4642      	mov	r2, r8
 80056d2:	464b      	mov	r3, r9
 80056d4:	1891      	adds	r1, r2, r2
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	415b      	adcs	r3, r3
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056e0:	4641      	mov	r1, r8
 80056e2:	1851      	adds	r1, r2, r1
 80056e4:	6039      	str	r1, [r7, #0]
 80056e6:	4649      	mov	r1, r9
 80056e8:	414b      	adcs	r3, r1
 80056ea:	607b      	str	r3, [r7, #4]
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056f8:	4659      	mov	r1, fp
 80056fa:	00cb      	lsls	r3, r1, #3
 80056fc:	4651      	mov	r1, sl
 80056fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005702:	4651      	mov	r1, sl
 8005704:	00ca      	lsls	r2, r1, #3
 8005706:	4610      	mov	r0, r2
 8005708:	4619      	mov	r1, r3
 800570a:	4603      	mov	r3, r0
 800570c:	4642      	mov	r2, r8
 800570e:	189b      	adds	r3, r3, r2
 8005710:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005712:	464b      	mov	r3, r9
 8005714:	460a      	mov	r2, r1
 8005716:	eb42 0303 	adc.w	r3, r2, r3
 800571a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	663b      	str	r3, [r7, #96]	@ 0x60
 8005726:	667a      	str	r2, [r7, #100]	@ 0x64
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005734:	4649      	mov	r1, r9
 8005736:	008b      	lsls	r3, r1, #2
 8005738:	4641      	mov	r1, r8
 800573a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800573e:	4641      	mov	r1, r8
 8005740:	008a      	lsls	r2, r1, #2
 8005742:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005746:	f7fa fd3f 	bl	80001c8 <__aeabi_uldivmod>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4b0d      	ldr	r3, [pc, #52]	@ (8005784 <UART_SetConfig+0x4e4>)
 8005750:	fba3 1302 	umull	r1, r3, r3, r2
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	2164      	movs	r1, #100	@ 0x64
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	3332      	adds	r3, #50	@ 0x32
 8005762:	4a08      	ldr	r2, [pc, #32]	@ (8005784 <UART_SetConfig+0x4e4>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	f003 020f 	and.w	r2, r3, #15
 800576e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4422      	add	r2, r4
 8005776:	609a      	str	r2, [r3, #8]
}
 8005778:	bf00      	nop
 800577a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800577e:	46bd      	mov	sp, r7
 8005780:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005784:	51eb851f 	.word	0x51eb851f

08005788 <memset>:
 8005788:	4402      	add	r2, r0
 800578a:	4603      	mov	r3, r0
 800578c:	4293      	cmp	r3, r2
 800578e:	d100      	bne.n	8005792 <memset+0xa>
 8005790:	4770      	bx	lr
 8005792:	f803 1b01 	strb.w	r1, [r3], #1
 8005796:	e7f9      	b.n	800578c <memset+0x4>

08005798 <__libc_init_array>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4d0d      	ldr	r5, [pc, #52]	@ (80057d0 <__libc_init_array+0x38>)
 800579c:	4c0d      	ldr	r4, [pc, #52]	@ (80057d4 <__libc_init_array+0x3c>)
 800579e:	1b64      	subs	r4, r4, r5
 80057a0:	10a4      	asrs	r4, r4, #2
 80057a2:	2600      	movs	r6, #0
 80057a4:	42a6      	cmp	r6, r4
 80057a6:	d109      	bne.n	80057bc <__libc_init_array+0x24>
 80057a8:	4d0b      	ldr	r5, [pc, #44]	@ (80057d8 <__libc_init_array+0x40>)
 80057aa:	4c0c      	ldr	r4, [pc, #48]	@ (80057dc <__libc_init_array+0x44>)
 80057ac:	f000 f818 	bl	80057e0 <_init>
 80057b0:	1b64      	subs	r4, r4, r5
 80057b2:	10a4      	asrs	r4, r4, #2
 80057b4:	2600      	movs	r6, #0
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	d105      	bne.n	80057c6 <__libc_init_array+0x2e>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c0:	4798      	blx	r3
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7ee      	b.n	80057a4 <__libc_init_array+0xc>
 80057c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ca:	4798      	blx	r3
 80057cc:	3601      	adds	r6, #1
 80057ce:	e7f2      	b.n	80057b6 <__libc_init_array+0x1e>
 80057d0:	08005830 	.word	0x08005830
 80057d4:	08005830 	.word	0x08005830
 80057d8:	08005830 	.word	0x08005830
 80057dc:	08005834 	.word	0x08005834

080057e0 <_init>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr

080057ec <_fini>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	bf00      	nop
 80057f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f2:	bc08      	pop	{r3}
 80057f4:	469e      	mov	lr, r3
 80057f6:	4770      	bx	lr

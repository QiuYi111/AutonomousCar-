
autoCAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008048  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080081d0  080081d0  000091d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008210  08008210  0000a0b0  2**0
                  CONTENTS
  4 .ARM          00000008  08008210  08008210  00009210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008218  08008218  0000a0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008218  08008218  00009218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800821c  0800821c  0000921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08008220  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0b0  2**0
                  CONTENTS
 10 .bss          0000090c  200000b0  200000b0  0000a0b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009bc  200009bc  0000a0b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e28  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c48  00000000  00000000  0001bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  0001eb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b36  00000000  00000000  0001f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002235c  00000000  00000000  00020506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d3c  00000000  00000000  00042862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbaaa  00000000  00000000  0005659e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122048  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e5c  00000000  00000000  0012208c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00125ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080081b8 	.word	0x080081b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	080081b8 	.word	0x080081b8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b96a 	b.w	8000dcc <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	460c      	mov	r4, r1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14e      	bne.n	8000bba <__udivmoddi4+0xaa>
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	458c      	cmp	ip, r1
 8000b20:	4686      	mov	lr, r0
 8000b22:	fab2 f282 	clz	r2, r2
 8000b26:	d962      	bls.n	8000bee <__udivmoddi4+0xde>
 8000b28:	b14a      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2a:	f1c2 0320 	rsb	r3, r2, #32
 8000b2e:	4091      	lsls	r1, r2
 8000b30:	fa20 f303 	lsr.w	r3, r0, r3
 8000b34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b38:	4319      	orrs	r1, r3
 8000b3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f f68c 	uxth.w	r6, ip
 8000b46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b56:	fb04 f106 	mul.w	r1, r4, r6
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	d90a      	bls.n	8000b74 <__udivmoddi4+0x64>
 8000b5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b62:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b66:	f080 8112 	bcs.w	8000d8e <__udivmoddi4+0x27e>
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	f240 810f 	bls.w	8000d8e <__udivmoddi4+0x27e>
 8000b70:	3c02      	subs	r4, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	1a59      	subs	r1, r3, r1
 8000b76:	fa1f f38e 	uxth.w	r3, lr
 8000b7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000b82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b86:	fb00 f606 	mul.w	r6, r0, r6
 8000b8a:	429e      	cmp	r6, r3
 8000b8c:	d90a      	bls.n	8000ba4 <__udivmoddi4+0x94>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b96:	f080 80fc 	bcs.w	8000d92 <__udivmoddi4+0x282>
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	f240 80f9 	bls.w	8000d92 <__udivmoddi4+0x282>
 8000ba0:	4463      	add	r3, ip
 8000ba2:	3802      	subs	r0, #2
 8000ba4:	1b9b      	subs	r3, r3, r6
 8000ba6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11d      	cbz	r5, 8000bb6 <__udivmoddi4+0xa6>
 8000bae:	40d3      	lsrs	r3, r2
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d905      	bls.n	8000bca <__udivmoddi4+0xba>
 8000bbe:	b10d      	cbz	r5, 8000bc4 <__udivmoddi4+0xb4>
 8000bc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	e7f5      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000bca:	fab3 f183 	clz	r1, r3
 8000bce:	2900      	cmp	r1, #0
 8000bd0:	d146      	bne.n	8000c60 <__udivmoddi4+0x150>
 8000bd2:	42a3      	cmp	r3, r4
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xcc>
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	f0c0 80f0 	bcc.w	8000dbc <__udivmoddi4+0x2ac>
 8000bdc:	1a86      	subs	r6, r0, r2
 8000bde:	eb64 0303 	sbc.w	r3, r4, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d0e6      	beq.n	8000bb6 <__udivmoddi4+0xa6>
 8000be8:	e9c5 6300 	strd	r6, r3, [r5]
 8000bec:	e7e3      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	f040 8090 	bne.w	8000d14 <__udivmoddi4+0x204>
 8000bf4:	eba1 040c 	sub.w	r4, r1, ip
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	fa1f f78c 	uxth.w	r7, ip
 8000c00:	2101      	movs	r1, #1
 8000c02:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c12:	fb07 f006 	mul.w	r0, r7, r6
 8000c16:	4298      	cmp	r0, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x11c>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x11a>
 8000c24:	4298      	cmp	r0, r3
 8000c26:	f200 80cd 	bhi.w	8000dc4 <__udivmoddi4+0x2b4>
 8000c2a:	4626      	mov	r6, r4
 8000c2c:	1a1c      	subs	r4, r3, r0
 8000c2e:	fa1f f38e 	uxth.w	r3, lr
 8000c32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c36:	fb08 4410 	mls	r4, r8, r0, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb00 f707 	mul.w	r7, r0, r7
 8000c42:	429f      	cmp	r7, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x148>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x146>
 8000c50:	429f      	cmp	r7, r3
 8000c52:	f200 80b0 	bhi.w	8000db6 <__udivmoddi4+0x2a6>
 8000c56:	4620      	mov	r0, r4
 8000c58:	1bdb      	subs	r3, r3, r7
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0x9c>
 8000c60:	f1c1 0620 	rsb	r6, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6a:	431f      	orrs	r7, r3
 8000c6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c70:	fa04 f301 	lsl.w	r3, r4, r1
 8000c74:	ea43 030c 	orr.w	r3, r3, ip
 8000c78:	40f4      	lsrs	r4, r6
 8000c7a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c7e:	0c38      	lsrs	r0, r7, #16
 8000c80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c84:	fbb4 fef0 	udiv	lr, r4, r0
 8000c88:	fa1f fc87 	uxth.w	ip, r7
 8000c8c:	fb00 441e 	mls	r4, r0, lr, r4
 8000c90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c94:	fb0e f90c 	mul.w	r9, lr, ip
 8000c98:	45a1      	cmp	r9, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	d90a      	bls.n	8000cb6 <__udivmoddi4+0x1a6>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ca6:	f080 8084 	bcs.w	8000db2 <__udivmoddi4+0x2a2>
 8000caa:	45a1      	cmp	r9, r4
 8000cac:	f240 8081 	bls.w	8000db2 <__udivmoddi4+0x2a2>
 8000cb0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb4:	443c      	add	r4, r7
 8000cb6:	eba4 0409 	sub.w	r4, r4, r9
 8000cba:	fa1f f983 	uxth.w	r9, r3
 8000cbe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cc2:	fb00 4413 	mls	r4, r0, r3, r4
 8000cc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cca:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x1d2>
 8000cd2:	193c      	adds	r4, r7, r4
 8000cd4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cd8:	d267      	bcs.n	8000daa <__udivmoddi4+0x29a>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0x29a>
 8000cde:	3b02      	subs	r3, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ce6:	fba0 9302 	umull	r9, r3, r0, r2
 8000cea:	eba4 040c 	sub.w	r4, r4, ip
 8000cee:	429c      	cmp	r4, r3
 8000cf0:	46ce      	mov	lr, r9
 8000cf2:	469c      	mov	ip, r3
 8000cf4:	d351      	bcc.n	8000d9a <__udivmoddi4+0x28a>
 8000cf6:	d04e      	beq.n	8000d96 <__udivmoddi4+0x286>
 8000cf8:	b155      	cbz	r5, 8000d10 <__udivmoddi4+0x200>
 8000cfa:	ebb8 030e 	subs.w	r3, r8, lr
 8000cfe:	eb64 040c 	sbc.w	r4, r4, ip
 8000d02:	fa04 f606 	lsl.w	r6, r4, r6
 8000d06:	40cb      	lsrs	r3, r1
 8000d08:	431e      	orrs	r6, r3
 8000d0a:	40cc      	lsrs	r4, r1
 8000d0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d10:	2100      	movs	r1, #0
 8000d12:	e750      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f103 	lsr.w	r1, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa24 f303 	lsr.w	r3, r4, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	430c      	orrs	r4, r1
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d30:	fa1f f78c 	uxth.w	r7, ip
 8000d34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d38:	fb08 3110 	mls	r1, r8, r0, r3
 8000d3c:	0c23      	lsrs	r3, r4, #16
 8000d3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d42:	fb00 f107 	mul.w	r1, r0, r7
 8000d46:	4299      	cmp	r1, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x24c>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d52:	d22c      	bcs.n	8000dae <__udivmoddi4+0x29e>
 8000d54:	4299      	cmp	r1, r3
 8000d56:	d92a      	bls.n	8000dae <__udivmoddi4+0x29e>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d64:	fb08 3311 	mls	r3, r8, r1, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb01 f307 	mul.w	r3, r1, r7
 8000d70:	42a3      	cmp	r3, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x276>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d7c:	d213      	bcs.n	8000da6 <__udivmoddi4+0x296>
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	d911      	bls.n	8000da6 <__udivmoddi4+0x296>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	1ae4      	subs	r4, r4, r3
 8000d88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d8c:	e739      	b.n	8000c02 <__udivmoddi4+0xf2>
 8000d8e:	4604      	mov	r4, r0
 8000d90:	e6f0      	b.n	8000b74 <__udivmoddi4+0x64>
 8000d92:	4608      	mov	r0, r1
 8000d94:	e706      	b.n	8000ba4 <__udivmoddi4+0x94>
 8000d96:	45c8      	cmp	r8, r9
 8000d98:	d2ae      	bcs.n	8000cf8 <__udivmoddi4+0x1e8>
 8000d9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000da2:	3801      	subs	r0, #1
 8000da4:	e7a8      	b.n	8000cf8 <__udivmoddi4+0x1e8>
 8000da6:	4631      	mov	r1, r6
 8000da8:	e7ed      	b.n	8000d86 <__udivmoddi4+0x276>
 8000daa:	4603      	mov	r3, r0
 8000dac:	e799      	b.n	8000ce2 <__udivmoddi4+0x1d2>
 8000dae:	4630      	mov	r0, r6
 8000db0:	e7d4      	b.n	8000d5c <__udivmoddi4+0x24c>
 8000db2:	46d6      	mov	lr, sl
 8000db4:	e77f      	b.n	8000cb6 <__udivmoddi4+0x1a6>
 8000db6:	4463      	add	r3, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e74d      	b.n	8000c58 <__udivmoddi4+0x148>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e70f      	b.n	8000be4 <__udivmoddi4+0xd4>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	e730      	b.n	8000c2c <__udivmoddi4+0x11c>
 8000dca:	bf00      	nop

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <HAL_TIM_PeriodElapsedCallback>:
float currentRpm_left=0;
float currentRpm_right=0;int ultraLoop=0;
extern float craw_state;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	 if (htim==&htim7){
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4aa0      	ldr	r2, [pc, #640]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d149      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0xa4>
		 setRightRpm(rpmRight);
 8000de0:	4b9f      	ldr	r3, [pc, #636]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000de2:	edd3 7a00 	vldr	s15, [r3]
 8000de6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dea:	f001 f8a7 	bl	8001f3c <setRightRpm>
		 setLeftRpm(rpmLeft);
 8000dee:	4b9d      	ldr	r3, [pc, #628]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000df0:	edd3 7a00 	vldr	s15, [r3]
 8000df4:	eeb0 0a67 	vmov.f32	s0, s15
 8000df8:	f001 f876 	bl	8001ee8 <setLeftRpm>
		 if (spin==1){
 8000dfc:	4b9a      	ldr	r3, [pc, #616]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	f040 8126 	bne.w	8001052 <HAL_TIM_PeriodElapsedCallback+0x282>
			 if (preScaller==dt){
 8000e06:	4b99      	ldr	r3, [pc, #612]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b99      	ldr	r3, [pc, #612]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d12a      	bne.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x98>
			 	 rpmLeft=rpmRight=0;
 8000e12:	4b93      	ldr	r3, [pc, #588]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	4b91      	ldr	r3, [pc, #580]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a91      	ldr	r2, [pc, #580]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000e20:	6013      	str	r3, [r2, #0]
			 	 preScaller=0;
 8000e22:	4b92      	ldr	r3, [pc, #584]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
			 	 spin=0;
 8000e28:	4b8f      	ldr	r3, [pc, #572]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
			 	if (is_crawed==1){
 8000e2e:	4b91      	ldr	r3, [pc, #580]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000e30:	edd3 7a00 	vldr	s15, [r3]
 8000e34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e38:	eef4 7a47 	vcmp.f32	s15, s14
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	f040 8107 	bne.w	8001052 <HAL_TIM_PeriodElapsedCallback+0x282>
			 		setDirection('w');
 8000e44:	2077      	movs	r0, #119	@ 0x77
 8000e46:	f001 fa93 	bl	8002370 <setDirection>
			 	    centralSpeed = 55;
 8000e4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e4c:	4a8b      	ldr	r2, [pc, #556]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e4e:	601a      	str	r2, [r3, #0]
			 	    rpmLeft=rpmRight=centralSpeed;
 8000e50:	4b89      	ldr	r3, [pc, #548]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a82      	ldr	r2, [pc, #520]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b81      	ldr	r3, [pc, #516]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a81      	ldr	r2, [pc, #516]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000e5e:	6013      	str	r3, [r2, #0]
			 		mode=1;
 8000e60:	4b87      	ldr	r3, [pc, #540]	@ (8001080 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	601a      	str	r2, [r3, #0]



	}

}
 8000e66:	e0f4      	b.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x282>
			 }else{preScaller++;}
 8000e68:	4b80      	ldr	r3, [pc, #512]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4a7f      	ldr	r2, [pc, #508]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000e70:	6013      	str	r3, [r2, #0]
}
 8000e72:	e0ee      	b.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x282>
	}else if (htim ==&htim12){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a83      	ldr	r2, [pc, #524]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	f040 80ea 	bne.w	8001052 <HAL_TIM_PeriodElapsedCallback+0x282>
int index = 0;  // Index for cRt array
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
cRt[index++] = 'l';
 8000e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e84:	1c5a      	adds	r2, r3, #1
 8000e86:	627a      	str	r2, [r7, #36]	@ 0x24
 8000e88:	4a7f      	ldr	r2, [pc, #508]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000e8a:	216c      	movs	r1, #108	@ 0x6c
 8000e8c:	54d1      	strb	r1, [r2, r3]
cRt[index++] = ':';
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	627a      	str	r2, [r7, #36]	@ 0x24
 8000e94:	4a7c      	ldr	r2, [pc, #496]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000e96:	213a      	movs	r1, #58	@ 0x3a
 8000e98:	54d1      	strb	r1, [r2, r3]
lengths[0] = float_to_uint8_arry(cRt + index, currentRpm_left, 2);
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9c:	4a7a      	ldr	r2, [pc, #488]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a7a      	ldr	r2, [pc, #488]	@ (800108c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ea2:	edd2 7a00 	vldr	s15, [r2]
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 fc43 	bl	8001738 <float_to_uint8_arry>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	60fb      	str	r3, [r7, #12]
index += lengths[0];
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eba:	4413      	add	r3, r2
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
cRt[index++] = ' ';
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	627a      	str	r2, [r7, #36]	@ 0x24
 8000ec4:	4a70      	ldr	r2, [pc, #448]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	54d1      	strb	r1, [r2, r3]
cRt[index++] = 'r';
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	627a      	str	r2, [r7, #36]	@ 0x24
 8000ed0:	4a6d      	ldr	r2, [pc, #436]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ed2:	2172      	movs	r1, #114	@ 0x72
 8000ed4:	54d1      	strb	r1, [r2, r3]
cRt[index++] = ':';
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	627a      	str	r2, [r7, #36]	@ 0x24
 8000edc:	4a6a      	ldr	r2, [pc, #424]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ede:	213a      	movs	r1, #58	@ 0x3a
 8000ee0:	54d1      	strb	r1, [r2, r3]
lengths[1] = float_to_uint8_arry(cRt + index, currentRpm_right, 2);
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	4a68      	ldr	r2, [pc, #416]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a69      	ldr	r2, [pc, #420]	@ (8001090 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000eea:	edd2 7a00 	vldr	s15, [r2]
 8000eee:	2102      	movs	r1, #2
 8000ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fc1f 	bl	8001738 <float_to_uint8_arry>
 8000efa:	4603      	mov	r3, r0
 8000efc:	613b      	str	r3, [r7, #16]
index += lengths[1];
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f02:	4413      	add	r3, r2
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
cRt[index++] = ' ';
 8000f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f0c:	4a5e      	ldr	r2, [pc, #376]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f0e:	2120      	movs	r1, #32
 8000f10:	54d1      	strb	r1, [r2, r3]
cRt[index++] = 'F';
 8000f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f18:	4a5b      	ldr	r2, [pc, #364]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f1a:	2146      	movs	r1, #70	@ 0x46
 8000f1c:	54d1      	strb	r1, [r2, r3]
cRt[index++] = ':';
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f24:	4a58      	ldr	r2, [pc, #352]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f26:	213a      	movs	r1, #58	@ 0x3a
 8000f28:	54d1      	strb	r1, [r2, r3]
lengths[2] = float_to_uint8_arry(cRt + index, (float)distanceFront, 3);
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2c:	4a56      	ldr	r2, [pc, #344]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a58      	ldr	r2, [pc, #352]	@ (8001094 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000f32:	8812      	ldrh	r2, [r2, #0]
 8000f34:	ee07 2a90 	vmov	s15, r2
 8000f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fbf8 	bl	8001738 <float_to_uint8_arry>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	617b      	str	r3, [r7, #20]
index += lengths[2];
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f50:	4413      	add	r3, r2
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
cRt[index++] = ' ';
 8000f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f5a:	4a4b      	ldr	r2, [pc, #300]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	54d1      	strb	r1, [r2, r3]
cRt[index++] = 'L';
 8000f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f66:	4a48      	ldr	r2, [pc, #288]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f68:	214c      	movs	r1, #76	@ 0x4c
 8000f6a:	54d1      	strb	r1, [r2, r3]
cRt[index++] = ':';
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f72:	4a45      	ldr	r2, [pc, #276]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f74:	213a      	movs	r1, #58	@ 0x3a
 8000f76:	54d1      	strb	r1, [r2, r3]
lengths[3] = float_to_uint8_arry(cRt + index, (float)distanceLeft, 2);
 8000f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7a:	4a43      	ldr	r2, [pc, #268]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a46      	ldr	r2, [pc, #280]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000f80:	8812      	ldrh	r2, [r2, #0]
 8000f82:	ee07 2a90 	vmov	s15, r2
 8000f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fbd1 	bl	8001738 <float_to_uint8_arry>
 8000f96:	4603      	mov	r3, r0
 8000f98:	61bb      	str	r3, [r7, #24]
index += lengths[3];
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f9e:	4413      	add	r3, r2
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
cRt[index++] = ' ';
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	627a      	str	r2, [r7, #36]	@ 0x24
 8000fa8:	4a37      	ldr	r2, [pc, #220]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000faa:	2120      	movs	r1, #32
 8000fac:	54d1      	strb	r1, [r2, r3]
cRt[index++] = 'R';
 8000fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	627a      	str	r2, [r7, #36]	@ 0x24
 8000fb4:	4a34      	ldr	r2, [pc, #208]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000fb6:	2152      	movs	r1, #82	@ 0x52
 8000fb8:	54d1      	strb	r1, [r2, r3]
cRt[index++] = ':';
 8000fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8000fc0:	4a31      	ldr	r2, [pc, #196]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000fc2:	213a      	movs	r1, #58	@ 0x3a
 8000fc4:	54d1      	strb	r1, [r2, r3]
lengths[4] = float_to_uint8_arry(cRt + index, (float)distanceRight, 2);
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a33      	ldr	r2, [pc, #204]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000fce:	8812      	ldrh	r2, [r2, #0]
 8000fd0:	ee07 2a90 	vmov	s15, r2
 8000fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd8:	2102      	movs	r1, #2
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fbaa 	bl	8001738 <float_to_uint8_arry>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	61fb      	str	r3, [r7, #28]
index += lengths[4];
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fec:	4413      	add	r3, r2
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
cRt[index++] = '\n';
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	627a      	str	r2, [r7, #36]	@ 0x24
 8000ff6:	4a24      	ldr	r2, [pc, #144]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ff8:	210a      	movs	r1, #10
 8000ffa:	54d1      	strb	r1, [r2, r3]
cRt[index++] = 'D';
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	627a      	str	r2, [r7, #36]	@ 0x24
 8001002:	4a21      	ldr	r2, [pc, #132]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001004:	2144      	movs	r1, #68	@ 0x44
 8001006:	54d1      	strb	r1, [r2, r3]
cRt[index++] = ':';
 8001008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	627a      	str	r2, [r7, #36]	@ 0x24
 800100e:	4a1e      	ldr	r2, [pc, #120]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001010:	213a      	movs	r1, #58	@ 0x3a
 8001012:	54d1      	strb	r1, [r2, r3]
lengths[5] = float_to_uint8_arry(cRt + index, deriSpeed, 0);
 8001014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001016:	4a1c      	ldr	r2, [pc, #112]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001018:	4413      	add	r3, r2
 800101a:	4a21      	ldr	r2, [pc, #132]	@ (80010a0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800101c:	edd2 7a00 	vldr	s15, [r2]
 8001020:	2100      	movs	r1, #0
 8001022:	eeb0 0a67 	vmov.f32	s0, s15
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fb86 	bl	8001738 <float_to_uint8_arry>
 800102c:	4603      	mov	r3, r0
 800102e:	623b      	str	r3, [r7, #32]
index += lengths[5];
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001034:	4413      	add	r3, r2
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
cRt[index++] = '\n';
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	627a      	str	r2, [r7, #36]	@ 0x24
 800103e:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001040:	210a      	movs	r1, #10
 8001042:	54d1      	strb	r1, [r2, r3]
HAL_UART_Transmit_DMA(&huart5, cRt, index); // Use index for the length of the array
 8001044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001046:	b29b      	uxth	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	490f      	ldr	r1, [pc, #60]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800104c:	4815      	ldr	r0, [pc, #84]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800104e:	f005 fd0d 	bl	8006a6c <HAL_UART_Transmit_DMA>
}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	@ 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000548 	.word	0x20000548
 8001060:	20000304 	.word	0x20000304
 8001064:	20000308 	.word	0x20000308
 8001068:	200000d0 	.word	0x200000d0
 800106c:	200000cc 	.word	0x200000cc
 8001070:	200000d4 	.word	0x200000d4
 8001074:	20000388 	.word	0x20000388
 8001078:	20000310 	.word	0x20000310
 800107c:	425c0000 	.word	0x425c0000
 8001080:	20000390 	.word	0x20000390
 8001084:	20000620 	.word	0x20000620
 8001088:	200000f8 	.word	0x200000f8
 800108c:	200002f8 	.word	0x200002f8
 8001090:	200002fc 	.word	0x200002fc
 8001094:	2000066c 	.word	0x2000066c
 8001098:	20000668 	.word	0x20000668
 800109c:	2000066a 	.word	0x2000066a
 80010a0:	2000030c 	.word	0x2000030c
 80010a4:	200006b8 	.word	0x200006b8

080010a8 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){//需要在main里启动接收函数
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
	if(huart==&huart5){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4aa4      	ldr	r2, [pc, #656]	@ (8001348 <HAL_UARTEx_RxEventCallback+0x2a0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	f040 8167 	bne.w	800138c <HAL_UARTEx_RxEventCallback+0x2e4>

		switch (rxDataBT[0]) {
 80010be:	4ba3      	ldr	r3, [pc, #652]	@ (800134c <HAL_UARTEx_RxEventCallback+0x2a4>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3b41      	subs	r3, #65	@ 0x41
 80010c4:	2b36      	cmp	r3, #54	@ 0x36
 80010c6:	f200 810b 	bhi.w	80012e0 <HAL_UARTEx_RxEventCallback+0x238>
 80010ca:	a201      	add	r2, pc, #4	@ (adr r2, 80010d0 <HAL_UARTEx_RxEventCallback+0x28>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	0800125f 	.word	0x0800125f
 80010d4:	080012e1 	.word	0x080012e1
 80010d8:	08001219 	.word	0x08001219
 80010dc:	0800127d 	.word	0x0800127d
 80010e0:	080012e1 	.word	0x080012e1
 80010e4:	0800129b 	.word	0x0800129b
 80010e8:	080012e1 	.word	0x080012e1
 80010ec:	080012e1 	.word	0x080012e1
 80010f0:	080012e1 	.word	0x080012e1
 80010f4:	080012e1 	.word	0x080012e1
 80010f8:	080012e1 	.word	0x080012e1
 80010fc:	080012e1 	.word	0x080012e1
 8001100:	08001223 	.word	0x08001223
 8001104:	080012e1 	.word	0x080012e1
 8001108:	080012e1 	.word	0x080012e1
 800110c:	080012e1 	.word	0x080012e1
 8001110:	080012e1 	.word	0x080012e1
 8001114:	080012e1 	.word	0x080012e1
 8001118:	080012b9 	.word	0x080012b9
 800111c:	080012e1 	.word	0x080012e1
 8001120:	080012e1 	.word	0x080012e1
 8001124:	080012e1 	.word	0x080012e1
 8001128:	080012e1 	.word	0x080012e1
 800112c:	080012e1 	.word	0x080012e1
 8001130:	080012e1 	.word	0x080012e1
 8001134:	080012e1 	.word	0x080012e1
 8001138:	080012e1 	.word	0x080012e1
 800113c:	080012e1 	.word	0x080012e1
 8001140:	080012e1 	.word	0x080012e1
 8001144:	080012e1 	.word	0x080012e1
 8001148:	080012e1 	.word	0x080012e1
 800114c:	080012e1 	.word	0x080012e1
 8001150:	080011ad 	.word	0x080011ad
 8001154:	080012e1 	.word	0x080012e1
 8001158:	080012e1 	.word	0x080012e1
 800115c:	080011ad 	.word	0x080011ad
 8001160:	080012e1 	.word	0x080012e1
 8001164:	080012e1 	.word	0x080012e1
 8001168:	080012e1 	.word	0x080012e1
 800116c:	080012e1 	.word	0x080012e1
 8001170:	080012e1 	.word	0x080012e1
 8001174:	080012e1 	.word	0x080012e1
 8001178:	080012d7 	.word	0x080012d7
 800117c:	0800122d 	.word	0x0800122d
 8001180:	080012e1 	.word	0x080012e1
 8001184:	080012e1 	.word	0x080012e1
 8001188:	080012e1 	.word	0x080012e1
 800118c:	080012e1 	.word	0x080012e1
 8001190:	080011e7 	.word	0x080011e7
 8001194:	080012e1 	.word	0x080012e1
 8001198:	080011ad 	.word	0x080011ad
 800119c:	080012e1 	.word	0x080012e1
 80011a0:	080012e1 	.word	0x080012e1
 80011a4:	080012e1 	.word	0x080012e1
 80011a8:	080011ad 	.word	0x080011ad
		    case 's':
		    case 'd':
		    case 'a': //数据形式应该是“w1000”这样的
		    	//memset(rxDataOp,0,sizeof rxDataOp);
		    	//centralSpeed=deriSpeed=0;
		        setDirection(rxDataBT[0]);
 80011ac:	4b67      	ldr	r3, [pc, #412]	@ (800134c <HAL_UARTEx_RxEventCallback+0x2a4>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 f8dd 	bl	8002370 <setDirection>
		        rpmLeft = uint8_to_float(rxDataBT + 1, 0);
 80011b6:	4b66      	ldr	r3, [pc, #408]	@ (8001350 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fbd4 	bl	8001968 <uint8_to_float>
 80011c0:	eef0 7a40 	vmov.f32	s15, s0
 80011c4:	4b63      	ldr	r3, [pc, #396]	@ (8001354 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]
		        rpmRight = uint8_to_float(rxDataBT + 1, 0);
 80011ca:	4b61      	ldr	r3, [pc, #388]	@ (8001350 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fbca 	bl	8001968 <uint8_to_float>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
 80011d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001358 <HAL_UARTEx_RxEventCallback+0x2b0>)
 80011da:	edc3 7a00 	vstr	s15, [r3]
		        mode=0;
 80011de:	4b5f      	ldr	r3, [pc, #380]	@ (800135c <HAL_UARTEx_RxEventCallback+0x2b4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
		        break;
 80011e4:	e07d      	b.n	80012e2 <HAL_UARTEx_RxEventCallback+0x23a>
		        break;
		    case 'D':
		        kd = uint8_to_float(rxDataBT + 1, 2);
		        break;*/
		    case 'q':
		    	memset(rxDataOp,0,sizeof rxDataOp);
 80011e6:	221e      	movs	r2, #30
 80011e8:	2100      	movs	r1, #0
 80011ea:	485d      	ldr	r0, [pc, #372]	@ (8001360 <HAL_UARTEx_RxEventCallback+0x2b8>)
 80011ec:	f006 ffb2 	bl	8008154 <memset>
		    	centralSpeed=deriSpeed=0;
 80011f0:	4b5c      	ldr	r3, [pc, #368]	@ (8001364 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001364 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a5a      	ldr	r2, [pc, #360]	@ (8001368 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80011fe:	6013      	str	r3, [r2, #0]
		    	rpmLeft=0;
 8001200:	4b54      	ldr	r3, [pc, #336]	@ (8001354 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
		    	rpmRight=0;
 8001208:	4b53      	ldr	r3, [pc, #332]	@ (8001358 <HAL_UARTEx_RxEventCallback+0x2b0>)
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
		    	mode=0;
 8001210:	4b52      	ldr	r3, [pc, #328]	@ (800135c <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
		        break;
 8001216:	e064      	b.n	80012e2 <HAL_UARTEx_RxEventCallback+0x23a>
		    case 'C':
		        craw_state = 1;
 8001218:	4b54      	ldr	r3, [pc, #336]	@ (800136c <HAL_UARTEx_RxEventCallback+0x2c4>)
 800121a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800121e:	601a      	str	r2, [r3, #0]
		        break;
 8001220:	e05f      	b.n	80012e2 <HAL_UARTEx_RxEventCallback+0x23a>
		    case 'M':
		        craw_state = 2;
 8001222:	4b52      	ldr	r3, [pc, #328]	@ (800136c <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001224:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001228:	601a      	str	r2, [r3, #0]
		        break;
 800122a:	e05a      	b.n	80012e2 <HAL_UARTEx_RxEventCallback+0x23a>
		    case 'l':
		    	//memset(rxDataOp,0,sizeof rxDataOp);
		    	//centralSpeed=deriSpeed=0;
		        setDirection('w');
 800122c:	2077      	movs	r0, #119	@ 0x77
 800122e:	f001 f89f 	bl	8002370 <setDirection>
		        centralSpeed = uint8_to_float(rxDataBT + 1, 0);
 8001232:	4b47      	ldr	r3, [pc, #284]	@ (8001350 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fb96 	bl	8001968 <uint8_to_float>
 800123c:	eef0 7a40 	vmov.f32	s15, s0
 8001240:	4b49      	ldr	r3, [pc, #292]	@ (8001368 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001242:	edc3 7a00 	vstr	s15, [r3]
		        rpmLeft=rpmRight=centralSpeed;
 8001246:	4b48      	ldr	r3, [pc, #288]	@ (8001368 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a43      	ldr	r2, [pc, #268]	@ (8001358 <HAL_UARTEx_RxEventCallback+0x2b0>)
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b42      	ldr	r3, [pc, #264]	@ (8001358 <HAL_UARTEx_RxEventCallback+0x2b0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a40      	ldr	r2, [pc, #256]	@ (8001354 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001254:	6013      	str	r3, [r2, #0]
		        mode=1;
 8001256:	4b41      	ldr	r3, [pc, #260]	@ (800135c <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]
		        break;
 800125c:	e041      	b.n	80012e2 <HAL_UARTEx_RxEventCallback+0x23a>
		    case 'A':
		    	setSpin((int)uint8_to_float(rxDataBT+1,0), 'A');
 800125e:	4b3c      	ldr	r3, [pc, #240]	@ (8001350 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fb80 	bl	8001968 <uint8_to_float>
 8001268:	eef0 7a40 	vmov.f32	s15, s0
 800126c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001270:	2141      	movs	r1, #65	@ 0x41
 8001272:	ee17 0a90 	vmov	r0, s15
 8001276:	f001 f8e5 	bl	8002444 <setSpin>
		    	break;
 800127a:	e032      	b.n	80012e2 <HAL_UARTEx_RxEventCallback+0x23a>
		    case 'D':
		    	setSpin((int)uint8_to_float(rxDataBT+1,0), 'D');
 800127c:	4b34      	ldr	r3, [pc, #208]	@ (8001350 <HAL_UARTEx_RxEventCallback+0x2a8>)
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fb71 	bl	8001968 <uint8_to_float>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128e:	2144      	movs	r1, #68	@ 0x44
 8001290:	ee17 0a90 	vmov	r0, s15
 8001294:	f001 f8d6 	bl	8002444 <setSpin>
		    	break;
 8001298:	e023      	b.n	80012e2 <HAL_UARTEx_RxEventCallback+0x23a>
		    case 'F':
		    	setSpin((int)uint8_to_float(rxDataBT+1,0), 'F');
 800129a:	4b2d      	ldr	r3, [pc, #180]	@ (8001350 <HAL_UARTEx_RxEventCallback+0x2a8>)
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fb62 	bl	8001968 <uint8_to_float>
 80012a4:	eef0 7a40 	vmov.f32	s15, s0
 80012a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ac:	2146      	movs	r1, #70	@ 0x46
 80012ae:	ee17 0a90 	vmov	r0, s15
 80012b2:	f001 f8c7 	bl	8002444 <setSpin>
		    	break;
 80012b6:	e014      	b.n	80012e2 <HAL_UARTEx_RxEventCallback+0x23a>
		    case 'S':
		    	setSpin((int)uint8_to_float(rxDataBT+1,0), 'S');
 80012b8:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fb53 	bl	8001968 <uint8_to_float>
 80012c2:	eef0 7a40 	vmov.f32	s15, s0
 80012c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ca:	2153      	movs	r1, #83	@ 0x53
 80012cc:	ee17 0a90 	vmov	r0, s15
 80012d0:	f001 f8b8 	bl	8002444 <setSpin>
		    	break;
 80012d4:	e005      	b.n	80012e2 <HAL_UARTEx_RxEventCallback+0x23a>
		    case 'k':
		    	mode=-1;
 80012d6:	4b21      	ldr	r3, [pc, #132]	@ (800135c <HAL_UARTEx_RxEventCallback+0x2b4>)
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	601a      	str	r2, [r3, #0]
		    	break;
 80012de:	e000      	b.n	80012e2 <HAL_UARTEx_RxEventCallback+0x23a>
		    default:
		        // Handle unexpected cases
		        break;
 80012e0:	bf00      	nop
				rpmLeft=centralSpeed;
				rpmRight=centralSpeed;

			}*/

		uint8_t message[]="Order Received!";
 80012e2:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <HAL_UARTEx_RxEventCallback+0x2c8>)
 80012e4:	f107 040c 	add.w	r4, r7, #12
 80012e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		//float_to_uint8_arry(message,pulseLeft,0);
		//float_to_uint8_arry(message+4,pulseRight,0);
		HAL_UART_Transmit_DMA(&huart5, message, sizeof message);
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2210      	movs	r2, #16
 80012f4:	4619      	mov	r1, r3
 80012f6:	4814      	ldr	r0, [pc, #80]	@ (8001348 <HAL_UARTEx_RxEventCallback+0x2a0>)
 80012f8:	f005 fbb8 	bl	8006a6c <HAL_UART_Transmit_DMA>
		memset(rxDataBT,0,sizeof rxDataBT);
 80012fc:	2232      	movs	r2, #50	@ 0x32
 80012fe:	2100      	movs	r1, #0
 8001300:	4812      	ldr	r0, [pc, #72]	@ (800134c <HAL_UARTEx_RxEventCallback+0x2a4>)
 8001302:	f006 ff27 	bl	8008154 <memset>
		rxDataBT[0]=0;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_UARTEx_RxEventCallback+0x2a4>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
		leftError=0;rightError=0;error_last_left = 0;error_before_left= 0;error_last_right = 0;error_before_right = 0;
 800130c:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <HAL_UARTEx_RxEventCallback+0x2cc>)
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <HAL_UARTEx_RxEventCallback+0x2d0>)
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	4b17      	ldr	r3, [pc, #92]	@ (800137c <HAL_UARTEx_RxEventCallback+0x2d4>)
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <HAL_UARTEx_RxEventCallback+0x2d8>)
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <HAL_UARTEx_RxEventCallback+0x2dc>)
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x2e0>)
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxDataBT, sizeof rxDataBT);
 800133c:	2232      	movs	r2, #50	@ 0x32
 800133e:	4903      	ldr	r1, [pc, #12]	@ (800134c <HAL_UARTEx_RxEventCallback+0x2a4>)
 8001340:	4801      	ldr	r0, [pc, #4]	@ (8001348 <HAL_UARTEx_RxEventCallback+0x2a0>)
 8001342:	f005 fc03 	bl	8006b4c <HAL_UARTEx_ReceiveToIdle_DMA>
		memset(rxDataOp,0,sizeof rxDataOp);
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxDataOp, sizeof rxDataOp);
	}

}
 8001346:	e1b5      	b.n	80016b4 <HAL_UARTEx_RxEventCallback+0x60c>
 8001348:	200006b8 	.word	0x200006b8
 800134c:	20000314 	.word	0x20000314
 8001350:	20000315 	.word	0x20000315
 8001354:	20000308 	.word	0x20000308
 8001358:	20000304 	.word	0x20000304
 800135c:	20000390 	.word	0x20000390
 8001360:	20000348 	.word	0x20000348
 8001364:	2000030c 	.word	0x2000030c
 8001368:	20000310 	.word	0x20000310
 800136c:	20000384 	.word	0x20000384
 8001370:	080081d0 	.word	0x080081d0
 8001374:	200000e0 	.word	0x200000e0
 8001378:	200000e4 	.word	0x200000e4
 800137c:	200000e8 	.word	0x200000e8
 8001380:	200000ec 	.word	0x200000ec
 8001384:	200000f0 	.word	0x200000f0
 8001388:	200000f4 	.word	0x200000f4
	}else if (huart==&huart4){
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4ab0      	ldr	r2, [pc, #704]	@ (8001650 <HAL_UARTEx_RxEventCallback+0x5a8>)
 8001390:	4293      	cmp	r3, r2
 8001392:	f040 818f 	bne.w	80016b4 <HAL_UARTEx_RxEventCallback+0x60c>
		if (mode==-1){
 8001396:	4baf      	ldr	r3, [pc, #700]	@ (8001654 <HAL_UARTEx_RxEventCallback+0x5ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139e:	f040 80bc 	bne.w	800151a <HAL_UARTEx_RxEventCallback+0x472>
			switch (rxDataOp[0]) {
 80013a2:	4bad      	ldr	r3, [pc, #692]	@ (8001658 <HAL_UARTEx_RxEventCallback+0x5b0>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	3b53      	subs	r3, #83	@ 0x53
 80013a8:	2b26      	cmp	r3, #38	@ 0x26
 80013aa:	f200 80a0 	bhi.w	80014ee <HAL_UARTEx_RxEventCallback+0x446>
 80013ae:	a201      	add	r2, pc, #4	@ (adr r2, 80013b4 <HAL_UARTEx_RxEventCallback+0x30c>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	08001451 	.word	0x08001451
 80013b8:	080014ef 	.word	0x080014ef
 80013bc:	080014ef 	.word	0x080014ef
 80013c0:	080014ef 	.word	0x080014ef
 80013c4:	080014ef 	.word	0x080014ef
 80013c8:	080014ef 	.word	0x080014ef
 80013cc:	080014ef 	.word	0x080014ef
 80013d0:	080014ef 	.word	0x080014ef
 80013d4:	080014ef 	.word	0x080014ef
 80013d8:	080014ef 	.word	0x080014ef
 80013dc:	080014ef 	.word	0x080014ef
 80013e0:	080014ef 	.word	0x080014ef
 80013e4:	080014ef 	.word	0x080014ef
 80013e8:	080014ef 	.word	0x080014ef
 80013ec:	080014ef 	.word	0x080014ef
 80013f0:	080014ef 	.word	0x080014ef
 80013f4:	080014ef 	.word	0x080014ef
 80013f8:	080014ef 	.word	0x080014ef
 80013fc:	080014ef 	.word	0x080014ef
 8001400:	080014ef 	.word	0x080014ef
 8001404:	080014ef 	.word	0x080014ef
 8001408:	080014ef 	.word	0x080014ef
 800140c:	080014ef 	.word	0x080014ef
 8001410:	080014ef 	.word	0x080014ef
 8001414:	080014ef 	.word	0x080014ef
 8001418:	080014ef 	.word	0x080014ef
 800141c:	080014ef 	.word	0x080014ef
 8001420:	080014ef 	.word	0x080014ef
 8001424:	080014ef 	.word	0x080014ef
 8001428:	080014ef 	.word	0x080014ef
 800142c:	080014ef 	.word	0x080014ef
 8001430:	080014ef 	.word	0x080014ef
 8001434:	080014bb 	.word	0x080014bb
 8001438:	080014ef 	.word	0x080014ef
 800143c:	080014ef 	.word	0x080014ef
 8001440:	080014ef 	.word	0x080014ef
 8001444:	08001487 	.word	0x08001487
 8001448:	08001465 	.word	0x08001465
 800144c:	08001477 	.word	0x08001477
				   setDirection('a');
 8001450:	2061      	movs	r0, #97	@ 0x61
 8001452:	f000 ff8d 	bl	8002370 <setDirection>
				   rpmLeft = 20;
 8001456:	4b81      	ldr	r3, [pc, #516]	@ (800165c <HAL_UARTEx_RxEventCallback+0x5b4>)
 8001458:	4a81      	ldr	r2, [pc, #516]	@ (8001660 <HAL_UARTEx_RxEventCallback+0x5b8>)
 800145a:	601a      	str	r2, [r3, #0]
				   rpmRight = 20;
 800145c:	4b81      	ldr	r3, [pc, #516]	@ (8001664 <HAL_UARTEx_RxEventCallback+0x5bc>)
 800145e:	4a80      	ldr	r2, [pc, #512]	@ (8001660 <HAL_UARTEx_RxEventCallback+0x5b8>)
 8001460:	601a      	str	r2, [r3, #0]
				   break;
 8001462:	e049      	b.n	80014f8 <HAL_UARTEx_RxEventCallback+0x450>
				   rpmLeft=0;
 8001464:	4b7d      	ldr	r3, [pc, #500]	@ (800165c <HAL_UARTEx_RxEventCallback+0x5b4>)
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
				   rpmRight=0;
 800146c:	4b7d      	ldr	r3, [pc, #500]	@ (8001664 <HAL_UARTEx_RxEventCallback+0x5bc>)
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
				   break;
 8001474:	e040      	b.n	80014f8 <HAL_UARTEx_RxEventCallback+0x450>
				   craw_state=1;
 8001476:	4b7c      	ldr	r3, [pc, #496]	@ (8001668 <HAL_UARTEx_RxEventCallback+0x5c0>)
 8001478:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800147c:	601a      	str	r2, [r3, #0]
				   mode=1;
 800147e:	4b75      	ldr	r3, [pc, #468]	@ (8001654 <HAL_UARTEx_RxEventCallback+0x5ac>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
				   break;
 8001484:	e038      	b.n	80014f8 <HAL_UARTEx_RxEventCallback+0x450>
				   if (currentRpm_left==0&&currentRpm_right==0){
 8001486:	4b79      	ldr	r3, [pc, #484]	@ (800166c <HAL_UARTEx_RxEventCallback+0x5c4>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	d12d      	bne.n	80014f2 <HAL_UARTEx_RxEventCallback+0x44a>
 8001496:	4b76      	ldr	r3, [pc, #472]	@ (8001670 <HAL_UARTEx_RxEventCallback+0x5c8>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	d125      	bne.n	80014f2 <HAL_UARTEx_RxEventCallback+0x44a>
				   setDirection('w');
 80014a6:	2077      	movs	r0, #119	@ 0x77
 80014a8:	f000 ff62 	bl	8002370 <setDirection>
				   rpmLeft = 20;
 80014ac:	4b6b      	ldr	r3, [pc, #428]	@ (800165c <HAL_UARTEx_RxEventCallback+0x5b4>)
 80014ae:	4a6c      	ldr	r2, [pc, #432]	@ (8001660 <HAL_UARTEx_RxEventCallback+0x5b8>)
 80014b0:	601a      	str	r2, [r3, #0]
				   rpmRight = 20;}
 80014b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001664 <HAL_UARTEx_RxEventCallback+0x5bc>)
 80014b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001660 <HAL_UARTEx_RxEventCallback+0x5b8>)
 80014b6:	601a      	str	r2, [r3, #0]
				   break;
 80014b8:	e01b      	b.n	80014f2 <HAL_UARTEx_RxEventCallback+0x44a>
				   if (currentRpm_left==0&&currentRpm_right==0){
 80014ba:	4b6c      	ldr	r3, [pc, #432]	@ (800166c <HAL_UARTEx_RxEventCallback+0x5c4>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	d115      	bne.n	80014f6 <HAL_UARTEx_RxEventCallback+0x44e>
 80014ca:	4b69      	ldr	r3, [pc, #420]	@ (8001670 <HAL_UARTEx_RxEventCallback+0x5c8>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d10d      	bne.n	80014f6 <HAL_UARTEx_RxEventCallback+0x44e>
					   setDirection('s');
 80014da:	2073      	movs	r0, #115	@ 0x73
 80014dc:	f000 ff48 	bl	8002370 <setDirection>
					   rpmLeft = 20;
 80014e0:	4b5e      	ldr	r3, [pc, #376]	@ (800165c <HAL_UARTEx_RxEventCallback+0x5b4>)
 80014e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001660 <HAL_UARTEx_RxEventCallback+0x5b8>)
 80014e4:	601a      	str	r2, [r3, #0]
					   rpmRight = 20;}
 80014e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001664 <HAL_UARTEx_RxEventCallback+0x5bc>)
 80014e8:	4a5d      	ldr	r2, [pc, #372]	@ (8001660 <HAL_UARTEx_RxEventCallback+0x5b8>)
 80014ea:	601a      	str	r2, [r3, #0]
				   break;
 80014ec:	e003      	b.n	80014f6 <HAL_UARTEx_RxEventCallback+0x44e>
				   break;
 80014ee:	bf00      	nop
 80014f0:	e002      	b.n	80014f8 <HAL_UARTEx_RxEventCallback+0x450>
				   break;
 80014f2:	bf00      	nop
 80014f4:	e000      	b.n	80014f8 <HAL_UARTEx_RxEventCallback+0x450>
				   break;
 80014f6:	bf00      	nop
			uint8_t mess[1]={};
 80014f8:	2300      	movs	r3, #0
 80014fa:	723b      	strb	r3, [r7, #8]
			mess[0]=rxDataOp[0];
 80014fc:	4b56      	ldr	r3, [pc, #344]	@ (8001658 <HAL_UARTEx_RxEventCallback+0x5b0>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	723b      	strb	r3, [r7, #8]
			HAL_UART_Transmit_DMA(&huart5, mess, 1);
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	2201      	movs	r2, #1
 8001508:	4619      	mov	r1, r3
 800150a:	485a      	ldr	r0, [pc, #360]	@ (8001674 <HAL_UARTEx_RxEventCallback+0x5cc>)
 800150c:	f005 faae 	bl	8006a6c <HAL_UART_Transmit_DMA>
			memset(rxDataOp,0,sizeof rxDataOp);
 8001510:	221e      	movs	r2, #30
 8001512:	2100      	movs	r1, #0
 8001514:	4850      	ldr	r0, [pc, #320]	@ (8001658 <HAL_UARTEx_RxEventCallback+0x5b0>)
 8001516:	f006 fe1d 	bl	8008154 <memset>
		if (mode==1&&(currentRpm_left>=10||currentRpm_right>=10)){
 800151a:	4b4e      	ldr	r3, [pc, #312]	@ (8001654 <HAL_UARTEx_RxEventCallback+0x5ac>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	f040 80c3 	bne.w	80016aa <HAL_UARTEx_RxEventCallback+0x602>
 8001524:	4b51      	ldr	r3, [pc, #324]	@ (800166c <HAL_UARTEx_RxEventCallback+0x5c4>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800152e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001536:	da0a      	bge.n	800154e <HAL_UARTEx_RxEventCallback+0x4a6>
 8001538:	4b4d      	ldr	r3, [pc, #308]	@ (8001670 <HAL_UARTEx_RxEventCallback+0x5c8>)
 800153a:	edd3 7a00 	vldr	s15, [r3]
 800153e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	f2c0 80ae 	blt.w	80016aa <HAL_UARTEx_RxEventCallback+0x602>
		int i=0;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
		for(;i < sizeof rxDataOp;i++){
 8001552:	e008      	b.n	8001566 <HAL_UARTEx_RxEventCallback+0x4be>
			if(rxDataOp[i]=='x'){
 8001554:	4a40      	ldr	r2, [pc, #256]	@ (8001658 <HAL_UARTEx_RxEventCallback+0x5b0>)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b78      	cmp	r3, #120	@ 0x78
 800155e:	d006      	beq.n	800156e <HAL_UARTEx_RxEventCallback+0x4c6>
		for(;i < sizeof rxDataOp;i++){
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	3301      	adds	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	2b1d      	cmp	r3, #29
 800156a:	d9f3      	bls.n	8001554 <HAL_UARTEx_RxEventCallback+0x4ac>
 800156c:	e000      	b.n	8001570 <HAL_UARTEx_RxEventCallback+0x4c8>
				break;
 800156e:	bf00      	nop
		deriSpeed=uint8_to_float(rxDataOp+i+1,0);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	3301      	adds	r3, #1
 8001574:	4a38      	ldr	r2, [pc, #224]	@ (8001658 <HAL_UARTEx_RxEventCallback+0x5b0>)
 8001576:	4413      	add	r3, r2
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f9f4 	bl	8001968 <uint8_to_float>
 8001580:	eef0 7a40 	vmov.f32	s15, s0
 8001584:	4b3c      	ldr	r3, [pc, #240]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x5d0>)
 8001586:	edc3 7a00 	vstr	s15, [r3]
		if (deriSpeed>centralSpeed){
 800158a:	4b3b      	ldr	r3, [pc, #236]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x5d0>)
 800158c:	ed93 7a00 	vldr	s14, [r3]
 8001590:	4b3a      	ldr	r3, [pc, #232]	@ (800167c <HAL_UARTEx_RxEventCallback+0x5d4>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159e:	dd04      	ble.n	80015aa <HAL_UARTEx_RxEventCallback+0x502>
			deriSpeed=centralSpeed;
 80015a0:	4b36      	ldr	r3, [pc, #216]	@ (800167c <HAL_UARTEx_RxEventCallback+0x5d4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a34      	ldr	r2, [pc, #208]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x5d0>)
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e014      	b.n	80015d4 <HAL_UARTEx_RxEventCallback+0x52c>
		}else if (deriSpeed<-centralSpeed){
 80015aa:	4b34      	ldr	r3, [pc, #208]	@ (800167c <HAL_UARTEx_RxEventCallback+0x5d4>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	eeb1 7a67 	vneg.f32	s14, s15
 80015b4:	4b30      	ldr	r3, [pc, #192]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x5d0>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	dd07      	ble.n	80015d4 <HAL_UARTEx_RxEventCallback+0x52c>
			deriSpeed=-centralSpeed;
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <HAL_UARTEx_RxEventCallback+0x5d4>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	eef1 7a67 	vneg.f32	s15, s15
 80015ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x5d0>)
 80015d0:	edc3 7a00 	vstr	s15, [r3]
		rpmLeft=centralSpeed+deriSpeed;
 80015d4:	4b29      	ldr	r3, [pc, #164]	@ (800167c <HAL_UARTEx_RxEventCallback+0x5d4>)
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x5d0>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <HAL_UARTEx_RxEventCallback+0x5b4>)
 80015e6:	edc3 7a00 	vstr	s15, [r3]
		rpmRight=centralSpeed-deriSpeed;
 80015ea:	4b24      	ldr	r3, [pc, #144]	@ (800167c <HAL_UARTEx_RxEventCallback+0x5d4>)
 80015ec:	ed93 7a00 	vldr	s14, [r3]
 80015f0:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <HAL_UARTEx_RxEventCallback+0x5d0>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <HAL_UARTEx_RxEventCallback+0x5bc>)
 80015fc:	edc3 7a00 	vstr	s15, [r3]
		if (rpmLeft>250  ){
 8001600:	4b16      	ldr	r3, [pc, #88]	@ (800165c <HAL_UARTEx_RxEventCallback+0x5b4>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001680 <HAL_UARTEx_RxEventCallback+0x5d8>
 800160a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001612:	dd03      	ble.n	800161c <HAL_UARTEx_RxEventCallback+0x574>
			rpmLeft=250;
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <HAL_UARTEx_RxEventCallback+0x5b4>)
 8001616:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <HAL_UARTEx_RxEventCallback+0x5dc>)
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e00b      	b.n	8001634 <HAL_UARTEx_RxEventCallback+0x58c>
		}else if (rpmLeft<0){
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_UARTEx_RxEventCallback+0x5b4>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	d503      	bpl.n	8001634 <HAL_UARTEx_RxEventCallback+0x58c>
			rpmLeft=0;
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <HAL_UARTEx_RxEventCallback+0x5b4>)
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
		if (rpmRight>250  ){
 8001634:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <HAL_UARTEx_RxEventCallback+0x5bc>)
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001680 <HAL_UARTEx_RxEventCallback+0x5d8>
 800163e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	dd1f      	ble.n	8001688 <HAL_UARTEx_RxEventCallback+0x5e0>
			rpmRight=250;
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_UARTEx_RxEventCallback+0x5bc>)
 800164a:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <HAL_UARTEx_RxEventCallback+0x5dc>)
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e027      	b.n	80016a0 <HAL_UARTEx_RxEventCallback+0x5f8>
 8001650:	20000670 	.word	0x20000670
 8001654:	20000390 	.word	0x20000390
 8001658:	20000348 	.word	0x20000348
 800165c:	20000308 	.word	0x20000308
 8001660:	41a00000 	.word	0x41a00000
 8001664:	20000304 	.word	0x20000304
 8001668:	20000384 	.word	0x20000384
 800166c:	200002f8 	.word	0x200002f8
 8001670:	200002fc 	.word	0x200002fc
 8001674:	200006b8 	.word	0x200006b8
 8001678:	2000030c 	.word	0x2000030c
 800167c:	20000310 	.word	0x20000310
 8001680:	437a0000 	.word	0x437a0000
 8001684:	437a0000 	.word	0x437a0000
		}else if (rpmRight<0){
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <HAL_UARTEx_RxEventCallback+0x614>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001696:	d503      	bpl.n	80016a0 <HAL_UARTEx_RxEventCallback+0x5f8>
			rpmRight=0;
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <HAL_UARTEx_RxEventCallback+0x614>)
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
		memset(rxDataOp,0,sizeof rxDataOp);
 80016a0:	221e      	movs	r2, #30
 80016a2:	2100      	movs	r1, #0
 80016a4:	4806      	ldr	r0, [pc, #24]	@ (80016c0 <HAL_UARTEx_RxEventCallback+0x618>)
 80016a6:	f006 fd55 	bl	8008154 <memset>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxDataOp, sizeof rxDataOp);
 80016aa:	221e      	movs	r2, #30
 80016ac:	4904      	ldr	r1, [pc, #16]	@ (80016c0 <HAL_UARTEx_RxEventCallback+0x618>)
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <HAL_UARTEx_RxEventCallback+0x61c>)
 80016b0:	f005 fa4c 	bl	8006b4c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80016b4:	bf00      	nop
 80016b6:	3724      	adds	r7, #36	@ 0x24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	20000304 	.word	0x20000304
 80016c0:	20000348 	.word	0x20000348
 80016c4:	20000670 	.word	0x20000670

080016c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <MX_DMA_Init+0x6c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a17      	ldr	r2, [pc, #92]	@ (8001734 <MX_DMA_Init+0x6c>)
 80016d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <MX_DMA_Init+0x6c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	200b      	movs	r0, #11
 80016f0:	f002 fcef 	bl	80040d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016f4:	200b      	movs	r0, #11
 80016f6:	f002 fd08 	bl	800410a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	200d      	movs	r0, #13
 8001700:	f002 fce7 	bl	80040d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001704:	200d      	movs	r0, #13
 8001706:	f002 fd00 	bl	800410a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	200f      	movs	r0, #15
 8001710:	f002 fcdf 	bl	80040d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001714:	200f      	movs	r0, #15
 8001716:	f002 fcf8 	bl	800410a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	202f      	movs	r0, #47	@ 0x2f
 8001720:	f002 fcd7 	bl	80040d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001724:	202f      	movs	r0, #47	@ 0x2f
 8001726:	f002 fcf0 	bl	800410a <HAL_NVIC_EnableIRQ>

}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <float_to_uint8_arry>:
 *
 *  Created on: Jul 24, 2024
 *      Author: 25138
 */
#include "float_uint8.h"
int float_to_uint8_arry(uint8_t* u8Arry, float floatdata, int precision) {//float给定精度转换为uint8_t
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b08d      	sub	sp, #52	@ 0x34
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	ed87 0a02 	vstr	s0, [r7, #8]
 8001744:	6079      	str	r1, [r7, #4]
	int points = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int apoints = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
	float data1 = 0;
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
	float data2=0;
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
	int if_neg=0;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
	if(floatdata<0){
 800175e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001762:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	d511      	bpl.n	8001790 <float_to_uint8_arry+0x58>
			u8Arry[0]=0;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
			data1=-floatdata;
 8001772:	edd7 7a02 	vldr	s15, [r7, #8]
 8001776:	eef1 7a67 	vneg.f32	s15, s15
 800177a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			data2=-floatdata;
 800177e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001782:	eef1 7a67 	vneg.f32	s15, s15
 8001786:	edc7 7a08 	vstr	s15, [r7, #32]
			if_neg=1;
 800178a:	2301      	movs	r3, #1
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e00f      	b.n	80017b0 <float_to_uint8_arry+0x78>
		}
	else{
		data1=floatdata;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
		data2=floatdata;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	623b      	str	r3, [r7, #32]
	}
	for (; data1 >= 1; points++) {
 8001798:	e00a      	b.n	80017b0 <float_to_uint8_arry+0x78>
		data1 /= 10;
 800179a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800179e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80017a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	for (; data1 >= 1; points++) {
 80017aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ac:	3301      	adds	r3, #1
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017b0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	daeb      	bge.n	800179a <float_to_uint8_arry+0x62>
	}
	if (points == 0) {
 80017c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d103      	bne.n	80017d0 <float_to_uint8_arry+0x98>
		points = 1;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		apoints = 1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	for (int i = 0; i < precision; i++) {
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	e00a      	b.n	80017ec <float_to_uint8_arry+0xb4>
		data2 *= 10;
 80017d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80017da:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80017de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e2:	edc7 7a08 	vstr	s15, [r7, #32]
	for (int i = 0; i < precision; i++) {
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	3301      	adds	r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dbf0      	blt.n	80017d6 <float_to_uint8_arry+0x9e>
	}
	for (int i = 0; i < points + precision + 1; i++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e088      	b.n	800190c <float_to_uint8_arry+0x1d4>
		if (i != precision) {
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d079      	beq.n	80018f6 <float_to_uint8_arry+0x1be>
			if (i == 0) {
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d13e      	bne.n	8001886 <float_to_uint8_arry+0x14e>
				u8Arry[points + precision +if_neg - i] = (uint8_t)((floor(fmod(data2, 10) + 0.5)) + '0');
 8001808:	6a38      	ldr	r0, [r7, #32]
 800180a:	f7fe fe41 	bl	8000490 <__aeabi_f2d>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	ed9f 1b51 	vldr	d1, [pc, #324]	@ 8001958 <float_to_uint8_arry+0x220>
 8001816:	ec43 2b10 	vmov	d0, r2, r3
 800181a:	f006 fae7 	bl	8007dec <fmod>
 800181e:	ec51 0b10 	vmov	r0, r1, d0
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	4b4e      	ldr	r3, [pc, #312]	@ (8001960 <float_to_uint8_arry+0x228>)
 8001828:	f7fe fcd4 	bl	80001d4 <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	ec43 2b17 	vmov	d7, r2, r3
 8001834:	eeb0 0a47 	vmov.f32	s0, s14
 8001838:	eef0 0a67 	vmov.f32	s1, s15
 800183c:	f006 fb04 	bl	8007e48 <floor>
 8001840:	ec51 0b10 	vmov	r0, r1, d0
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	4b46      	ldr	r3, [pc, #280]	@ (8001964 <float_to_uint8_arry+0x22c>)
 800184a:	f7fe fcc3 	bl	80001d4 <__adddf3>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	441a      	add	r2, r3
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	441a      	add	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	461a      	mov	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	189c      	adds	r4, r3, r2
 800186a:	f7ff f919 	bl	8000aa0 <__aeabi_d2uiz>
 800186e:	4603      	mov	r3, r0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	7023      	strb	r3, [r4, #0]
				data2 /= 10;
 8001874:	ed97 7a08 	vldr	s14, [r7, #32]
 8001878:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800187c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001880:	edc7 7a08 	vstr	s15, [r7, #32]
 8001884:	e03f      	b.n	8001906 <float_to_uint8_arry+0x1ce>
			}
			else {
				u8Arry[points + precision +if_neg - i] = (uint8_t)((floor(fmod(data2, 10))) + '0');
 8001886:	6a38      	ldr	r0, [r7, #32]
 8001888:	f7fe fe02 	bl	8000490 <__aeabi_f2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	ed9f 1b31 	vldr	d1, [pc, #196]	@ 8001958 <float_to_uint8_arry+0x220>
 8001894:	ec43 2b10 	vmov	d0, r2, r3
 8001898:	f006 faa8 	bl	8007dec <fmod>
 800189c:	eeb0 7a40 	vmov.f32	s14, s0
 80018a0:	eef0 7a60 	vmov.f32	s15, s1
 80018a4:	eeb0 0a47 	vmov.f32	s0, s14
 80018a8:	eef0 0a67 	vmov.f32	s1, s15
 80018ac:	f006 facc 	bl	8007e48 <floor>
 80018b0:	ec51 0b10 	vmov	r0, r1, d0
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001964 <float_to_uint8_arry+0x22c>)
 80018ba:	f7fe fc8b 	bl	80001d4 <__adddf3>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	441a      	add	r2, r3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	441a      	add	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	189c      	adds	r4, r3, r2
 80018da:	f7ff f8e1 	bl	8000aa0 <__aeabi_d2uiz>
 80018de:	4603      	mov	r3, r0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	7023      	strb	r3, [r4, #0]
				data2 /= 10;
 80018e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80018e8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80018ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f0:	edc7 7a08 	vstr	s15, [r7, #32]
 80018f4:	e007      	b.n	8001906 <float_to_uint8_arry+0x1ce>
			}
		}
		else if(precision!=0){
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <float_to_uint8_arry+0x1ce>
			u8Arry[points] = '.';
 80018fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4413      	add	r3, r2
 8001902:	222e      	movs	r2, #46	@ 0x2e
 8001904:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < points + precision + 1; i++) {
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	429a      	cmp	r2, r3
 8001916:	f77f af70 	ble.w	80017fa <float_to_uint8_arry+0xc2>
		}

	}
	if (apoints == 1) {
 800191a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800191c:	2b01      	cmp	r3, #1
 800191e:	d108      	bne.n	8001932 <float_to_uint8_arry+0x1fa>
		points = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
		return points + precision + 2+if_neg;
 8001924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	1c9a      	adds	r2, r3, #2
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	4413      	add	r3, r2
 8001930:	e00d      	b.n	800194e <float_to_uint8_arry+0x216>
	}
	else if(precision==0){
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d105      	bne.n	8001944 <float_to_uint8_arry+0x20c>
		return points + precision + if_neg;
 8001938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	441a      	add	r2, r3
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	e004      	b.n	800194e <float_to_uint8_arry+0x216>
	}
	else {
		return points + precision + if_neg;
 8001944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	441a      	add	r2, r3
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	4413      	add	r3, r2
	}

}
 800194e:	4618      	mov	r0, r3
 8001950:	3734      	adds	r7, #52	@ 0x34
 8001952:	46bd      	mov	sp, r7
 8001954:	bd90      	pop	{r4, r7, pc}
 8001956:	bf00      	nop
 8001958:	00000000 	.word	0x00000000
 800195c:	40240000 	.word	0x40240000
 8001960:	3fe00000 	.word	0x3fe00000
 8001964:	40480000 	.word	0x40480000

08001968 <uint8_to_float>:

// Function to convert uint8_t array to float
float uint8_to_float(uint8_t* u8arry, int point_length) {
 8001968:	b480      	push	{r7}
 800196a:	b08b      	sub	sp, #44	@ 0x2c
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
	int points = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
	int status = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
	int num_length = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
	float number = 0;
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
	int if_neg=0;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
	if(u8arry[0]=='-'){
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b2d      	cmp	r3, #45	@ 0x2d
 800198e:	d119      	bne.n	80019c4 <uint8_to_float+0x5c>
		num_length++;
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	3301      	adds	r3, #1
 8001994:	61fb      	str	r3, [r7, #28]
		if_neg=1;
 8001996:	2301      	movs	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
	}
	for (; num_length < 256; num_length++) {
 800199a:	e013      	b.n	80019c4 <uint8_to_float+0x5c>
		if (u8arry[num_length] == '.') {
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80019a6:	d101      	bne.n	80019ac <uint8_to_float+0x44>
			points = num_length;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (u8arry[num_length] == 'o') {
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b6f      	cmp	r3, #111	@ 0x6f
 80019b6:	d102      	bne.n	80019be <uint8_to_float+0x56>
			status = num_length;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	623b      	str	r3, [r7, #32]
			break;
 80019bc:	e005      	b.n	80019ca <uint8_to_float+0x62>
	for (; num_length < 256; num_length++) {
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3301      	adds	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	2bff      	cmp	r3, #255	@ 0xff
 80019c8:	dde8      	ble.n	800199c <uint8_to_float+0x34>
		}
	}
	if (status == 0) {
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <uint8_to_float+0x6e>
		return 0;
 80019d0:	eddf 7a51 	vldr	s15, [pc, #324]	@ 8001b18 <uint8_to_float+0x1b0>
 80019d4:	e099      	b.n	8001b0a <uint8_to_float+0x1a2>
	}
	else {
		float tens = 1;
 80019d6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80019da:	613b      	str	r3, [r7, #16]

		if (points == 0) {
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d121      	bne.n	8001a26 <uint8_to_float+0xbe>
			for (size_t i= if_neg; i < num_length; i++) {
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	e019      	b.n	8001a1c <uint8_to_float+0xb4>
			number += (float)(u8arry[i] - '0');
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4413      	add	r3, r2
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	3b30      	subs	r3, #48	@ 0x30
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80019fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a02:	edc7 7a06 	vstr	s15, [r7, #24]
			number *= 10;
 8001a06:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a0a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a12:	edc7 7a06 	vstr	s15, [r7, #24]
			for (size_t i= if_neg; i < num_length; i++) {
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d3e1      	bcc.n	80019e8 <uint8_to_float+0x80>
 8001a24:	e05c      	b.n	8001ae0 <uint8_to_float+0x178>
		}
			}
			else {
				for (int i = if_neg; i <= points + point_length; i++) {
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	e053      	b.n	8001ad4 <uint8_to_float+0x16c>
				if (i < points) {
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	429a      	cmp	r2, r3
 8001a32:	da17      	bge.n	8001a64 <uint8_to_float+0xfc>
					number += (float)(u8arry[i] - '0');
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	3b30      	subs	r3, #48	@ 0x30
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a46:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4e:	edc7 7a06 	vstr	s15, [r7, #24]
					number *= 10;
 8001a52:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a56:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5e:	edc7 7a06 	vstr	s15, [r7, #24]
 8001a62:	e034      	b.n	8001ace <uint8_to_float+0x166>
				}
				else if (i > points) {
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dd28      	ble.n	8001abe <uint8_to_float+0x156>
					if(i<num_length){
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	da1b      	bge.n	8001aac <uint8_to_float+0x144>
					tens /= 10;
 8001a74:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a78:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a80:	edc7 7a04 	vstr	s15, [r7, #16]
					number += ((float)(u8arry[i] - '0')) * tens;
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	3b30      	subs	r3, #48	@ 0x30
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa6:	edc7 7a06 	vstr	s15, [r7, #24]
 8001aaa:	e010      	b.n	8001ace <uint8_to_float+0x166>
					}
					else{
						number+=0;
 8001aac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ab0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001b18 <uint8_to_float+0x1b0>
 8001ab4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ab8:	edc7 7a06 	vstr	s15, [r7, #24]
 8001abc:	e007      	b.n	8001ace <uint8_to_float+0x166>
					}
				}
				else {
					number /= 10;
 8001abe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ac2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001ac6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aca:	edc7 7a06 	vstr	s15, [r7, #24]
				for (int i = if_neg; i <= points + point_length; i++) {
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dda5      	ble.n	8001a2c <uint8_to_float+0xc4>
				}
				}
			}

		if (points == 0) {
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d107      	bne.n	8001af6 <uint8_to_float+0x18e>
			number /= 10;
 8001ae6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aea:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001aee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af2:	edc7 7a06 	vstr	s15, [r7, #24]
		}
		if(if_neg){
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <uint8_to_float+0x19e>
			return -number;
 8001afc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b00:	eef1 7a67 	vneg.f32	s15, s15
 8001b04:	e001      	b.n	8001b0a <uint8_to_float+0x1a2>
		}
		return number;
 8001b06:	edd7 7a06 	vldr	s15, [r7, #24]
	}

}
 8001b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0e:	372c      	adds	r7, #44	@ 0x2c
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	00000000 	.word	0x00000000

08001b1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	4b43      	ldr	r3, [pc, #268]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a42      	ldr	r2, [pc, #264]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001b3c:	f043 0310 	orr.w	r3, r3, #16
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b40      	ldr	r3, [pc, #256]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b3c      	ldr	r3, [pc, #240]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a3b      	ldr	r2, [pc, #236]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b39      	ldr	r3, [pc, #228]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b35      	ldr	r3, [pc, #212]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a34      	ldr	r2, [pc, #208]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b32      	ldr	r3, [pc, #200]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b2b      	ldr	r3, [pc, #172]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a26      	ldr	r2, [pc, #152]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b24      	ldr	r3, [pc, #144]	@ (8001c44 <MX_GPIO_Init+0x128>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN2_Pin|IN3_Pin|IN4_Pin|trigFront_Pin
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	217e      	movs	r1, #126	@ 0x7e
 8001bc2:	4821      	ldr	r0, [pc, #132]	@ (8001c48 <MX_GPIO_Init+0x12c>)
 8001bc4:	f003 f872 	bl	8004cac <HAL_GPIO_WritePin>
                          |trigLeft_Pin|IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(trigRight_GPIO_Port, trigRight_Pin, GPIO_PIN_RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2110      	movs	r1, #16
 8001bcc:	481f      	ldr	r0, [pc, #124]	@ (8001c4c <MX_GPIO_Init+0x130>)
 8001bce:	f003 f86d 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = IN2_Pin|IN3_Pin|IN4_Pin|trigFront_Pin
 8001bd2:	237e      	movs	r3, #126	@ 0x7e
 8001bd4:	617b      	str	r3, [r7, #20]
                          |trigLeft_Pin|IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4817      	ldr	r0, [pc, #92]	@ (8001c48 <MX_GPIO_Init+0x12c>)
 8001bea:	f002 feab 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = trigRight_Pin;
 8001bee:	2310      	movs	r3, #16
 8001bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(trigRight_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4811      	ldr	r0, [pc, #68]	@ (8001c4c <MX_GPIO_Init+0x130>)
 8001c06:	f002 fe9d 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = echoFront_Pin|echoLeft_Pin;
 8001c0a:	23c0      	movs	r3, #192	@ 0xc0
 8001c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480b      	ldr	r0, [pc, #44]	@ (8001c4c <MX_GPIO_Init+0x130>)
 8001c1e:	f002 fe91 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = echoRight_Pin;
 8001c22:	2301      	movs	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(echoRight_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	4806      	ldr	r0, [pc, #24]	@ (8001c50 <MX_GPIO_Init+0x134>)
 8001c36:	f002 fe85 	bl	8004944 <HAL_GPIO_Init>

}
 8001c3a:	bf00      	nop
 8001c3c:	3728      	adds	r7, #40	@ 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40020400 	.word	0x40020400

08001c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c58:	f002 f8ca 	bl	8003df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c5c:	f000 f8d6 	bl	8001e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c60:	f7ff ff5c 	bl	8001b1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c64:	f7ff fd30 	bl	80016c8 <MX_DMA_Init>
  MX_TIM2_Init();
 8001c68:	f001 f9cc 	bl	8003004 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001c6c:	f001 fa6c 	bl	8003148 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001c70:	f001 fabe 	bl	80031f0 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001c74:	f001 f90e 	bl	8002e94 <MX_TIM1_Init>
  MX_UART5_Init();
 8001c78:	f001 feea 	bl	8003a50 <MX_UART5_Init>
  MX_UART4_Init();
 8001c7c:	f001 febe 	bl	80039fc <MX_UART4_Init>
  MX_TIM7_Init();
 8001c80:	f001 fb6e 	bl	8003360 <MX_TIM7_Init>
  MX_TIM3_Init();
 8001c84:	f001 fa12 	bl	80030ac <MX_TIM3_Init>
  MX_TIM8_Init();
 8001c88:	f001 fba0 	bl	80033cc <MX_TIM8_Init>
  MX_TIM6_Init();
 8001c8c:	f001 fb32 	bl	80032f4 <MX_TIM6_Init>
  MX_TIM10_Init();
 8001c90:	f001 fbec 	bl	800346c <MX_TIM10_Init>
  MX_TIM12_Init();
 8001c94:	f001 fc0e 	bl	80034b4 <MX_TIM12_Init>
  //turning_theta_Servo2=Servo2_driving(turning_theta_Servo2);



  /*turning_theta_Servo3=Servo3_init(turning_theta_Servo3);*/
  timersInit();
 8001c98:	f001 fdf6 	bl	8003888 <timersInit>
  __HAL_TIM_SET_COUNTER(&htim2,32768);
 8001c9c:	4b49      	ldr	r3, [pc, #292]	@ (8001dc4 <main+0x170>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ca4:	625a      	str	r2, [r3, #36]	@ 0x24
   __HAL_TIM_SET_COUNTER(&htim4,32768);
 8001ca6:	4b48      	ldr	r3, [pc, #288]	@ (8001dc8 <main+0x174>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24
   //turning_theta_Servo2=Servo2_init(turning_theta_Servo2);

   //craw_up_trail(1);

   //put_down_trail(1);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxDataBT, sizeof rxDataBT);
 8001cb0:	2232      	movs	r2, #50	@ 0x32
 8001cb2:	4946      	ldr	r1, [pc, #280]	@ (8001dcc <main+0x178>)
 8001cb4:	4846      	ldr	r0, [pc, #280]	@ (8001dd0 <main+0x17c>)
 8001cb6:	f004 ff49 	bl	8006b4c <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxDataOp, sizeof rxDataOp);
 8001cba:	2232      	movs	r2, #50	@ 0x32
 8001cbc:	4945      	ldr	r1, [pc, #276]	@ (8001dd4 <main+0x180>)
 8001cbe:	4846      	ldr	r0, [pc, #280]	@ (8001dd8 <main+0x184>)
 8001cc0:	f004 ff44 	bl	8006b4c <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  setLeftPWM(pulseLeft,TIM_CHANNEL_3);
 8001cc4:	4b45      	ldr	r3, [pc, #276]	@ (8001ddc <main+0x188>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2108      	movs	r1, #8
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fb16 	bl	80022fc <setLeftPWM>
	  setRightPWM(pulseRight,TIM_CHANNEL_4);
 8001cd0:	4b43      	ldr	r3, [pc, #268]	@ (8001de0 <main+0x18c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	210c      	movs	r1, #12
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fad6 	bl	8002288 <setRightPWM>
	  if(craw_state==1){
 8001cdc:	4b41      	ldr	r3, [pc, #260]	@ (8001de4 <main+0x190>)
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ce6:	eef4 7a47 	vcmp.f32	s15, s14
 8001cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cee:	d108      	bne.n	8001d02 <main+0xae>
		  is_crawed=craw_up_trail(1);//if_crow==1时，调用循迹时的程序；if_crow==2时，调用避障时的程序
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f000 ff89 	bl	8002c08 <craw_up_trail>
 8001cf6:	eef0 7a40 	vmov.f32	s15, s0
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001de8 <main+0x194>)
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
 8001d00:	e011      	b.n	8001d26 <main+0xd2>
	  }
	  else if(craw_state==2){
 8001d02:	4b38      	ldr	r3, [pc, #224]	@ (8001de4 <main+0x190>)
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001d0c:	eef4 7a47 	vcmp.f32	s15, s14
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	d107      	bne.n	8001d26 <main+0xd2>
		  //if_crow==1时，调用循迹时的程序；if_crow==2时，调用避障时的程序
		  is_put=put_down_trail(1);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f000 ffba 	bl	8002c90 <put_down_trail>
 8001d1c:	eef0 7a40 	vmov.f32	s15, s0
 8001d20:	4b32      	ldr	r3, [pc, #200]	@ (8001dec <main+0x198>)
 8001d22:	edc3 7a00 	vstr	s15, [r3]
	  }

	  if (is_crawed==1){
 8001d26:	4b30      	ldr	r3, [pc, #192]	@ (8001de8 <main+0x194>)
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d30:	eef4 7a47 	vcmp.f32	s15, s14
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	d104      	bne.n	8001d44 <main+0xf0>
		  setSpin(20, 'F');
 8001d3a:	2146      	movs	r1, #70	@ 0x46
 8001d3c:	2014      	movs	r0, #20
 8001d3e:	f000 fb81 	bl	8002444 <setSpin>
 8001d42:	e00d      	b.n	8001d60 <main+0x10c>

	  }else if (is_put==1){
 8001d44:	4b29      	ldr	r3, [pc, #164]	@ (8001dec <main+0x198>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d4e:	eef4 7a47 	vcmp.f32	s15, s14
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	d103      	bne.n	8001d60 <main+0x10c>
		  is_put=0;
 8001d58:	4b24      	ldr	r3, [pc, #144]	@ (8001dec <main+0x198>)
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
	  turning_theta_Servo1=Servo1_craw(turning_theta_Servo1);
	  turning_theta_Servo2=Servo2_driving(turning_theta_Servo2);
	  turning_theta_Servo1=Servo1_put(turning_theta_Servo1);
	  turning_theta_Servo2=Servo2_puting(turning_theta_Servo2);                                                                                                                                                                                                                                  	  setLeftPWM(pulseLeft,TIM_CHANNEL_3);
	  setRightPWM(pulseRight,TIM_CHANNEL_4);*/
	  if (ultraLoop==0){
 8001d60:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <main+0x19c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d107      	bne.n	8001d78 <main+0x124>
	  	distanceFront=MeasureDistance(&ultraSonicFront);
 8001d68:	4822      	ldr	r0, [pc, #136]	@ (8001df4 <main+0x1a0>)
 8001d6a:	f001 fdc5 	bl	80038f8 <MeasureDistance>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b21      	ldr	r3, [pc, #132]	@ (8001df8 <main+0x1a4>)
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	e016      	b.n	8001da6 <main+0x152>
	  }else if(ultraLoop==1){
 8001d78:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <main+0x19c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d107      	bne.n	8001d90 <main+0x13c>
	  	 distanceLeft=MeasureDistance(&ultraSonicLeft);
 8001d80:	481e      	ldr	r0, [pc, #120]	@ (8001dfc <main+0x1a8>)
 8001d82:	f001 fdb9 	bl	80038f8 <MeasureDistance>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <main+0x1ac>)
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	e00a      	b.n	8001da6 <main+0x152>
	  }else if (ultraLoop==2){
 8001d90:	4b17      	ldr	r3, [pc, #92]	@ (8001df0 <main+0x19c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d106      	bne.n	8001da6 <main+0x152>
	  	 distanceRight=MeasureDistance(&ultraSonicRight);
 8001d98:	481a      	ldr	r0, [pc, #104]	@ (8001e04 <main+0x1b0>)
 8001d9a:	f001 fdad 	bl	80038f8 <MeasureDistance>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <main+0x1b4>)
 8001da4:	801a      	strh	r2, [r3, #0]
}
	  if (ultraLoop<3){ultraLoop++;}
 8001da6:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <main+0x19c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	dc05      	bgt.n	8001dba <main+0x166>
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <main+0x19c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	4a0e      	ldr	r2, [pc, #56]	@ (8001df0 <main+0x19c>)
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e784      	b.n	8001cc4 <main+0x70>
	  else{ultraLoop=0;}
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <main+0x19c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
	  setLeftPWM(pulseLeft,TIM_CHANNEL_3);
 8001dc0:	e780      	b.n	8001cc4 <main+0x70>
 8001dc2:	bf00      	nop
 8001dc4:	200003e0 	.word	0x200003e0
 8001dc8:	20000470 	.word	0x20000470
 8001dcc:	20000314 	.word	0x20000314
 8001dd0:	200006b8 	.word	0x200006b8
 8001dd4:	20000348 	.word	0x20000348
 8001dd8:	20000670 	.word	0x20000670
 8001ddc:	200000d8 	.word	0x200000d8
 8001de0:	200000dc 	.word	0x200000dc
 8001de4:	20000384 	.word	0x20000384
 8001de8:	20000388 	.word	0x20000388
 8001dec:	2000038c 	.word	0x2000038c
 8001df0:	20000300 	.word	0x20000300
 8001df4:	20000028 	.word	0x20000028
 8001df8:	2000066c 	.word	0x2000066c
 8001dfc:	20000038 	.word	0x20000038
 8001e00:	20000668 	.word	0x20000668
 8001e04:	20000048 	.word	0x20000048
 8001e08:	2000066a 	.word	0x2000066a

08001e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b094      	sub	sp, #80	@ 0x50
 8001e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e12:	f107 0320 	add.w	r3, r7, #32
 8001e16:	2230      	movs	r2, #48	@ 0x30
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f006 f99a 	bl	8008154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <SystemClock_Config+0xc8>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	4a26      	ldr	r2, [pc, #152]	@ (8001ed4 <SystemClock_Config+0xc8>)
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e40:	4b24      	ldr	r3, [pc, #144]	@ (8001ed4 <SystemClock_Config+0xc8>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <SystemClock_Config+0xcc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a20      	ldr	r2, [pc, #128]	@ (8001ed8 <SystemClock_Config+0xcc>)
 8001e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed8 <SystemClock_Config+0xcc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e70:	2310      	movs	r3, #16
 8001e72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e74:	2302      	movs	r3, #2
 8001e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001e80:	2348      	movs	r3, #72	@ 0x48
 8001e82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e84:	2302      	movs	r3, #2
 8001e86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e88:	2304      	movs	r3, #4
 8001e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8c:	f107 0320 	add.w	r3, r7, #32
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 ff25 	bl	8004ce0 <HAL_RCC_OscConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e9c:	f000 f81e 	bl	8001edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	2102      	movs	r1, #2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f987 	bl	80051d0 <HAL_RCC_ClockConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ec8:	f000 f808 	bl	8001edc <Error_Handler>
  }
}
 8001ecc:	bf00      	nop
 8001ece:	3750      	adds	r7, #80	@ 0x50
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000

08001edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee0:	b672      	cpsid	i
}
 8001ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <Error_Handler+0x8>

08001ee8 <setLeftRpm>:
uint16_t count_num_left_past=-1;
uint16_t count_num_right_past=-1;
extern int countnum_rightcircuance;
extern int countnum_leftcircuance;
extern float currentRpm_left,currentRpm_right;
void setLeftRpm(float rpm){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	ed87 0a01 	vstr	s0, [r7, #4]
	 currentRpm_left=getLeftRpm(&htim2);
 8001ef2:	480e      	ldr	r0, [pc, #56]	@ (8001f2c <setLeftRpm+0x44>)
 8001ef4:	f000 f90c 	bl	8002110 <getLeftRpm>
 8001ef8:	eef0 7a40 	vmov.f32	s15, s0
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <setLeftRpm+0x48>)
 8001efe:	edc3 7a00 	vstr	s15, [r3]
	pulseLeft+=pidDiffLeft(rpm, currentRpm_left,&leftError);
 8001f02:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <setLeftRpm+0x48>)
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	480a      	ldr	r0, [pc, #40]	@ (8001f34 <setLeftRpm+0x4c>)
 8001f0a:	eef0 0a67 	vmov.f32	s1, s15
 8001f0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f12:	f000 f83d 	bl	8001f90 <pidDiffLeft>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <setLeftRpm+0x50>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a06      	ldr	r2, [pc, #24]	@ (8001f38 <setLeftRpm+0x50>)
 8001f20:	6013      	str	r3, [r2, #0]

}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200003e0 	.word	0x200003e0
 8001f30:	200002f8 	.word	0x200002f8
 8001f34:	200000e0 	.word	0x200000e0
 8001f38:	200000d8 	.word	0x200000d8

08001f3c <setRightRpm>:
void setRightRpm(float rpm){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	ed87 0a01 	vstr	s0, [r7, #4]
	currentRpm_right=getRightRpm(&htim4);
 8001f46:	480e      	ldr	r0, [pc, #56]	@ (8001f80 <setRightRpm+0x44>)
 8001f48:	f000 f940 	bl	80021cc <getRightRpm>
 8001f4c:	eef0 7a40 	vmov.f32	s15, s0
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <setRightRpm+0x48>)
 8001f52:	edc3 7a00 	vstr	s15, [r3]
	pulseRight+=pidDiffRight(rpm, currentRpm_right,&rightError);
 8001f56:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <setRightRpm+0x48>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	480a      	ldr	r0, [pc, #40]	@ (8001f88 <setRightRpm+0x4c>)
 8001f5e:	eef0 0a67 	vmov.f32	s1, s15
 8001f62:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f66:	f000 f873 	bl	8002050 <pidDiffRight>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <setRightRpm+0x50>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a06      	ldr	r2, [pc, #24]	@ (8001f8c <setRightRpm+0x50>)
 8001f74:	6013      	str	r3, [r2, #0]

}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000470 	.word	0x20000470
 8001f84:	200002fc 	.word	0x200002fc
 8001f88:	200000e4 	.word	0x200000e4
 8001f8c:	200000dc 	.word	0x200000dc

08001f90 <pidDiffLeft>:
void setPID(char factor,float index){
	if (factor=='p'){kp=index;}
	else if (factor=='i'){ki=index;}
	else if (factor=='d'){kd=index;};
}
int pidDiffLeft(float target,float present,float * erro){
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f9e:	6078      	str	r0, [r7, #4]
	float error = target - present;
 8001fa0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fac:	edc7 7a05 	vstr	s15, [r7, #20]

		float pwm_pid=0;
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
		*erro = error;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	601a      	str	r2, [r3, #0]
		pwm_pid = kp*(error- error_last_left)+ki* error
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800203c <pidDiffLeft+0xac>)
 8001fbe:	edd3 7a00 	vldr	s15, [r3]
 8001fc2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fca:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <pidDiffLeft+0xb0>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <pidDiffLeft+0xb4>)
 8001fd6:	edd3 6a00 	vldr	s13, [r3]
 8001fda:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+kd*( error-2* error_last_left+ error_before_left);
 8001fe6:	4b15      	ldr	r3, [pc, #84]	@ (800203c <pidDiffLeft+0xac>)
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ff0:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ff4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ff8:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <pidDiffLeft+0xb8>)
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <pidDiffLeft+0xbc>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ee66 7aa7 	vmul.f32	s15, s13, s15
		pwm_pid = kp*(error- error_last_left)+ki* error
 800200c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002010:	edc7 7a04 	vstr	s15, [r7, #16]
		 error_before_left =  error_last_left;	  	    // 保存上上次误差
 8002014:	4b09      	ldr	r3, [pc, #36]	@ (800203c <pidDiffLeft+0xac>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0b      	ldr	r2, [pc, #44]	@ (8002048 <pidDiffLeft+0xb8>)
 800201a:	6013      	str	r3, [r2, #0]
		 error_last_left =  error;	              // 保存上次偏差
 800201c:	4a07      	ldr	r2, [pc, #28]	@ (800203c <pidDiffLeft+0xac>)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	6013      	str	r3, [r2, #0]
		 return (int)pwm_pid;
 8002022:	edd7 7a04 	vldr	s15, [r7, #16]
 8002026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800202a:	ee17 3a90 	vmov	r3, s15
}
 800202e:	4618      	mov	r0, r3
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	200000e8 	.word	0x200000e8
 8002040:	20000000 	.word	0x20000000
 8002044:	20000004 	.word	0x20000004
 8002048:	200000ec 	.word	0x200000ec
 800204c:	20000008 	.word	0x20000008

08002050 <pidDiffRight>:
int pidDiffRight(float target,float present,float * erro){
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	ed87 0a03 	vstr	s0, [r7, #12]
 800205a:	edc7 0a02 	vstr	s1, [r7, #8]
 800205e:	6078      	str	r0, [r7, #4]
	float error = target - present;
 8002060:	ed97 7a03 	vldr	s14, [r7, #12]
 8002064:	edd7 7a02 	vldr	s15, [r7, #8]
 8002068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206c:	edc7 7a05 	vstr	s15, [r7, #20]

		float pwm_pid=0;
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
		*erro = error;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	601a      	str	r2, [r3, #0]
		pwm_pid = kp*(error- error_last_right)+ki* error
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <pidDiffRight+0xac>)
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	ed97 7a05 	vldr	s14, [r7, #20]
 8002086:	ee37 7a67 	vsub.f32	s14, s14, s15
 800208a:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <pidDiffRight+0xb0>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002094:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <pidDiffRight+0xb4>)
 8002096:	edd3 6a00 	vldr	s13, [r3]
 800209a:	edd7 7a05 	vldr	s15, [r7, #20]
 800209e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+kd*( error-2* error_last_right+ error_before_right);
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <pidDiffRight+0xac>)
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020b0:	edd7 6a05 	vldr	s13, [r7, #20]
 80020b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80020b8:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <pidDiffRight+0xb8>)
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020c2:	4b12      	ldr	r3, [pc, #72]	@ (800210c <pidDiffRight+0xbc>)
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
		pwm_pid = kp*(error- error_last_right)+ki* error
 80020cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d0:	edc7 7a04 	vstr	s15, [r7, #16]
		 error_before_right =  error_last_right;	  	    // 保存上上次误差
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <pidDiffRight+0xac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002108 <pidDiffRight+0xb8>)
 80020da:	6013      	str	r3, [r2, #0]
		 error_last_right =  error;	              // 保存上次偏差
 80020dc:	4a07      	ldr	r2, [pc, #28]	@ (80020fc <pidDiffRight+0xac>)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	6013      	str	r3, [r2, #0]
		 return (int)pwm_pid;
 80020e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ea:	ee17 3a90 	vmov	r3, s15
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	200000f0 	.word	0x200000f0
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004
 8002108:	200000f4 	.word	0x200000f4
 800210c:	20000008 	.word	0x20000008

08002110 <getLeftRpm>:
float getLeftRpm(TIM_HandleTypeDef * htim){
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	uint16_t countnum=0;
 8002118:	2300      	movs	r3, #0
 800211a:	82fb      	strh	r3, [r7, #22]
	if(countnum_leftcircuance!=0){
 800211c:	4b27      	ldr	r3, [pc, #156]	@ (80021bc <getLeftRpm+0xac>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d035      	beq.n	8002190 <getLeftRpm+0x80>
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)){
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b10      	cmp	r3, #16
 8002130:	d10d      	bne.n	800214e <getLeftRpm+0x3e>
		countnum =32768-__HAL_TIM_GET_COUNTER(htim);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b21      	ldr	r3, [pc, #132]	@ (80021c0 <getLeftRpm+0xb0>)
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	82fb      	strh	r3, [r7, #22]
		count_num_left_past=countnum;
 8002140:	4a20      	ldr	r2, [pc, #128]	@ (80021c4 <getLeftRpm+0xb4>)
 8002142:	8afb      	ldrh	r3, [r7, #22]
 8002144:	8013      	strh	r3, [r2, #0]
		countnum_leftcircuance=1;
 8002146:	4b1d      	ldr	r3, [pc, #116]	@ (80021bc <getLeftRpm+0xac>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e00c      	b.n	8002168 <getLeftRpm+0x58>
	}else{
		countnum=__HAL_TIM_GET_COUNTER(htim)-32768;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	b29b      	uxth	r3, r3
 8002156:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800215a:	82fb      	strh	r3, [r7, #22]
		count_num_left_past=countnum;
 800215c:	4a19      	ldr	r2, [pc, #100]	@ (80021c4 <getLeftRpm+0xb4>)
 800215e:	8afb      	ldrh	r3, [r7, #22]
 8002160:	8013      	strh	r3, [r2, #0]
		countnum_leftcircuance=1;
 8002162:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <getLeftRpm+0xac>)
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]
	}
	float rpm;
	rpm = (4*countnum)/3;//读取编码器数�????
 8002168:	8afb      	ldrh	r3, [r7, #22]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4a16      	ldr	r2, [pc, #88]	@ (80021c8 <getLeftRpm+0xb8>)
 800216e:	fb82 1203 	smull	r1, r2, r2, r3
 8002172:	17db      	asrs	r3, r3, #31
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217e:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COUNTER(htim,32768);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800218a:	625a      	str	r2, [r3, #36]	@ 0x24
	return rpm;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	e00b      	b.n	80021a8 <getLeftRpm+0x98>
	}
	else{
		float rpm=0;
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
		__HAL_TIM_SET_COUNTER(htim,32768);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800219e:	625a      	str	r2, [r3, #36]	@ 0x24
		countnum_leftcircuance=1;
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <getLeftRpm+0xac>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
		return rpm;
 80021a6:	693b      	ldr	r3, [r7, #16]
	}

}
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eeb0 0a67 	vmov.f32	s0, s15
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000380 	.word	0x20000380
 80021c0:	ffff8000 	.word	0xffff8000
 80021c4:	2000000c 	.word	0x2000000c
 80021c8:	55555556 	.word	0x55555556

080021cc <getRightRpm>:
float getRightRpm(TIM_HandleTypeDef * htim){
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	uint16_t countnum=0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	82fb      	strh	r3, [r7, #22]
	if(countnum_rightcircuance!=0){
 80021d8:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <getRightRpm+0xac>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d035      	beq.n	800224c <getRightRpm+0x80>
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d10d      	bne.n	800220a <getRightRpm+0x3e>
		countnum =32768-__HAL_TIM_GET_COUNTER(htim);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b21      	ldr	r3, [pc, #132]	@ (800227c <getRightRpm+0xb0>)
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	82fb      	strh	r3, [r7, #22]
		count_num_right_past=countnum;
 80021fc:	4a20      	ldr	r2, [pc, #128]	@ (8002280 <getRightRpm+0xb4>)
 80021fe:	8afb      	ldrh	r3, [r7, #22]
 8002200:	8013      	strh	r3, [r2, #0]
		countnum_rightcircuance=1;
 8002202:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <getRightRpm+0xac>)
 8002204:	2201      	movs	r2, #1
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e00c      	b.n	8002224 <getRightRpm+0x58>
	}else{
		countnum=__HAL_TIM_GET_COUNTER(htim)-32768;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	b29b      	uxth	r3, r3
 8002212:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8002216:	82fb      	strh	r3, [r7, #22]
		count_num_right_past=countnum;
 8002218:	4a19      	ldr	r2, [pc, #100]	@ (8002280 <getRightRpm+0xb4>)
 800221a:	8afb      	ldrh	r3, [r7, #22]
 800221c:	8013      	strh	r3, [r2, #0]
		countnum_rightcircuance=1;
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <getRightRpm+0xac>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
	}
	float rpm;
	rpm = (4*countnum)/3;//读取编码器数�????
 8002224:	8afb      	ldrh	r3, [r7, #22]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4a16      	ldr	r2, [pc, #88]	@ (8002284 <getRightRpm+0xb8>)
 800222a:	fb82 1203 	smull	r1, r2, r2, r3
 800222e:	17db      	asrs	r3, r3, #31
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223a:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COUNTER(htim,32768);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24
	return rpm;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	e00b      	b.n	8002264 <getRightRpm+0x98>
	}
	else{
			float rpm=0;
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
			__HAL_TIM_SET_COUNTER(htim,32768);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800225a:	625a      	str	r2, [r3, #36]	@ 0x24
			countnum_rightcircuance=1;
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <getRightRpm+0xac>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]
			return rpm;
 8002262:	693b      	ldr	r3, [r7, #16]
		}
}
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eeb0 0a67 	vmov.f32	s0, s15
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	2000037c 	.word	0x2000037c
 800227c:	ffff8000 	.word	0xffff8000
 8002280:	2000000e 	.word	0x2000000e
 8002284:	55555556 	.word	0x55555556

08002288 <setRightPWM>:
void setRightPWM(int pulse,uint32_t channel){
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
	int pwm_pulse;
	if(pulse>0){pwm_pulse=pulse;}else{pwm_pulse=0;};
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	dd02      	ble.n	800229e <setRightPWM+0x16>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e001      	b.n	80022a2 <setRightPWM+0x1a>
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
	if(pwm_pulse>=719){pwm_pulse=719;};
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80022a8:	4293      	cmp	r3, r2
 80022aa:	dd02      	ble.n	80022b2 <setRightPWM+0x2a>
 80022ac:	f240 23cf 	movw	r3, #719	@ 0x2cf
 80022b0:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d104      	bne.n	80022c2 <setRightPWM+0x3a>
 80022b8:	4b0f      	ldr	r3, [pc, #60]	@ (80022f8 <setRightPWM+0x70>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80022c0:	e013      	b.n	80022ea <setRightPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d104      	bne.n	80022d2 <setRightPWM+0x4a>
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <setRightPWM+0x70>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80022d0:	e00b      	b.n	80022ea <setRightPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d104      	bne.n	80022e2 <setRightPWM+0x5a>
 80022d8:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <setRightPWM+0x70>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80022e0:	e003      	b.n	80022ea <setRightPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 80022e2:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <setRightPWM+0x70>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	200004b8 	.word	0x200004b8

080022fc <setLeftPWM>:
void setLeftPWM(int pulse,uint32_t channel){
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
	int pwm_pulse;
	if(pulse>0){pwm_pulse=pulse;}else{pwm_pulse=0;};
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	dd02      	ble.n	8002312 <setLeftPWM+0x16>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e001      	b.n	8002316 <setLeftPWM+0x1a>
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
	if(pwm_pulse>=719){pwm_pulse=719;};
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800231c:	4293      	cmp	r3, r2
 800231e:	dd02      	ble.n	8002326 <setLeftPWM+0x2a>
 8002320:	f240 23cf 	movw	r3, #719	@ 0x2cf
 8002324:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <setLeftPWM+0x3a>
 800232c:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <setLeftPWM+0x70>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002334:	e013      	b.n	800235e <setLeftPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d104      	bne.n	8002346 <setLeftPWM+0x4a>
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <setLeftPWM+0x70>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002344:	e00b      	b.n	800235e <setLeftPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b08      	cmp	r3, #8
 800234a:	d104      	bne.n	8002356 <setLeftPWM+0x5a>
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <setLeftPWM+0x70>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002354:	e003      	b.n	800235e <setLeftPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8002356:	4b05      	ldr	r3, [pc, #20]	@ (800236c <setLeftPWM+0x70>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	200004b8 	.word	0x200004b8

08002370 <setDirection>:

void setDirection(char dir){
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
	if (dir=='w'){
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2b77      	cmp	r3, #119	@ 0x77
 800237e:	d114      	bne.n	80023aa <setDirection+0x3a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	2102      	movs	r1, #2
 8002384:	482e      	ldr	r0, [pc, #184]	@ (8002440 <setDirection+0xd0>)
 8002386:	f002 fc91 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800238a:	2201      	movs	r2, #1
 800238c:	2104      	movs	r1, #4
 800238e:	482c      	ldr	r0, [pc, #176]	@ (8002440 <setDirection+0xd0>)
 8002390:	f002 fc8c 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8002394:	2200      	movs	r2, #0
 8002396:	2108      	movs	r1, #8
 8002398:	4829      	ldr	r0, [pc, #164]	@ (8002440 <setDirection+0xd0>)
 800239a:	f002 fc87 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 800239e:	2201      	movs	r2, #1
 80023a0:	2110      	movs	r1, #16
 80023a2:	4827      	ldr	r0, [pc, #156]	@ (8002440 <setDirection+0xd0>)
 80023a4:	f002 fc82 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
	}
}
 80023a8:	e046      	b.n	8002438 <setDirection+0xc8>
	else if (dir=='s'){
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	2b73      	cmp	r3, #115	@ 0x73
 80023ae:	d114      	bne.n	80023da <setDirection+0x6a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80023b0:	2201      	movs	r2, #1
 80023b2:	2102      	movs	r1, #2
 80023b4:	4822      	ldr	r0, [pc, #136]	@ (8002440 <setDirection+0xd0>)
 80023b6:	f002 fc79 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2104      	movs	r1, #4
 80023be:	4820      	ldr	r0, [pc, #128]	@ (8002440 <setDirection+0xd0>)
 80023c0:	f002 fc74 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 80023c4:	2201      	movs	r2, #1
 80023c6:	2108      	movs	r1, #8
 80023c8:	481d      	ldr	r0, [pc, #116]	@ (8002440 <setDirection+0xd0>)
 80023ca:	f002 fc6f 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2110      	movs	r1, #16
 80023d2:	481b      	ldr	r0, [pc, #108]	@ (8002440 <setDirection+0xd0>)
 80023d4:	f002 fc6a 	bl	8004cac <HAL_GPIO_WritePin>
}
 80023d8:	e02e      	b.n	8002438 <setDirection+0xc8>
	else if (dir=='a'){
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	2b61      	cmp	r3, #97	@ 0x61
 80023de:	d114      	bne.n	800240a <setDirection+0x9a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80023e0:	2201      	movs	r2, #1
 80023e2:	2102      	movs	r1, #2
 80023e4:	4816      	ldr	r0, [pc, #88]	@ (8002440 <setDirection+0xd0>)
 80023e6:	f002 fc61 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2104      	movs	r1, #4
 80023ee:	4814      	ldr	r0, [pc, #80]	@ (8002440 <setDirection+0xd0>)
 80023f0:	f002 fc5c 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2108      	movs	r1, #8
 80023f8:	4811      	ldr	r0, [pc, #68]	@ (8002440 <setDirection+0xd0>)
 80023fa:	f002 fc57 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 80023fe:	2201      	movs	r2, #1
 8002400:	2110      	movs	r1, #16
 8002402:	480f      	ldr	r0, [pc, #60]	@ (8002440 <setDirection+0xd0>)
 8002404:	f002 fc52 	bl	8004cac <HAL_GPIO_WritePin>
}
 8002408:	e016      	b.n	8002438 <setDirection+0xc8>
	else if (dir=='d'){
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	2b64      	cmp	r3, #100	@ 0x64
 800240e:	d113      	bne.n	8002438 <setDirection+0xc8>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	2102      	movs	r1, #2
 8002414:	480a      	ldr	r0, [pc, #40]	@ (8002440 <setDirection+0xd0>)
 8002416:	f002 fc49 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800241a:	2201      	movs	r2, #1
 800241c:	2104      	movs	r1, #4
 800241e:	4808      	ldr	r0, [pc, #32]	@ (8002440 <setDirection+0xd0>)
 8002420:	f002 fc44 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8002424:	2201      	movs	r2, #1
 8002426:	2108      	movs	r1, #8
 8002428:	4805      	ldr	r0, [pc, #20]	@ (8002440 <setDirection+0xd0>)
 800242a:	f002 fc3f 	bl	8004cac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800242e:	2200      	movs	r2, #0
 8002430:	2110      	movs	r1, #16
 8002432:	4803      	ldr	r0, [pc, #12]	@ (8002440 <setDirection+0xd0>)
 8002434:	f002 fc3a 	bl	8004cac <HAL_GPIO_WritePin>
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000

08002444 <setSpin>:
void setSpin(int angel,char dir){
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]

	if (dir=='A'){
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	2b41      	cmp	r3, #65	@ 0x41
 8002454:	d106      	bne.n	8002464 <setSpin+0x20>
		spin=1;
 8002456:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <setSpin+0x78>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]
		setDirection('a');
 800245c:	2061      	movs	r0, #97	@ 0x61
 800245e:	f7ff ff87 	bl	8002370 <setDirection>
 8002462:	e01c      	b.n	800249e <setSpin+0x5a>
	}else if (dir=='D'){
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	2b44      	cmp	r3, #68	@ 0x44
 8002468:	d106      	bne.n	8002478 <setSpin+0x34>
		spin=1;
 800246a:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <setSpin+0x78>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]
		setDirection('d');
 8002470:	2064      	movs	r0, #100	@ 0x64
 8002472:	f7ff ff7d 	bl	8002370 <setDirection>
 8002476:	e012      	b.n	800249e <setSpin+0x5a>
	}else if(dir=='F'){
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	2b46      	cmp	r3, #70	@ 0x46
 800247c:	d106      	bne.n	800248c <setSpin+0x48>
		spin=1;
 800247e:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <setSpin+0x78>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]
		setDirection('w');
 8002484:	2077      	movs	r0, #119	@ 0x77
 8002486:	f7ff ff73 	bl	8002370 <setDirection>
 800248a:	e008      	b.n	800249e <setSpin+0x5a>
	}else if(dir=='S'){
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	2b53      	cmp	r3, #83	@ 0x53
 8002490:	d105      	bne.n	800249e <setSpin+0x5a>
		spin=1;
 8002492:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <setSpin+0x78>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
		setDirection('s');
 8002498:	2073      	movs	r0, #115	@ 0x73
 800249a:	f7ff ff69 	bl	8002370 <setDirection>
	}
	rpmLeft=rpmRight=55;
 800249e:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <setSpin+0x7c>)
 80024a0:	4a08      	ldr	r2, [pc, #32]	@ (80024c4 <setSpin+0x80>)
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <setSpin+0x7c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	@ (80024c8 <setSpin+0x84>)
 80024aa:	6013      	str	r3, [r2, #0]
	dt=angel;
 80024ac:	4a07      	ldr	r2, [pc, #28]	@ (80024cc <setSpin+0x88>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]

}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200000d0 	.word	0x200000d0
 80024c0:	20000304 	.word	0x20000304
 80024c4:	425c0000 	.word	0x425c0000
 80024c8:	20000308 	.word	0x20000308
 80024cc:	200000d4 	.word	0x200000d4

080024d0 <Servo_turn>:
//Servo3 是openMV转动电机
TIM_HandleTypeDef *Servo3=&htim1;
uint32_t Servo3_Channel = TIM_CHANNEL_3;
//下面是各个电机转动的总函数
extern int craw_state;
float Servo_turn(int servo_number,float turning_theta,float turning_theta_0){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b094      	sub	sp, #80	@ 0x50
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80024dc:	edc7 0a01 	vstr	s1, [r7, #4]
	float turning_time = 0;
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	637b      	str	r3, [r7, #52]	@ 0x34
	float turning_t=0;
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	633b      	str	r3, [r7, #48]	@ 0x30
	float turning_time1 = 0;
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float turning_t1=0;
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	//uint32_t waiting_time_servo=0;
	turning_time=turning_theta/90;
 80024f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80024fc:	eddf 6aab 	vldr	s13, [pc, #684]	@ 80027ac <Servo_turn+0x2dc>
 8002500:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002504:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	turning_time1=turning_theta_0/90;
 8002508:	ed97 7a01 	vldr	s14, [r7, #4]
 800250c:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 80027ac <Servo_turn+0x2dc>
 8002510:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002514:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	//waiting_time_servo=turning_time*waiting_time_servo_max;
	turning_time=turning_time+0.5;
 8002518:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800251c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002520:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002524:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	turning_time1=turning_time1+0.5;
 8002528:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800252c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002530:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002534:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	turning_t=turning_time*1000;
 8002538:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800253c:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80027b0 <Servo_turn+0x2e0>
 8002540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002544:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	turning_t1=turning_time1*1000;
 8002548:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800254c:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 80027b0 <Servo_turn+0x2e0>
 8002550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002554:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	if(turning_theta>180){
 8002558:	edd7 7a02 	vldr	s15, [r7, #8]
 800255c:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80027b4 <Servo_turn+0x2e4>
 8002560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002568:	dd02      	ble.n	8002570 <Servo_turn+0xa0>
		return 0;
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e2c7      	b.n	8002b00 <Servo_turn+0x630>
	}
	float turning_time2=0;//真正转过的角度
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
	turning_time2=turning_t-turning_t1;
 8002576:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800257a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800257e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002582:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float turning_theta2=0;
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
	turning_theta2=turning_theta-turning_theta_0;
 800258c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002590:	edd7 7a01 	vldr	s15, [r7, #4]
 8002594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002598:	edc7 7a08 	vstr	s15, [r7, #32]
	if(turning_time2>0){
 800259c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80025a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	f340 813d 	ble.w	8002826 <Servo_turn+0x356>
	float p=turning_theta2;
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	617b      	str	r3, [r7, #20]
	p=p/180;
 80025b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80025b4:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80027b4 <Servo_turn+0x2e4>
 80025b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025bc:	edc7 7a05 	vstr	s15, [r7, #20]
	p=p*60;
 80025c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80025c4:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80027b8 <Servo_turn+0x2e8>
 80025c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025cc:	edc7 7a05 	vstr	s15, [r7, #20]
	int delay_time=0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
	delay_time=(int)p;
 80025d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80025d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025dc:	ee17 3a90 	vmov	r3, s15
 80025e0:	613b      	str	r3, [r7, #16]
if(servo_number==1){
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d154      	bne.n	8002692 <Servo_turn+0x1c2>
	for(float i=0;i<turning_time2;i+=turning_time2/100){
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025ee:	e046      	b.n	800267e <Servo_turn+0x1ae>
		__HAL_TIM_SET_COMPARE(Servo1,Servo1_Channel,(uint32_t)(turning_t));
 80025f0:	4b72      	ldr	r3, [pc, #456]	@ (80027bc <Servo_turn+0x2ec>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <Servo_turn+0x13e>
 80025f8:	4b71      	ldr	r3, [pc, #452]	@ (80027c0 <Servo_turn+0x2f0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002606:	ee17 2a90 	vmov	r2, s15
 800260a:	635a      	str	r2, [r3, #52]	@ 0x34
 800260c:	e027      	b.n	800265e <Servo_turn+0x18e>
 800260e:	4b6b      	ldr	r3, [pc, #428]	@ (80027bc <Servo_turn+0x2ec>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b04      	cmp	r3, #4
 8002614:	d10a      	bne.n	800262c <Servo_turn+0x15c>
 8002616:	4b6a      	ldr	r3, [pc, #424]	@ (80027c0 <Servo_turn+0x2f0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002624:	ee17 3a90 	vmov	r3, s15
 8002628:	6393      	str	r3, [r2, #56]	@ 0x38
 800262a:	e018      	b.n	800265e <Servo_turn+0x18e>
 800262c:	4b63      	ldr	r3, [pc, #396]	@ (80027bc <Servo_turn+0x2ec>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d10a      	bne.n	800264a <Servo_turn+0x17a>
 8002634:	4b62      	ldr	r3, [pc, #392]	@ (80027c0 <Servo_turn+0x2f0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800263e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002642:	ee17 3a90 	vmov	r3, s15
 8002646:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002648:	e009      	b.n	800265e <Servo_turn+0x18e>
 800264a:	4b5d      	ldr	r3, [pc, #372]	@ (80027c0 <Servo_turn+0x2f0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002658:	ee17 3a90 	vmov	r3, s15
 800265c:	6413      	str	r3, [r2, #64]	@ 0x40
		HAL_Delay(delay_time);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4618      	mov	r0, r3
 8002662:	f001 fc37 	bl	8003ed4 <HAL_Delay>
	for(float i=0;i<turning_time2;i+=turning_time2/100){
 8002666:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800266a:	eddf 6a56 	vldr	s13, [pc, #344]	@ 80027c4 <Servo_turn+0x2f4>
 800266e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002672:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 800267e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002682:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	d4af      	bmi.n	80025f0 <Servo_turn+0x120>
 8002690:	e235      	b.n	8002afe <Servo_turn+0x62e>
	}

}
else if(servo_number==2){
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d154      	bne.n	8002742 <Servo_turn+0x272>
	for(float i=0;i<turning_time2;i+=turning_time2/100){
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800269e:	e046      	b.n	800272e <Servo_turn+0x25e>
			__HAL_TIM_SET_COMPARE(Servo2,Servo2_Channel,(uint32_t)(turning_t));
 80026a0:	4b49      	ldr	r3, [pc, #292]	@ (80027c8 <Servo_turn+0x2f8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <Servo_turn+0x1ee>
 80026a8:	4b48      	ldr	r3, [pc, #288]	@ (80027cc <Servo_turn+0x2fc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80026b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026b6:	ee17 2a90 	vmov	r2, s15
 80026ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80026bc:	e027      	b.n	800270e <Servo_turn+0x23e>
 80026be:	4b42      	ldr	r3, [pc, #264]	@ (80027c8 <Servo_turn+0x2f8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d10a      	bne.n	80026dc <Servo_turn+0x20c>
 80026c6:	4b41      	ldr	r3, [pc, #260]	@ (80027cc <Servo_turn+0x2fc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80026d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d4:	ee17 3a90 	vmov	r3, s15
 80026d8:	6393      	str	r3, [r2, #56]	@ 0x38
 80026da:	e018      	b.n	800270e <Servo_turn+0x23e>
 80026dc:	4b3a      	ldr	r3, [pc, #232]	@ (80027c8 <Servo_turn+0x2f8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d10a      	bne.n	80026fa <Servo_turn+0x22a>
 80026e4:	4b39      	ldr	r3, [pc, #228]	@ (80027cc <Servo_turn+0x2fc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80026ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026f2:	ee17 3a90 	vmov	r3, s15
 80026f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80026f8:	e009      	b.n	800270e <Servo_turn+0x23e>
 80026fa:	4b34      	ldr	r3, [pc, #208]	@ (80027cc <Servo_turn+0x2fc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002708:	ee17 3a90 	vmov	r3, s15
 800270c:	6413      	str	r3, [r2, #64]	@ 0x40
	HAL_Delay(delay_time);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4618      	mov	r0, r3
 8002712:	f001 fbdf 	bl	8003ed4 <HAL_Delay>
	for(float i=0;i<turning_time2;i+=turning_time2/100){
 8002716:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800271a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80027c4 <Servo_turn+0x2f4>
 800271e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002722:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 800272e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002732:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273e:	d4af      	bmi.n	80026a0 <Servo_turn+0x1d0>
 8002740:	e1dd      	b.n	8002afe <Servo_turn+0x62e>
		}
}
else if(servo_number==3){
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d16b      	bne.n	8002820 <Servo_turn+0x350>
	for(float i=0;i<turning_time2;i+=turning_time2/100){
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	647b      	str	r3, [r7, #68]	@ 0x44
 800274e:	e05d      	b.n	800280c <Servo_turn+0x33c>
			__HAL_TIM_SET_COMPARE(Servo3,Servo3_Channel,(uint32_t)(turning_t));
 8002750:	4b1f      	ldr	r3, [pc, #124]	@ (80027d0 <Servo_turn+0x300>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <Servo_turn+0x29e>
 8002758:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <Servo_turn+0x304>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002766:	ee17 2a90 	vmov	r2, s15
 800276a:	635a      	str	r2, [r3, #52]	@ 0x34
 800276c:	e03e      	b.n	80027ec <Servo_turn+0x31c>
 800276e:	4b18      	ldr	r3, [pc, #96]	@ (80027d0 <Servo_turn+0x300>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b04      	cmp	r3, #4
 8002774:	d10a      	bne.n	800278c <Servo_turn+0x2bc>
 8002776:	4b17      	ldr	r3, [pc, #92]	@ (80027d4 <Servo_turn+0x304>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002784:	ee17 3a90 	vmov	r3, s15
 8002788:	6393      	str	r3, [r2, #56]	@ 0x38
 800278a:	e02f      	b.n	80027ec <Servo_turn+0x31c>
 800278c:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <Servo_turn+0x300>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d121      	bne.n	80027d8 <Servo_turn+0x308>
 8002794:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <Servo_turn+0x304>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800279e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027a2:	ee17 3a90 	vmov	r3, s15
 80027a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80027a8:	e020      	b.n	80027ec <Servo_turn+0x31c>
 80027aa:	bf00      	nop
 80027ac:	42b40000 	.word	0x42b40000
 80027b0:	447a0000 	.word	0x447a0000
 80027b4:	43340000 	.word	0x43340000
 80027b8:	42700000 	.word	0x42700000
 80027bc:	20000014 	.word	0x20000014
 80027c0:	20000010 	.word	0x20000010
 80027c4:	42c80000 	.word	0x42c80000
 80027c8:	20000394 	.word	0x20000394
 80027cc:	20000018 	.word	0x20000018
 80027d0:	20000020 	.word	0x20000020
 80027d4:	2000001c 	.word	0x2000001c
 80027d8:	4baa      	ldr	r3, [pc, #680]	@ (8002a84 <Servo_turn+0x5b4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80027e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e6:	ee17 3a90 	vmov	r3, s15
 80027ea:	6413      	str	r3, [r2, #64]	@ 0x40
	HAL_Delay(delay_time);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 fb70 	bl	8003ed4 <HAL_Delay>
	for(float i=0;i<turning_time2;i+=turning_time2/100){
 80027f4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80027f8:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002a88 <Servo_turn+0x5b8>
 80027fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002800:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002808:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 800280c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002810:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281c:	d498      	bmi.n	8002750 <Servo_turn+0x280>
 800281e:	e16e      	b.n	8002afe <Servo_turn+0x62e>
		}
}
else{
	return 0;
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	e16c      	b.n	8002b00 <Servo_turn+0x630>
}
	}
	else{
		float p=-turning_theta2;
 8002826:	edd7 7a08 	vldr	s15, [r7, #32]
 800282a:	eef1 7a67 	vneg.f32	s15, s15
 800282e:	edc7 7a07 	vstr	s15, [r7, #28]
			p=p/180;
 8002832:	ed97 7a07 	vldr	s14, [r7, #28]
 8002836:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002a8c <Servo_turn+0x5bc>
 800283a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800283e:	edc7 7a07 	vstr	s15, [r7, #28]
			p=p*250;
 8002842:	edd7 7a07 	vldr	s15, [r7, #28]
 8002846:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8002a90 <Servo_turn+0x5c0>
 800284a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800284e:	edc7 7a07 	vstr	s15, [r7, #28]
			int delay_time=0;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
			delay_time=(int)p;
 8002856:	edd7 7a07 	vldr	s15, [r7, #28]
 800285a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800285e:	ee17 3a90 	vmov	r3, s15
 8002862:	61bb      	str	r3, [r7, #24]
	if(servo_number==1){
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d164      	bne.n	8002934 <Servo_turn+0x464>
		for(float i=0;i>turning_time2;i+=turning_time2/100){
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002870:	e056      	b.n	8002920 <Servo_turn+0x450>
			__HAL_TIM_SET_COMPARE(Servo1,Servo1_Channel,(uint32_t)(i+turning_t1));
 8002872:	4b88      	ldr	r3, [pc, #544]	@ (8002a94 <Servo_turn+0x5c4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10e      	bne.n	8002898 <Servo_turn+0x3c8>
 800287a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800287e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002886:	4b84      	ldr	r3, [pc, #528]	@ (8002a98 <Servo_turn+0x5c8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002890:	ee17 2a90 	vmov	r2, s15
 8002894:	635a      	str	r2, [r3, #52]	@ 0x34
 8002896:	e033      	b.n	8002900 <Servo_turn+0x430>
 8002898:	4b7e      	ldr	r3, [pc, #504]	@ (8002a94 <Servo_turn+0x5c4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b04      	cmp	r3, #4
 800289e:	d10e      	bne.n	80028be <Servo_turn+0x3ee>
 80028a0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80028a4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80028a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002a98 <Servo_turn+0x5c8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028b6:	ee17 3a90 	vmov	r3, s15
 80028ba:	6393      	str	r3, [r2, #56]	@ 0x38
 80028bc:	e020      	b.n	8002900 <Servo_turn+0x430>
 80028be:	4b75      	ldr	r3, [pc, #468]	@ (8002a94 <Servo_turn+0x5c4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d10e      	bne.n	80028e4 <Servo_turn+0x414>
 80028c6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80028ca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80028ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d2:	4b71      	ldr	r3, [pc, #452]	@ (8002a98 <Servo_turn+0x5c8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028dc:	ee17 3a90 	vmov	r3, s15
 80028e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80028e2:	e00d      	b.n	8002900 <Servo_turn+0x430>
 80028e4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80028e8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	4b69      	ldr	r3, [pc, #420]	@ (8002a98 <Servo_turn+0x5c8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028fa:	ee17 3a90 	vmov	r3, s15
 80028fe:	6413      	str	r3, [r2, #64]	@ 0x40
			HAL_Delay(delay_time);
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4618      	mov	r0, r3
 8002904:	f001 fae6 	bl	8003ed4 <HAL_Delay>
		for(float i=0;i>turning_time2;i+=turning_time2/100){
 8002908:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800290c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8002a88 <Servo_turn+0x5b8>
 8002910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002914:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8002920:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002924:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800292c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002930:	dc9f      	bgt.n	8002872 <Servo_turn+0x3a2>
 8002932:	e0e4      	b.n	8002afe <Servo_turn+0x62e>
		}

	}
	else if(servo_number==2){
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d164      	bne.n	8002a04 <Servo_turn+0x534>
		for(float i=0;i>turning_time2;i+=turning_time2/100){
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002940:	e056      	b.n	80029f0 <Servo_turn+0x520>
				__HAL_TIM_SET_COMPARE(Servo2,Servo2_Channel,(uint32_t)(i+turning_t1));
 8002942:	4b56      	ldr	r3, [pc, #344]	@ (8002a9c <Servo_turn+0x5cc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10e      	bne.n	8002968 <Servo_turn+0x498>
 800294a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800294e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002956:	4b52      	ldr	r3, [pc, #328]	@ (8002aa0 <Servo_turn+0x5d0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002960:	ee17 2a90 	vmov	r2, s15
 8002964:	635a      	str	r2, [r3, #52]	@ 0x34
 8002966:	e033      	b.n	80029d0 <Servo_turn+0x500>
 8002968:	4b4c      	ldr	r3, [pc, #304]	@ (8002a9c <Servo_turn+0x5cc>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b04      	cmp	r3, #4
 800296e:	d10e      	bne.n	800298e <Servo_turn+0x4be>
 8002970:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002974:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297c:	4b48      	ldr	r3, [pc, #288]	@ (8002aa0 <Servo_turn+0x5d0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002986:	ee17 3a90 	vmov	r3, s15
 800298a:	6393      	str	r3, [r2, #56]	@ 0x38
 800298c:	e020      	b.n	80029d0 <Servo_turn+0x500>
 800298e:	4b43      	ldr	r3, [pc, #268]	@ (8002a9c <Servo_turn+0x5cc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b08      	cmp	r3, #8
 8002994:	d10e      	bne.n	80029b4 <Servo_turn+0x4e4>
 8002996:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800299a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800299e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a2:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa0 <Servo_turn+0x5d0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ac:	ee17 3a90 	vmov	r3, s15
 80029b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80029b2:	e00d      	b.n	80029d0 <Servo_turn+0x500>
 80029b4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80029b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80029bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c0:	4b37      	ldr	r3, [pc, #220]	@ (8002aa0 <Servo_turn+0x5d0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ca:	ee17 3a90 	vmov	r3, s15
 80029ce:	6413      	str	r3, [r2, #64]	@ 0x40
			HAL_Delay(delay_time);
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 fa7e 	bl	8003ed4 <HAL_Delay>
		for(float i=0;i>turning_time2;i+=turning_time2/100){
 80029d8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80029dc:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8002a88 <Servo_turn+0x5b8>
 80029e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80029e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ec:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80029f0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80029f4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80029f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a00:	dc9f      	bgt.n	8002942 <Servo_turn+0x472>
 8002a02:	e07c      	b.n	8002afe <Servo_turn+0x62e>
			}
	}
	else if(servo_number==3){
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d176      	bne.n	8002af8 <Servo_turn+0x628>
		for(float i=0;i>turning_time2;i+=turning_time2/100){
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a10:	e068      	b.n	8002ae4 <Servo_turn+0x614>
				__HAL_TIM_SET_COMPARE(Servo3,Servo3_Channel,(uint32_t)(i+turning_t1));
 8002a12:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <Servo_turn+0x5d4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10e      	bne.n	8002a38 <Servo_turn+0x568>
 8002a1a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002a1e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a26:	4b17      	ldr	r3, [pc, #92]	@ (8002a84 <Servo_turn+0x5b4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a30:	ee17 2a90 	vmov	r2, s15
 8002a34:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a36:	e045      	b.n	8002ac4 <Servo_turn+0x5f4>
 8002a38:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <Servo_turn+0x5d4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d10e      	bne.n	8002a5e <Servo_turn+0x58e>
 8002a40:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002a44:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <Servo_turn+0x5b4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a56:	ee17 3a90 	vmov	r3, s15
 8002a5a:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a5c:	e032      	b.n	8002ac4 <Servo_turn+0x5f4>
 8002a5e:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <Servo_turn+0x5d4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d120      	bne.n	8002aa8 <Servo_turn+0x5d8>
 8002a66:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002a6a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a72:	4b04      	ldr	r3, [pc, #16]	@ (8002a84 <Servo_turn+0x5b4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a7c:	ee17 3a90 	vmov	r3, s15
 8002a80:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002a82:	e01f      	b.n	8002ac4 <Servo_turn+0x5f4>
 8002a84:	2000001c 	.word	0x2000001c
 8002a88:	42c80000 	.word	0x42c80000
 8002a8c:	43340000 	.word	0x43340000
 8002a90:	437a0000 	.word	0x437a0000
 8002a94:	20000014 	.word	0x20000014
 8002a98:	20000010 	.word	0x20000010
 8002a9c:	20000394 	.word	0x20000394
 8002aa0:	20000018 	.word	0x20000018
 8002aa4:	20000020 	.word	0x20000020
 8002aa8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002aac:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab4:	4b16      	ldr	r3, [pc, #88]	@ (8002b10 <Servo_turn+0x640>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002abe:	ee17 3a90 	vmov	r3, s15
 8002ac2:	6413      	str	r3, [r2, #64]	@ 0x40
				HAL_Delay(delay_time);
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f001 fa04 	bl	8003ed4 <HAL_Delay>
		for(float i=0;i>turning_time2;i+=turning_time2/100){
 8002acc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002ad0:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8002b14 <Servo_turn+0x644>
 8002ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8002ae4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002ae8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002aec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af4:	dc8d      	bgt.n	8002a12 <Servo_turn+0x542>
 8002af6:	e002      	b.n	8002afe <Servo_turn+0x62e>
		}
	}
	else{
		return 0;
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e000      	b.n	8002b00 <Servo_turn+0x630>
	}
		}


return turning_theta;
 8002afe:	68bb      	ldr	r3, [r7, #8]
}
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eeb0 0a67 	vmov.f32	s0, s15
 8002b08:	3750      	adds	r7, #80	@ 0x50
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	2000001c 	.word	0x2000001c
 8002b14:	42c80000 	.word	0x42c80000

08002b18 <Servo1_craw>:
	float init_data=Servo1_initial_data;
	float whe_w=0;
	whe_w=Servo_turn(1,init_data,turning_theta_0);
	return whe_w;
}
float Servo1_craw(float turning_theta_0){
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	ed87 0a01 	vstr	s0, [r7, #4]
		float craw_data=Servo1_craw_theta;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <Servo1_craw+0x38>)
 8002b24:	60fb      	str	r3, [r7, #12]
		float whe_w=0;
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]
		whe_w=Servo_turn(1,craw_data,turning_theta_0);
 8002b2c:	edd7 0a01 	vldr	s1, [r7, #4]
 8002b30:	ed97 0a03 	vldr	s0, [r7, #12]
 8002b34:	2001      	movs	r0, #1
 8002b36:	f7ff fccb 	bl	80024d0 <Servo_turn>
 8002b3a:	ed87 0a02 	vstr	s0, [r7, #8]
		return whe_w;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	ee07 3a90 	vmov	s15, r3
}
 8002b44:	eeb0 0a67 	vmov.f32	s0, s15
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	41200000 	.word	0x41200000

08002b54 <Servo1_put>:
float Servo1_put(float turning_theta_0){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	ed87 0a01 	vstr	s0, [r7, #4]
			float put_data=Servo1_put_down_theta;
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <Servo1_put+0x38>)
 8002b60:	60fb      	str	r3, [r7, #12]
			float whe_w=0;
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
			whe_w=Servo_turn(1,put_data,turning_theta_0);
 8002b68:	edd7 0a01 	vldr	s1, [r7, #4]
 8002b6c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002b70:	2001      	movs	r0, #1
 8002b72:	f7ff fcad 	bl	80024d0 <Servo_turn>
 8002b76:	ed87 0a02 	vstr	s0, [r7, #8]
			return whe_w;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	ee07 3a90 	vmov	s15, r3
}
 8002b80:	eeb0 0a67 	vmov.f32	s0, s15
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	42700000 	.word	0x42700000

08002b90 <Servo2_driving>:
		float init_data=Servo2_initial_data;
		float whe_w=0;
		whe_w=Servo_turn(2,init_data,turning_theta_0);
		return whe_w;
}
float Servo2_driving(float turning_theta_0){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	ed87 0a01 	vstr	s0, [r7, #4]
			float drive_data=Servo2_driving_theta;
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <Servo2_driving+0x38>)
 8002b9c:	60fb      	str	r3, [r7, #12]
			float whe_w=0;
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
			whe_w=Servo_turn(2,drive_data,turning_theta_0);
 8002ba4:	edd7 0a01 	vldr	s1, [r7, #4]
 8002ba8:	ed97 0a03 	vldr	s0, [r7, #12]
 8002bac:	2002      	movs	r0, #2
 8002bae:	f7ff fc8f 	bl	80024d0 <Servo_turn>
 8002bb2:	ed87 0a02 	vstr	s0, [r7, #8]
			return whe_w;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	ee07 3a90 	vmov	s15, r3
}
 8002bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	41f00000 	.word	0x41f00000

08002bcc <Servo2_puting>:
float Servo2_puting(float turning_theta_0){
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	ed87 0a01 	vstr	s0, [r7, #4]
			float put_data=Servo2_puting_theta;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <Servo2_puting+0x38>)
 8002bd8:	60fb      	str	r3, [r7, #12]
			float whe_w=0;
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
			whe_w=Servo_turn(2,put_data,turning_theta_0);
 8002be0:	edd7 0a01 	vldr	s1, [r7, #4]
 8002be4:	ed97 0a03 	vldr	s0, [r7, #12]
 8002be8:	2002      	movs	r0, #2
 8002bea:	f7ff fc71 	bl	80024d0 <Servo_turn>
 8002bee:	ed87 0a02 	vstr	s0, [r7, #8]
			return whe_w;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	ee07 3a90 	vmov	s15, r3
}
 8002bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	43020000 	.word	0x43020000

08002c08 <craw_up_trail>:
			float put_data=Servo3_puting_theta;
			float whe_w=0;
			whe_w=Servo_turn(3,put_data,turning_theta_0);
			return whe_w;
}
float craw_up_trail(int if_crow){
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	if(if_crow==1){
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d12a      	bne.n	8002c6c <craw_up_trail+0x64>

		float turning_theta_crow_1_S2=Servo2_initial_data;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <craw_up_trail+0x78>)
 8002c18:	60fb      	str	r3, [r7, #12]
		turning_theta_crow_1_S2=Servo_turn(2,60,25);
 8002c1a:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8002c1e:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8002c84 <craw_up_trail+0x7c>
 8002c22:	2002      	movs	r0, #2
 8002c24:	f7ff fc54 	bl	80024d0 <Servo_turn>
 8002c28:	ed87 0a03 	vstr	s0, [r7, #12]
		float turning_theta_crow_1_S1=Servo1_initial_data;
 8002c2c:	4b16      	ldr	r3, [pc, #88]	@ (8002c88 <craw_up_trail+0x80>)
 8002c2e:	60bb      	str	r3, [r7, #8]
		turning_theta_crow_1_S1=Servo1_put(turning_theta_crow_1_S1);
 8002c30:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c34:	f7ff ff8e 	bl	8002b54 <Servo1_put>
 8002c38:	ed87 0a02 	vstr	s0, [r7, #8]
		turning_theta_crow_1_S2=Servo2_puting(turning_theta_crow_1_S2);
 8002c3c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c40:	f7ff ffc4 	bl	8002bcc <Servo2_puting>
 8002c44:	ed87 0a03 	vstr	s0, [r7, #12]
		turning_theta_crow_1_S1=Servo1_craw(turning_theta_crow_1_S1);
 8002c48:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c4c:	f7ff ff64 	bl	8002b18 <Servo1_craw>
 8002c50:	ed87 0a02 	vstr	s0, [r7, #8]
		turning_theta_crow_1_S2=Servo2_driving(turning_theta_crow_1_S2);
 8002c54:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c58:	f7ff ff9a 	bl	8002b90 <Servo2_driving>
 8002c5c:	ed87 0a03 	vstr	s0, [r7, #12]
		craw_state=0;
 8002c60:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <craw_up_trail+0x84>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
		return 1;
 8002c66:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002c6a:	e001      	b.n	8002c70 <craw_up_trail+0x68>
	}
	else return 0;
 8002c6c:	f04f 0300 	mov.w	r3, #0
}
 8002c70:	ee07 3a90 	vmov	s15, r3
 8002c74:	eeb0 0a67 	vmov.f32	s0, s15
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	41f00000 	.word	0x41f00000
 8002c84:	42700000 	.word	0x42700000
 8002c88:	41700000 	.word	0x41700000
 8002c8c:	20000384 	.word	0x20000384

08002c90 <put_down_trail>:
float put_down_trail(int if_put){
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

	if(if_put==1){
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d12a      	bne.n	8002cf4 <put_down_trail+0x64>

			float turning_theta_crow_1_S2=Servo2_driving_theta;
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d08 <put_down_trail+0x78>)
 8002ca0:	60fb      	str	r3, [r7, #12]
			float turning_theta_crow_1_S1=Servo1_craw_theta;
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d0c <put_down_trail+0x7c>)
 8002ca4:	60bb      	str	r3, [r7, #8]
			turning_theta_crow_1_S2=Servo2_puting(turning_theta_crow_1_S2);
 8002ca6:	ed97 0a03 	vldr	s0, [r7, #12]
 8002caa:	f7ff ff8f 	bl	8002bcc <Servo2_puting>
 8002cae:	ed87 0a03 	vstr	s0, [r7, #12]
			turning_theta_crow_1_S1=Servo1_put(turning_theta_crow_1_S1);
 8002cb2:	ed97 0a02 	vldr	s0, [r7, #8]
 8002cb6:	f7ff ff4d 	bl	8002b54 <Servo1_put>
 8002cba:	ed87 0a02 	vstr	s0, [r7, #8]
			turning_theta_crow_1_S2=Servo_turn(2,60,turning_theta_crow_1_S2);
 8002cbe:	edd7 0a03 	vldr	s1, [r7, #12]
 8002cc2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002d10 <put_down_trail+0x80>
 8002cc6:	2002      	movs	r0, #2
 8002cc8:	f7ff fc02 	bl	80024d0 <Servo_turn>
 8002ccc:	ed87 0a03 	vstr	s0, [r7, #12]
			turning_theta_crow_1_S1=Servo1_craw(turning_theta_crow_1_S1);
 8002cd0:	ed97 0a02 	vldr	s0, [r7, #8]
 8002cd4:	f7ff ff20 	bl	8002b18 <Servo1_craw>
 8002cd8:	ed87 0a02 	vstr	s0, [r7, #8]
			turning_theta_crow_1_S2=Servo2_driving(turning_theta_crow_1_S2);
 8002cdc:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ce0:	f7ff ff56 	bl	8002b90 <Servo2_driving>
 8002ce4:	ed87 0a03 	vstr	s0, [r7, #12]
			craw_state=0;
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <put_down_trail+0x84>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
			return 1;
 8002cee:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002cf2:	e001      	b.n	8002cf8 <put_down_trail+0x68>
		}
		else return 0;
 8002cf4:	f04f 0300 	mov.w	r3, #0
}
 8002cf8:	ee07 3a90 	vmov	s15, r3
 8002cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	41f00000 	.word	0x41f00000
 8002d0c:	41200000 	.word	0x41200000
 8002d10:	42700000 	.word	0x42700000
 8002d14:	20000384 	.word	0x20000384

08002d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	607b      	str	r3, [r7, #4]
 8002d22:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <HAL_MspInit+0x4c>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	4a0f      	ldr	r2, [pc, #60]	@ (8002d64 <HAL_MspInit+0x4c>)
 8002d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d64 <HAL_MspInit+0x4c>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d36:	607b      	str	r3, [r7, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <HAL_MspInit+0x4c>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	4a08      	ldr	r2, [pc, #32]	@ (8002d64 <HAL_MspInit+0x4c>)
 8002d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_MspInit+0x4c>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800

08002d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <NMI_Handler+0x4>

08002d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <HardFault_Handler+0x4>

08002d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <MemManage_Handler+0x4>

08002d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d84:	bf00      	nop
 8002d86:	e7fd      	b.n	8002d84 <BusFault_Handler+0x4>

08002d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d8c:	bf00      	nop
 8002d8e:	e7fd      	b.n	8002d8c <UsageFault_Handler+0x4>

08002d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dbe:	f001 f869 	bl	8003e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002dcc:	4802      	ldr	r0, [pc, #8]	@ (8002dd8 <DMA1_Stream0_IRQHandler+0x10>)
 8002dce:	f001 fb4f 	bl	8004470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200007c0 	.word	0x200007c0

08002ddc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002de0:	4802      	ldr	r0, [pc, #8]	@ (8002dec <DMA1_Stream2_IRQHandler+0x10>)
 8002de2:	f001 fb45 	bl	8004470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000700 	.word	0x20000700

08002df0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002df4:	4802      	ldr	r0, [pc, #8]	@ (8002e00 <DMA1_Stream4_IRQHandler+0x10>)
 8002df6:	f001 fb3b 	bl	8004470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000760 	.word	0x20000760

08002e04 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002e08:	4803      	ldr	r0, [pc, #12]	@ (8002e18 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002e0a:	f002 ff3f 	bl	8005c8c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002e0e:	4803      	ldr	r0, [pc, #12]	@ (8002e1c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002e10:	f002 ff3c 	bl	8005c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000590 	.word	0x20000590
 8002e1c:	20000620 	.word	0x20000620

08002e20 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8002e24:	4802      	ldr	r0, [pc, #8]	@ (8002e30 <DMA1_Stream7_IRQHandler+0x10>)
 8002e26:	f001 fb23 	bl	8004470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000820 	.word	0x20000820

08002e34 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002e38:	4802      	ldr	r0, [pc, #8]	@ (8002e44 <UART4_IRQHandler+0x10>)
 8002e3a:	f003 fee5 	bl	8006c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000670 	.word	0x20000670

08002e48 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002e4c:	4802      	ldr	r0, [pc, #8]	@ (8002e58 <UART5_IRQHandler+0x10>)
 8002e4e:	f003 fedb 	bl	8006c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200006b8 	.word	0x200006b8

08002e5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e60:	4802      	ldr	r0, [pc, #8]	@ (8002e6c <TIM7_IRQHandler+0x10>)
 8002e62:	f002 ff13 	bl	8005c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000548 	.word	0x20000548

08002e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <SystemInit+0x20>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7a:	4a05      	ldr	r2, [pc, #20]	@ (8002e90 <SystemInit+0x20>)
 8002e7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b096      	sub	sp, #88	@ 0x58
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e9a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
 8002ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
 8002ec0:	611a      	str	r2, [r3, #16]
 8002ec2:	615a      	str	r2, [r3, #20]
 8002ec4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	2220      	movs	r2, #32
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f005 f941 	bl	8008154 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8003000 <MX_TIM1_Init+0x16c>)
 8002ed6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002ed8:	4b48      	ldr	r3, [pc, #288]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002eda:	2247      	movs	r2, #71	@ 0x47
 8002edc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ede:	4b47      	ldr	r3, [pc, #284]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8002ee4:	4b45      	ldr	r3, [pc, #276]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002ee6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002eea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eec:	4b43      	ldr	r3, [pc, #268]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ef2:	4b42      	ldr	r3, [pc, #264]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ef8:	4b40      	ldr	r3, [pc, #256]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002efa:	2280      	movs	r2, #128	@ 0x80
 8002efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002efe:	483f      	ldr	r0, [pc, #252]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002f00:	f002 fb46 	bl	8005590 <HAL_TIM_Base_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002f0a:	f7fe ffe7 	bl	8001edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f12:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f14:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4838      	ldr	r0, [pc, #224]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002f1c:	f003 f868 	bl	8005ff0 <HAL_TIM_ConfigClockSource>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002f26:	f7fe ffd9 	bl	8001edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f2a:	4834      	ldr	r0, [pc, #208]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002f2c:	f002 fc58 	bl	80057e0 <HAL_TIM_PWM_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002f36:	f7fe ffd1 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f42:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f46:	4619      	mov	r1, r3
 8002f48:	482c      	ldr	r0, [pc, #176]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002f4a:	f003 fc5d 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002f54:	f7fe ffc2 	bl	8001edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f58:	2360      	movs	r3, #96	@ 0x60
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f64:	2300      	movs	r3, #0
 8002f66:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f70:	2300      	movs	r3, #0
 8002f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	481f      	ldr	r0, [pc, #124]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002f7e:	f002 ff75 	bl	8005e6c <HAL_TIM_PWM_ConfigChannel>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002f88:	f7fe ffa8 	bl	8001edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f90:	2204      	movs	r2, #4
 8002f92:	4619      	mov	r1, r3
 8002f94:	4819      	ldr	r0, [pc, #100]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002f96:	f002 ff69 	bl	8005e6c <HAL_TIM_PWM_ConfigChannel>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002fa0:	f7fe ff9c 	bl	8001edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fa8:	2208      	movs	r2, #8
 8002faa:	4619      	mov	r1, r3
 8002fac:	4813      	ldr	r0, [pc, #76]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002fae:	f002 ff5d 	bl	8005e6c <HAL_TIM_PWM_ConfigChannel>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002fb8:	f7fe ff90 	bl	8001edc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4807      	ldr	r0, [pc, #28]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002fe0:	f003 fc8e 	bl	8006900 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002fea:	f7fe ff77 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002fee:	4803      	ldr	r0, [pc, #12]	@ (8002ffc <MX_TIM1_Init+0x168>)
 8002ff0:	f000 fbe8 	bl	80037c4 <HAL_TIM_MspPostInit>

}
 8002ff4:	bf00      	nop
 8002ff6:	3758      	adds	r7, #88	@ 0x58
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000398 	.word	0x20000398
 8003000:	40010000 	.word	0x40010000

08003004 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	@ 0x30
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800300a:	f107 030c 	add.w	r3, r7, #12
 800300e:	2224      	movs	r2, #36	@ 0x24
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f005 f89e 	bl	8008154 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003020:	4b21      	ldr	r3, [pc, #132]	@ (80030a8 <MX_TIM2_Init+0xa4>)
 8003022:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003026:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003028:	4b1f      	ldr	r3, [pc, #124]	@ (80030a8 <MX_TIM2_Init+0xa4>)
 800302a:	2200      	movs	r2, #0
 800302c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302e:	4b1e      	ldr	r3, [pc, #120]	@ (80030a8 <MX_TIM2_Init+0xa4>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003034:	4b1c      	ldr	r3, [pc, #112]	@ (80030a8 <MX_TIM2_Init+0xa4>)
 8003036:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800303a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303c:	4b1a      	ldr	r3, [pc, #104]	@ (80030a8 <MX_TIM2_Init+0xa4>)
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003042:	4b19      	ldr	r3, [pc, #100]	@ (80030a8 <MX_TIM2_Init+0xa4>)
 8003044:	2280      	movs	r2, #128	@ 0x80
 8003046:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003048:	2303      	movs	r3, #3
 800304a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003050:	2301      	movs	r3, #1
 8003052:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003054:	2300      	movs	r3, #0
 8003056:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800305c:	2300      	movs	r3, #0
 800305e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003060:	2301      	movs	r3, #1
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003064:	2300      	movs	r3, #0
 8003066:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800306c:	f107 030c 	add.w	r3, r7, #12
 8003070:	4619      	mov	r1, r3
 8003072:	480d      	ldr	r0, [pc, #52]	@ (80030a8 <MX_TIM2_Init+0xa4>)
 8003074:	f002 fcd6 	bl	8005a24 <HAL_TIM_Encoder_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800307e:	f7fe ff2d 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800308a:	1d3b      	adds	r3, r7, #4
 800308c:	4619      	mov	r1, r3
 800308e:	4806      	ldr	r0, [pc, #24]	@ (80030a8 <MX_TIM2_Init+0xa4>)
 8003090:	f003 fbba 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800309a:	f7fe ff1f 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800309e:	bf00      	nop
 80030a0:	3730      	adds	r7, #48	@ 0x30
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200003e0 	.word	0x200003e0

080030ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030b2:	f107 0308 	add.w	r3, r7, #8
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030c0:	463b      	mov	r3, r7
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <MX_TIM3_Init+0x94>)
 80030ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003144 <MX_TIM3_Init+0x98>)
 80030cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80030ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003140 <MX_TIM3_Init+0x94>)
 80030d0:	2247      	movs	r2, #71	@ 0x47
 80030d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003140 <MX_TIM3_Init+0x94>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80030da:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <MX_TIM3_Init+0x94>)
 80030dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e2:	4b17      	ldr	r3, [pc, #92]	@ (8003140 <MX_TIM3_Init+0x94>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030e8:	4b15      	ldr	r3, [pc, #84]	@ (8003140 <MX_TIM3_Init+0x94>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030ee:	4814      	ldr	r0, [pc, #80]	@ (8003140 <MX_TIM3_Init+0x94>)
 80030f0:	f002 fa4e 	bl	8005590 <HAL_TIM_Base_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80030fa:	f7fe feef 	bl	8001edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003102:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003104:	f107 0308 	add.w	r3, r7, #8
 8003108:	4619      	mov	r1, r3
 800310a:	480d      	ldr	r0, [pc, #52]	@ (8003140 <MX_TIM3_Init+0x94>)
 800310c:	f002 ff70 	bl	8005ff0 <HAL_TIM_ConfigClockSource>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003116:	f7fe fee1 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003122:	463b      	mov	r3, r7
 8003124:	4619      	mov	r1, r3
 8003126:	4806      	ldr	r0, [pc, #24]	@ (8003140 <MX_TIM3_Init+0x94>)
 8003128:	f003 fb6e 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003132:	f7fe fed3 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003136:	bf00      	nop
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000428 	.word	0x20000428
 8003144:	40000400 	.word	0x40000400

08003148 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	@ 0x30
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800314e:	f107 030c 	add.w	r3, r7, #12
 8003152:	2224      	movs	r2, #36	@ 0x24
 8003154:	2100      	movs	r1, #0
 8003156:	4618      	mov	r0, r3
 8003158:	f004 fffc 	bl	8008154 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800315c:	1d3b      	adds	r3, r7, #4
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003164:	4b20      	ldr	r3, [pc, #128]	@ (80031e8 <MX_TIM4_Init+0xa0>)
 8003166:	4a21      	ldr	r2, [pc, #132]	@ (80031ec <MX_TIM4_Init+0xa4>)
 8003168:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800316a:	4b1f      	ldr	r3, [pc, #124]	@ (80031e8 <MX_TIM4_Init+0xa0>)
 800316c:	2200      	movs	r2, #0
 800316e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003170:	4b1d      	ldr	r3, [pc, #116]	@ (80031e8 <MX_TIM4_Init+0xa0>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003176:	4b1c      	ldr	r3, [pc, #112]	@ (80031e8 <MX_TIM4_Init+0xa0>)
 8003178:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800317c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800317e:	4b1a      	ldr	r3, [pc, #104]	@ (80031e8 <MX_TIM4_Init+0xa0>)
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003184:	4b18      	ldr	r3, [pc, #96]	@ (80031e8 <MX_TIM4_Init+0xa0>)
 8003186:	2280      	movs	r2, #128	@ 0x80
 8003188:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800318a:	2303      	movs	r3, #3
 800318c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003192:	2301      	movs	r3, #1
 8003194:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80031a2:	2301      	movs	r3, #1
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80031a6:	2300      	movs	r3, #0
 80031a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80031ae:	f107 030c 	add.w	r3, r7, #12
 80031b2:	4619      	mov	r1, r3
 80031b4:	480c      	ldr	r0, [pc, #48]	@ (80031e8 <MX_TIM4_Init+0xa0>)
 80031b6:	f002 fc35 	bl	8005a24 <HAL_TIM_Encoder_Init>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80031c0:	f7fe fe8c 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c4:	2300      	movs	r3, #0
 80031c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031cc:	1d3b      	adds	r3, r7, #4
 80031ce:	4619      	mov	r1, r3
 80031d0:	4805      	ldr	r0, [pc, #20]	@ (80031e8 <MX_TIM4_Init+0xa0>)
 80031d2:	f003 fb19 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80031dc:	f7fe fe7e 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80031e0:	bf00      	nop
 80031e2:	3730      	adds	r7, #48	@ 0x30
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000470 	.word	0x20000470
 80031ec:	40000800 	.word	0x40000800

080031f0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08e      	sub	sp, #56	@ 0x38
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003204:	f107 0320 	add.w	r3, r7, #32
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
 800321c:	615a      	str	r2, [r3, #20]
 800321e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003220:	4b32      	ldr	r3, [pc, #200]	@ (80032ec <MX_TIM5_Init+0xfc>)
 8003222:	4a33      	ldr	r2, [pc, #204]	@ (80032f0 <MX_TIM5_Init+0x100>)
 8003224:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003226:	4b31      	ldr	r3, [pc, #196]	@ (80032ec <MX_TIM5_Init+0xfc>)
 8003228:	2200      	movs	r2, #0
 800322a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800322c:	4b2f      	ldr	r3, [pc, #188]	@ (80032ec <MX_TIM5_Init+0xfc>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 720-1;
 8003232:	4b2e      	ldr	r3, [pc, #184]	@ (80032ec <MX_TIM5_Init+0xfc>)
 8003234:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8003238:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800323a:	4b2c      	ldr	r3, [pc, #176]	@ (80032ec <MX_TIM5_Init+0xfc>)
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003240:	4b2a      	ldr	r3, [pc, #168]	@ (80032ec <MX_TIM5_Init+0xfc>)
 8003242:	2280      	movs	r2, #128	@ 0x80
 8003244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003246:	4829      	ldr	r0, [pc, #164]	@ (80032ec <MX_TIM5_Init+0xfc>)
 8003248:	f002 f9a2 	bl	8005590 <HAL_TIM_Base_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8003252:	f7fe fe43 	bl	8001edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800325a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800325c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003260:	4619      	mov	r1, r3
 8003262:	4822      	ldr	r0, [pc, #136]	@ (80032ec <MX_TIM5_Init+0xfc>)
 8003264:	f002 fec4 	bl	8005ff0 <HAL_TIM_ConfigClockSource>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800326e:	f7fe fe35 	bl	8001edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003272:	481e      	ldr	r0, [pc, #120]	@ (80032ec <MX_TIM5_Init+0xfc>)
 8003274:	f002 fab4 	bl	80057e0 <HAL_TIM_PWM_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800327e:	f7fe fe2d 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800328a:	f107 0320 	add.w	r3, r7, #32
 800328e:	4619      	mov	r1, r3
 8003290:	4816      	ldr	r0, [pc, #88]	@ (80032ec <MX_TIM5_Init+0xfc>)
 8003292:	f003 fab9 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800329c:	f7fe fe1e 	bl	8001edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032a0:	2360      	movs	r3, #96	@ 0x60
 80032a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	2208      	movs	r2, #8
 80032b4:	4619      	mov	r1, r3
 80032b6:	480d      	ldr	r0, [pc, #52]	@ (80032ec <MX_TIM5_Init+0xfc>)
 80032b8:	f002 fdd8 	bl	8005e6c <HAL_TIM_PWM_ConfigChannel>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80032c2:	f7fe fe0b 	bl	8001edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	220c      	movs	r2, #12
 80032ca:	4619      	mov	r1, r3
 80032cc:	4807      	ldr	r0, [pc, #28]	@ (80032ec <MX_TIM5_Init+0xfc>)
 80032ce:	f002 fdcd 	bl	8005e6c <HAL_TIM_PWM_ConfigChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80032d8:	f7fe fe00 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80032dc:	4803      	ldr	r0, [pc, #12]	@ (80032ec <MX_TIM5_Init+0xfc>)
 80032de:	f000 fa71 	bl	80037c4 <HAL_TIM_MspPostInit>

}
 80032e2:	bf00      	nop
 80032e4:	3738      	adds	r7, #56	@ 0x38
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200004b8 	.word	0x200004b8
 80032f0:	40000c00 	.word	0x40000c00

080032f4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032fa:	463b      	mov	r3, r7
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003302:	4b15      	ldr	r3, [pc, #84]	@ (8003358 <MX_TIM6_Init+0x64>)
 8003304:	4a15      	ldr	r2, [pc, #84]	@ (800335c <MX_TIM6_Init+0x68>)
 8003306:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 8003308:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <MX_TIM6_Init+0x64>)
 800330a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800330e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003310:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <MX_TIM6_Init+0x64>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003316:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <MX_TIM6_Init+0x64>)
 8003318:	f242 720f 	movw	r2, #9999	@ 0x270f
 800331c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800331e:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <MX_TIM6_Init+0x64>)
 8003320:	2280      	movs	r2, #128	@ 0x80
 8003322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003324:	480c      	ldr	r0, [pc, #48]	@ (8003358 <MX_TIM6_Init+0x64>)
 8003326:	f002 f933 	bl	8005590 <HAL_TIM_Base_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003330:	f7fe fdd4 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800333c:	463b      	mov	r3, r7
 800333e:	4619      	mov	r1, r3
 8003340:	4805      	ldr	r0, [pc, #20]	@ (8003358 <MX_TIM6_Init+0x64>)
 8003342:	f003 fa61 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800334c:	f7fe fdc6 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000500 	.word	0x20000500
 800335c:	40001000 	.word	0x40001000

08003360 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003366:	463b      	mov	r3, r7
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800336e:	4b15      	ldr	r3, [pc, #84]	@ (80033c4 <MX_TIM7_Init+0x64>)
 8003370:	4a15      	ldr	r2, [pc, #84]	@ (80033c8 <MX_TIM7_Init+0x68>)
 8003372:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200-1;
 8003374:	4b13      	ldr	r3, [pc, #76]	@ (80033c4 <MX_TIM7_Init+0x64>)
 8003376:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800337a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800337c:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <MX_TIM7_Init+0x64>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500-1;
 8003382:	4b10      	ldr	r3, [pc, #64]	@ (80033c4 <MX_TIM7_Init+0x64>)
 8003384:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8003388:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800338a:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <MX_TIM7_Init+0x64>)
 800338c:	2280      	movs	r2, #128	@ 0x80
 800338e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003390:	480c      	ldr	r0, [pc, #48]	@ (80033c4 <MX_TIM7_Init+0x64>)
 8003392:	f002 f8fd 	bl	8005590 <HAL_TIM_Base_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800339c:	f7fe fd9e 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a0:	2300      	movs	r3, #0
 80033a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80033a8:	463b      	mov	r3, r7
 80033aa:	4619      	mov	r1, r3
 80033ac:	4805      	ldr	r0, [pc, #20]	@ (80033c4 <MX_TIM7_Init+0x64>)
 80033ae:	f003 fa2b 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80033b8:	f7fe fd90 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	20000548 	.word	0x20000548
 80033c8:	40001400 	.word	0x40001400

080033cc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033d2:	f107 0308 	add.w	r3, r7, #8
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e0:	463b      	mov	r3, r7
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80033e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003464 <MX_TIM8_Init+0x98>)
 80033ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003468 <MX_TIM8_Init+0x9c>)
 80033ec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80033ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <MX_TIM8_Init+0x98>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003464 <MX_TIM8_Init+0x98>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 720-1;
 80033fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <MX_TIM8_Init+0x98>)
 80033fc:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8003400:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003402:	4b18      	ldr	r3, [pc, #96]	@ (8003464 <MX_TIM8_Init+0x98>)
 8003404:	2200      	movs	r2, #0
 8003406:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003408:	4b16      	ldr	r3, [pc, #88]	@ (8003464 <MX_TIM8_Init+0x98>)
 800340a:	2200      	movs	r2, #0
 800340c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800340e:	4b15      	ldr	r3, [pc, #84]	@ (8003464 <MX_TIM8_Init+0x98>)
 8003410:	2280      	movs	r2, #128	@ 0x80
 8003412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003414:	4813      	ldr	r0, [pc, #76]	@ (8003464 <MX_TIM8_Init+0x98>)
 8003416:	f002 f8bb 	bl	8005590 <HAL_TIM_Base_Init>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8003420:	f7fe fd5c 	bl	8001edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003428:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800342a:	f107 0308 	add.w	r3, r7, #8
 800342e:	4619      	mov	r1, r3
 8003430:	480c      	ldr	r0, [pc, #48]	@ (8003464 <MX_TIM8_Init+0x98>)
 8003432:	f002 fddd 	bl	8005ff0 <HAL_TIM_ConfigClockSource>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800343c:	f7fe fd4e 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003440:	2300      	movs	r3, #0
 8003442:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003444:	2300      	movs	r3, #0
 8003446:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003448:	463b      	mov	r3, r7
 800344a:	4619      	mov	r1, r3
 800344c:	4805      	ldr	r0, [pc, #20]	@ (8003464 <MX_TIM8_Init+0x98>)
 800344e:	f003 f9db 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8003458:	f7fe fd40 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800345c:	bf00      	nop
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000590 	.word	0x20000590
 8003468:	40010400 	.word	0x40010400

0800346c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003470:	4b0e      	ldr	r3, [pc, #56]	@ (80034ac <MX_TIM10_Init+0x40>)
 8003472:	4a0f      	ldr	r2, [pc, #60]	@ (80034b0 <MX_TIM10_Init+0x44>)
 8003474:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 8003476:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <MX_TIM10_Init+0x40>)
 8003478:	2247      	movs	r2, #71	@ 0x47
 800347a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800347c:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <MX_TIM10_Init+0x40>)
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003482:	4b0a      	ldr	r3, [pc, #40]	@ (80034ac <MX_TIM10_Init+0x40>)
 8003484:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003488:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348a:	4b08      	ldr	r3, [pc, #32]	@ (80034ac <MX_TIM10_Init+0x40>)
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003490:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <MX_TIM10_Init+0x40>)
 8003492:	2200      	movs	r2, #0
 8003494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003496:	4805      	ldr	r0, [pc, #20]	@ (80034ac <MX_TIM10_Init+0x40>)
 8003498:	f002 f87a 	bl	8005590 <HAL_TIM_Base_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80034a2:	f7fe fd1b 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200005d8 	.word	0x200005d8
 80034b0:	40014400 	.word	0x40014400

080034b4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ba:	463b      	mov	r3, r7
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80034c6:	4b16      	ldr	r3, [pc, #88]	@ (8003520 <MX_TIM12_Init+0x6c>)
 80034c8:	4a16      	ldr	r2, [pc, #88]	@ (8003524 <MX_TIM12_Init+0x70>)
 80034ca:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 7200-1;
 80034cc:	4b14      	ldr	r3, [pc, #80]	@ (8003520 <MX_TIM12_Init+0x6c>)
 80034ce:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80034d2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d4:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <MX_TIM12_Init+0x6c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 80034da:	4b11      	ldr	r3, [pc, #68]	@ (8003520 <MX_TIM12_Init+0x6c>)
 80034dc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80034e0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003520 <MX_TIM12_Init+0x6c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003520 <MX_TIM12_Init+0x6c>)
 80034ea:	2280      	movs	r2, #128	@ 0x80
 80034ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80034ee:	480c      	ldr	r0, [pc, #48]	@ (8003520 <MX_TIM12_Init+0x6c>)
 80034f0:	f002 f84e 	bl	8005590 <HAL_TIM_Base_Init>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 80034fa:	f7fe fcef 	bl	8001edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003502:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003504:	463b      	mov	r3, r7
 8003506:	4619      	mov	r1, r3
 8003508:	4805      	ldr	r0, [pc, #20]	@ (8003520 <MX_TIM12_Init+0x6c>)
 800350a:	f002 fd71 	bl	8005ff0 <HAL_TIM_ConfigClockSource>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8003514:	f7fe fce2 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20000620 	.word	0x20000620
 8003524:	40001800 	.word	0x40001800

08003528 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	@ 0x28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a5c      	ldr	r2, [pc, #368]	@ (80036a8 <HAL_TIM_Base_MspInit+0x180>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10e      	bne.n	8003558 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
 800353e:	4b5b      	ldr	r3, [pc, #364]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003542:	4a5a      	ldr	r2, [pc, #360]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6453      	str	r3, [r2, #68]	@ 0x44
 800354a:	4b58      	ldr	r3, [pc, #352]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	627b      	str	r3, [r7, #36]	@ 0x24
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003556:	e0a2      	b.n	800369e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM3)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a54      	ldr	r2, [pc, #336]	@ (80036b0 <HAL_TIM_Base_MspInit+0x188>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d10e      	bne.n	8003580 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	623b      	str	r3, [r7, #32]
 8003566:	4b51      	ldr	r3, [pc, #324]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	4a50      	ldr	r2, [pc, #320]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	6413      	str	r3, [r2, #64]	@ 0x40
 8003572:	4b4e      	ldr	r3, [pc, #312]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	623b      	str	r3, [r7, #32]
 800357c:	6a3b      	ldr	r3, [r7, #32]
}
 800357e:	e08e      	b.n	800369e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM5)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a4b      	ldr	r2, [pc, #300]	@ (80036b4 <HAL_TIM_Base_MspInit+0x18c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10e      	bne.n	80035a8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	4b47      	ldr	r3, [pc, #284]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	4a46      	ldr	r2, [pc, #280]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 8003594:	f043 0308 	orr.w	r3, r3, #8
 8003598:	6413      	str	r3, [r2, #64]	@ 0x40
 800359a:	4b44      	ldr	r3, [pc, #272]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	69fb      	ldr	r3, [r7, #28]
}
 80035a6:	e07a      	b.n	800369e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM6)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a42      	ldr	r2, [pc, #264]	@ (80036b8 <HAL_TIM_Base_MspInit+0x190>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d10e      	bne.n	80035d0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	4b3d      	ldr	r3, [pc, #244]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	4a3c      	ldr	r2, [pc, #240]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 80035bc:	f043 0310 	orr.w	r3, r3, #16
 80035c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035c2:	4b3a      	ldr	r3, [pc, #232]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	69bb      	ldr	r3, [r7, #24]
}
 80035ce:	e066      	b.n	800369e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM7)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a39      	ldr	r2, [pc, #228]	@ (80036bc <HAL_TIM_Base_MspInit+0x194>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d116      	bne.n	8003608 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	4b33      	ldr	r3, [pc, #204]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	4a32      	ldr	r2, [pc, #200]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 80035e4:	f043 0320 	orr.w	r3, r3, #32
 80035e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ea:	4b30      	ldr	r3, [pc, #192]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80035f6:	2200      	movs	r2, #0
 80035f8:	2102      	movs	r1, #2
 80035fa:	2037      	movs	r0, #55	@ 0x37
 80035fc:	f000 fd69 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003600:	2037      	movs	r0, #55	@ 0x37
 8003602:	f000 fd82 	bl	800410a <HAL_NVIC_EnableIRQ>
}
 8003606:	e04a      	b.n	800369e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2c      	ldr	r2, [pc, #176]	@ (80036c0 <HAL_TIM_Base_MspInit+0x198>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d116      	bne.n	8003640 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	4b25      	ldr	r3, [pc, #148]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	4a24      	ldr	r2, [pc, #144]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	6453      	str	r3, [r2, #68]	@ 0x44
 8003622:	4b22      	ldr	r3, [pc, #136]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 3, 0);
 800362e:	2200      	movs	r2, #0
 8003630:	2103      	movs	r1, #3
 8003632:	202b      	movs	r0, #43	@ 0x2b
 8003634:	f000 fd4d 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003638:	202b      	movs	r0, #43	@ 0x2b
 800363a:	f000 fd66 	bl	800410a <HAL_NVIC_EnableIRQ>
}
 800363e:	e02e      	b.n	800369e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM10)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1f      	ldr	r2, [pc, #124]	@ (80036c4 <HAL_TIM_Base_MspInit+0x19c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10e      	bne.n	8003668 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003652:	4a16      	ldr	r2, [pc, #88]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 8003654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003658:	6453      	str	r3, [r2, #68]	@ 0x44
 800365a:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
}
 8003666:	e01a      	b.n	800369e <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM12)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a16      	ldr	r2, [pc, #88]	@ (80036c8 <HAL_TIM_Base_MspInit+0x1a0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d115      	bne.n	800369e <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	4b0d      	ldr	r3, [pc, #52]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	4a0c      	ldr	r2, [pc, #48]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 800367c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003680:	6413      	str	r3, [r2, #64]	@ 0x40
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <HAL_TIM_Base_MspInit+0x184>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 3, 0);
 800368e:	2200      	movs	r2, #0
 8003690:	2103      	movs	r1, #3
 8003692:	202b      	movs	r0, #43	@ 0x2b
 8003694:	f000 fd1d 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003698:	202b      	movs	r0, #43	@ 0x2b
 800369a:	f000 fd36 	bl	800410a <HAL_NVIC_EnableIRQ>
}
 800369e:	bf00      	nop
 80036a0:	3728      	adds	r7, #40	@ 0x28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40001000 	.word	0x40001000
 80036bc:	40001400 	.word	0x40001400
 80036c0:	40010400 	.word	0x40010400
 80036c4:	40014400 	.word	0x40014400
 80036c8:	40001800 	.word	0x40001800

080036cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	@ 0x30
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d4:	f107 031c 	add.w	r3, r7, #28
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ec:	d12c      	bne.n	8003748 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	4b30      	ldr	r3, [pc, #192]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	4a2f      	ldr	r2, [pc, #188]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036fe:	4b2d      	ldr	r3, [pc, #180]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	4b29      	ldr	r3, [pc, #164]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	4a28      	ldr	r2, [pc, #160]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6313      	str	r3, [r2, #48]	@ 0x30
 800371a:	4b26      	ldr	r3, [pc, #152]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8003726:	2322      	movs	r3, #34	@ 0x22
 8003728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372a:	2302      	movs	r3, #2
 800372c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	2300      	movs	r3, #0
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003732:	2300      	movs	r3, #0
 8003734:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003736:	2301      	movs	r3, #1
 8003738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373a:	f107 031c 	add.w	r3, r7, #28
 800373e:	4619      	mov	r1, r3
 8003740:	481d      	ldr	r0, [pc, #116]	@ (80037b8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003742:	f001 f8ff 	bl	8004944 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003746:	e031      	b.n	80037ac <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1b      	ldr	r2, [pc, #108]	@ (80037bc <HAL_TIM_Encoder_MspInit+0xf0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d12c      	bne.n	80037ac <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	4b17      	ldr	r3, [pc, #92]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	4a16      	ldr	r2, [pc, #88]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800375c:	f043 0304 	orr.w	r3, r3, #4
 8003760:	6413      	str	r3, [r2, #64]	@ 0x40
 8003762:	4b14      	ldr	r3, [pc, #80]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4b10      	ldr	r3, [pc, #64]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	4a0f      	ldr	r2, [pc, #60]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003778:	f043 0308 	orr.w	r3, r3, #8
 800377c:	6313      	str	r3, [r2, #48]	@ 0x30
 800377e:	4b0d      	ldr	r3, [pc, #52]	@ (80037b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800378a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800378e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003798:	2300      	movs	r3, #0
 800379a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800379c:	2302      	movs	r3, #2
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037a0:	f107 031c 	add.w	r3, r7, #28
 80037a4:	4619      	mov	r1, r3
 80037a6:	4806      	ldr	r0, [pc, #24]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xf4>)
 80037a8:	f001 f8cc 	bl	8004944 <HAL_GPIO_Init>
}
 80037ac:	bf00      	nop
 80037ae:	3730      	adds	r7, #48	@ 0x30
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40020000 	.word	0x40020000
 80037bc:	40000800 	.word	0x40000800
 80037c0:	40020c00 	.word	0x40020c00

080037c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	@ 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0314 	add.w	r3, r7, #20
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a24      	ldr	r2, [pc, #144]	@ (8003874 <HAL_TIM_MspPostInit+0xb0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d11f      	bne.n	8003826 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	4b23      	ldr	r3, [pc, #140]	@ (8003878 <HAL_TIM_MspPostInit+0xb4>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	4a22      	ldr	r2, [pc, #136]	@ (8003878 <HAL_TIM_MspPostInit+0xb4>)
 80037f0:	f043 0310 	orr.w	r3, r3, #16
 80037f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f6:	4b20      	ldr	r3, [pc, #128]	@ (8003878 <HAL_TIM_MspPostInit+0xb4>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8003802:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8003806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003810:	2300      	movs	r3, #0
 8003812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003814:	2301      	movs	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	4619      	mov	r1, r3
 800381e:	4817      	ldr	r0, [pc, #92]	@ (800387c <HAL_TIM_MspPostInit+0xb8>)
 8003820:	f001 f890 	bl	8004944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003824:	e022      	b.n	800386c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a15      	ldr	r2, [pc, #84]	@ (8003880 <HAL_TIM_MspPostInit+0xbc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d11d      	bne.n	800386c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <HAL_TIM_MspPostInit+0xb4>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003838:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <HAL_TIM_MspPostInit+0xb4>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003840:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <HAL_TIM_MspPostInit+0xb4>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800384c:	230c      	movs	r3, #12
 800384e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003850:	2302      	movs	r3, #2
 8003852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003858:	2300      	movs	r3, #0
 800385a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800385c:	2302      	movs	r3, #2
 800385e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	4619      	mov	r1, r3
 8003866:	4807      	ldr	r0, [pc, #28]	@ (8003884 <HAL_TIM_MspPostInit+0xc0>)
 8003868:	f001 f86c 	bl	8004944 <HAL_GPIO_Init>
}
 800386c:	bf00      	nop
 800386e:	3728      	adds	r7, #40	@ 0x28
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40010000 	.word	0x40010000
 8003878:	40023800 	.word	0x40023800
 800387c:	40021000 	.word	0x40021000
 8003880:	40000c00 	.word	0x40000c00
 8003884:	40020000 	.word	0x40020000

08003888 <timersInit>:
 *
 *  Created on: Jul 21, 2024
 *      Author: 25138
 */
#include "timersInit.h"
void timersInit(){
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800388c:	2108      	movs	r1, #8
 800388e:	4813      	ldr	r0, [pc, #76]	@ (80038dc <timersInit+0x54>)
 8003890:	f002 f800 	bl	8005894 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);//开启电机PWM，最值255
 8003894:	210c      	movs	r1, #12
 8003896:	4811      	ldr	r0, [pc, #68]	@ (80038dc <timersInit+0x54>)
 8003898:	f001 fffc 	bl	8005894 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800389c:	2100      	movs	r1, #0
 800389e:	4810      	ldr	r0, [pc, #64]	@ (80038e0 <timersInit+0x58>)
 80038a0:	f001 fff8 	bl	8005894 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80038a4:	2104      	movs	r1, #4
 80038a6:	480e      	ldr	r0, [pc, #56]	@ (80038e0 <timersInit+0x58>)
 80038a8:	f001 fff4 	bl	8005894 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);//开启舵机PWM，最值1999
 80038ac:	2108      	movs	r1, #8
 80038ae:	480c      	ldr	r0, [pc, #48]	@ (80038e0 <timersInit+0x58>)
 80038b0:	f001 fff0 	bl	8005894 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);//左轮编码器
 80038b4:	213c      	movs	r1, #60	@ 0x3c
 80038b6:	480b      	ldr	r0, [pc, #44]	@ (80038e4 <timersInit+0x5c>)
 80038b8:	f002 f95a 	bl	8005b70 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);//右轮编码器
 80038bc:	213c      	movs	r1, #60	@ 0x3c
 80038be:	480a      	ldr	r0, [pc, #40]	@ (80038e8 <timersInit+0x60>)
 80038c0:	f002 f956 	bl	8005b70 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim7);//中断定时器，50ms一次中断
 80038c4:	4809      	ldr	r0, [pc, #36]	@ (80038ec <timersInit+0x64>)
 80038c6:	f001 ff1b 	bl	8005700 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim12);
 80038ca:	4809      	ldr	r0, [pc, #36]	@ (80038f0 <timersInit+0x68>)
 80038cc:	f001 ff18 	bl	8005700 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim10);
 80038d0:	4808      	ldr	r0, [pc, #32]	@ (80038f4 <timersInit+0x6c>)
 80038d2:	f001 fead 	bl	8005630 <HAL_TIM_Base_Start>

}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	200004b8 	.word	0x200004b8
 80038e0:	20000398 	.word	0x20000398
 80038e4:	200003e0 	.word	0x200003e0
 80038e8:	20000470 	.word	0x20000470
 80038ec:	20000548 	.word	0x20000548
 80038f0:	20000620 	.word	0x20000620
 80038f4:	200005d8 	.word	0x200005d8

080038f8 <MeasureDistance>:
ultraSonic ultraSonicRight={trigRight_GPIO_Port,trigRight_Pin,echoRight_GPIO_Port,echoRight_Pin};
uint16_t distanceLeft=0;
uint16_t distanceRight=0;
uint16_t distanceFront=0;
// 函数定义
uint16_t MeasureDistance(ultraSonic* ultraSonicInst) {
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b08b      	sub	sp, #44	@ 0x2c
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
    uint32_t pMillis;
    uint32_t Value1 = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t Value2 = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	623b      	str	r3, [r7, #32]
    uint16_t Distance;
    	GPIO_TypeDef* TRIG_PORT=ultraSonicInst->Trig_PORT;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	61fb      	str	r3, [r7, #28]
    	uint16_t TRIG_PIN=ultraSonicInst->Trig_PIN;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	889b      	ldrh	r3, [r3, #4]
 8003912:	837b      	strh	r3, [r7, #26]
    	GPIO_TypeDef* ECHO_PORT=ultraSonicInst->Echo_PORT;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	617b      	str	r3, [r7, #20]
    	uint16_t ECHO_PIN=ultraSonicInst->Echo_PIN;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	899b      	ldrh	r3, [r3, #12]
 800391e:	827b      	strh	r3, [r7, #18]
	// 启动定时器
    //HAL_TIM_Base_Start(&htim10);
    //__HAL_TIM_SET_COUNTER(&TIMER,0);
    // 拉高触发引脚
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8003920:	8b7b      	ldrh	r3, [r7, #26]
 8003922:	2201      	movs	r2, #1
 8003924:	4619      	mov	r1, r3
 8003926:	69f8      	ldr	r0, [r7, #28]
 8003928:	f001 f9c0 	bl	8004cac <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COUNTER(&htim10, 0);
 800392c:	4b32      	ldr	r3, [pc, #200]	@ (80039f8 <MeasureDistance+0x100>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2200      	movs	r2, #0
 8003932:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim10) < 10);  // 等待10微秒
 8003934:	bf00      	nop
 8003936:	4b30      	ldr	r3, [pc, #192]	@ (80039f8 <MeasureDistance+0x100>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	2b09      	cmp	r3, #9
 800393e:	d9fa      	bls.n	8003936 <MeasureDistance+0x3e>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8003940:	8b7b      	ldrh	r3, [r7, #26]
 8003942:	2200      	movs	r2, #0
 8003944:	4619      	mov	r1, r3
 8003946:	69f8      	ldr	r0, [r7, #28]
 8003948:	f001 f9b0 	bl	8004cac <HAL_GPIO_WritePin>

    // 避免无限循环
    pMillis = HAL_GetTick();
 800394c:	f000 fab6 	bl	8003ebc <HAL_GetTick>
 8003950:	60f8      	str	r0, [r7, #12]
    while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + 10 > HAL_GetTick());
 8003952:	bf00      	nop
 8003954:	8a7b      	ldrh	r3, [r7, #18]
 8003956:	4619      	mov	r1, r3
 8003958:	6978      	ldr	r0, [r7, #20]
 800395a:	f001 f98f 	bl	8004c7c <HAL_GPIO_ReadPin>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d107      	bne.n	8003974 <MeasureDistance+0x7c>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f103 040a 	add.w	r4, r3, #10
 800396a:	f000 faa7 	bl	8003ebc <HAL_GetTick>
 800396e:	4603      	mov	r3, r0
 8003970:	429c      	cmp	r4, r3
 8003972:	d8ef      	bhi.n	8003954 <MeasureDistance+0x5c>
    Value1 = __HAL_TIM_GET_COUNTER(&htim10);
 8003974:	4b20      	ldr	r3, [pc, #128]	@ (80039f8 <MeasureDistance+0x100>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24

    pMillis = HAL_GetTick();
 800397c:	f000 fa9e 	bl	8003ebc <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]
    while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8003982:	bf00      	nop
 8003984:	8a7b      	ldrh	r3, [r7, #18]
 8003986:	4619      	mov	r1, r3
 8003988:	6978      	ldr	r0, [r7, #20]
 800398a:	f001 f977 	bl	8004c7c <HAL_GPIO_ReadPin>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <MeasureDistance+0xac>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 800399a:	f000 fa8f 	bl	8003ebc <HAL_GetTick>
 800399e:	4603      	mov	r3, r0
 80039a0:	429c      	cmp	r4, r3
 80039a2:	d8ef      	bhi.n	8003984 <MeasureDistance+0x8c>
    Value2 = __HAL_TIM_GET_COUNTER(&htim10);
 80039a4:	4b14      	ldr	r3, [pc, #80]	@ (80039f8 <MeasureDistance+0x100>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	623b      	str	r3, [r7, #32]

    // 计算距离
    Distance = (Value2 - Value1) * 0.34 / 2;
 80039ac:	6a3a      	ldr	r2, [r7, #32]
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fc fd4a 	bl	800044c <__aeabi_ui2d>
 80039b8:	a30d      	add	r3, pc, #52	@ (adr r3, 80039f0 <MeasureDistance+0xf8>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f7fc fdbf 	bl	8000540 <__aeabi_dmul>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4610      	mov	r0, r2
 80039c8:	4619      	mov	r1, r3
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80039d2:	f7fc fedf 	bl	8000794 <__aeabi_ddiv>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4610      	mov	r0, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	f7fd f85f 	bl	8000aa0 <__aeabi_d2uiz>
 80039e2:	4603      	mov	r3, r0
 80039e4:	817b      	strh	r3, [r7, #10]
   // HAL_TIM_Base_Stop(&htim10);
    return Distance;
 80039e6:	897b      	ldrh	r3, [r7, #10]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	372c      	adds	r7, #44	@ 0x2c
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd90      	pop	{r4, r7, pc}
 80039f0:	5c28f5c3 	.word	0x5c28f5c3
 80039f4:	3fd5c28f 	.word	0x3fd5c28f
 80039f8:	200005d8 	.word	0x200005d8

080039fc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <MX_UART4_Init+0x4c>)
 8003a02:	4a12      	ldr	r2, [pc, #72]	@ (8003a4c <MX_UART4_Init+0x50>)
 8003a04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 8003a06:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <MX_UART4_Init+0x4c>)
 8003a08:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003a0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a48 <MX_UART4_Init+0x4c>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <MX_UART4_Init+0x4c>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <MX_UART4_Init+0x4c>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003a20:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <MX_UART4_Init+0x4c>)
 8003a22:	220c      	movs	r2, #12
 8003a24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a26:	4b08      	ldr	r3, [pc, #32]	@ (8003a48 <MX_UART4_Init+0x4c>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <MX_UART4_Init+0x4c>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003a32:	4805      	ldr	r0, [pc, #20]	@ (8003a48 <MX_UART4_Init+0x4c>)
 8003a34:	f002 ffca 	bl	80069cc <HAL_UART_Init>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003a3e:	f7fe fa4d 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000670 	.word	0x20000670
 8003a4c:	40004c00 	.word	0x40004c00

08003a50 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003a54:	4b11      	ldr	r3, [pc, #68]	@ (8003a9c <MX_UART5_Init+0x4c>)
 8003a56:	4a12      	ldr	r2, [pc, #72]	@ (8003aa0 <MX_UART5_Init+0x50>)
 8003a58:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8003a5a:	4b10      	ldr	r3, [pc, #64]	@ (8003a9c <MX_UART5_Init+0x4c>)
 8003a5c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8003a60:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003a62:	4b0e      	ldr	r3, [pc, #56]	@ (8003a9c <MX_UART5_Init+0x4c>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003a68:	4b0c      	ldr	r3, [pc, #48]	@ (8003a9c <MX_UART5_Init+0x4c>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <MX_UART5_Init+0x4c>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003a74:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <MX_UART5_Init+0x4c>)
 8003a76:	220c      	movs	r2, #12
 8003a78:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a7a:	4b08      	ldr	r3, [pc, #32]	@ (8003a9c <MX_UART5_Init+0x4c>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a80:	4b06      	ldr	r3, [pc, #24]	@ (8003a9c <MX_UART5_Init+0x4c>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003a86:	4805      	ldr	r0, [pc, #20]	@ (8003a9c <MX_UART5_Init+0x4c>)
 8003a88:	f002 ffa0 	bl	80069cc <HAL_UART_Init>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003a92:	f7fe fa23 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200006b8 	.word	0x200006b8
 8003aa0:	40005000 	.word	0x40005000

08003aa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08c      	sub	sp, #48	@ 0x30
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aac:	f107 031c 	add.w	r3, r7, #28
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a4a      	ldr	r2, [pc, #296]	@ (8003bec <HAL_UART_MspInit+0x148>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	f040 80a0 	bne.w	8003c08 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	4b48      	ldr	r3, [pc, #288]	@ (8003bf0 <HAL_UART_MspInit+0x14c>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	4a47      	ldr	r2, [pc, #284]	@ (8003bf0 <HAL_UART_MspInit+0x14c>)
 8003ad2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ad6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ad8:	4b45      	ldr	r3, [pc, #276]	@ (8003bf0 <HAL_UART_MspInit+0x14c>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	4b41      	ldr	r3, [pc, #260]	@ (8003bf0 <HAL_UART_MspInit+0x14c>)
 8003aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aec:	4a40      	ldr	r2, [pc, #256]	@ (8003bf0 <HAL_UART_MspInit+0x14c>)
 8003aee:	f043 0304 	orr.w	r3, r3, #4
 8003af2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af4:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf0 <HAL_UART_MspInit+0x14c>)
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b00:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b06:	2302      	movs	r3, #2
 8003b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b12:	2308      	movs	r3, #8
 8003b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b16:	f107 031c 	add.w	r3, r7, #28
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4835      	ldr	r0, [pc, #212]	@ (8003bf4 <HAL_UART_MspInit+0x150>)
 8003b1e:	f000 ff11 	bl	8004944 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003b22:	4b35      	ldr	r3, [pc, #212]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b24:	4a35      	ldr	r2, [pc, #212]	@ (8003bfc <HAL_UART_MspInit+0x158>)
 8003b26:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003b28:	4b33      	ldr	r3, [pc, #204]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003b2e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b30:	4b31      	ldr	r3, [pc, #196]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b36:	4b30      	ldr	r3, [pc, #192]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b42:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b44:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003b50:	4b29      	ldr	r3, [pc, #164]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b56:	4b28      	ldr	r3, [pc, #160]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b5c:	4b26      	ldr	r3, [pc, #152]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003b62:	4825      	ldr	r0, [pc, #148]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b64:	f000 faec 	bl	8004140 <HAL_DMA_Init>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003b6e:	f7fe f9b5 	bl	8001edc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a20      	ldr	r2, [pc, #128]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b78:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <HAL_UART_MspInit+0x154>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003b7e:	4b20      	ldr	r3, [pc, #128]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003b80:	4a20      	ldr	r2, [pc, #128]	@ (8003c04 <HAL_UART_MspInit+0x160>)
 8003b82:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8003b84:	4b1e      	ldr	r3, [pc, #120]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003b86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003b8a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003b8e:	2240      	movs	r2, #64	@ 0x40
 8003b90:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b92:	4b1b      	ldr	r3, [pc, #108]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b98:	4b19      	ldr	r3, [pc, #100]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003b9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b9e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ba0:	4b17      	ldr	r3, [pc, #92]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ba6:	4b16      	ldr	r3, [pc, #88]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003bac:	4b14      	ldr	r3, [pc, #80]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bb2:	4b13      	ldr	r3, [pc, #76]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bb8:	4b11      	ldr	r3, [pc, #68]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003bbe:	4810      	ldr	r0, [pc, #64]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003bc0:	f000 fabe 	bl	8004140 <HAL_DMA_Init>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003bca:	f7fe f987 	bl	8001edc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003bd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003c00 <HAL_UART_MspInit+0x15c>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2101      	movs	r1, #1
 8003bde:	2034      	movs	r0, #52	@ 0x34
 8003be0:	f000 fa77 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003be4:	2034      	movs	r0, #52	@ 0x34
 8003be6:	f000 fa90 	bl	800410a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8003bea:	e0c2      	b.n	8003d72 <HAL_UART_MspInit+0x2ce>
 8003bec:	40004c00 	.word	0x40004c00
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40020800 	.word	0x40020800
 8003bf8:	20000700 	.word	0x20000700
 8003bfc:	40026040 	.word	0x40026040
 8003c00:	20000760 	.word	0x20000760
 8003c04:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a5b      	ldr	r2, [pc, #364]	@ (8003d7c <HAL_UART_MspInit+0x2d8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	f040 80af 	bne.w	8003d72 <HAL_UART_MspInit+0x2ce>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	4b59      	ldr	r3, [pc, #356]	@ (8003d80 <HAL_UART_MspInit+0x2dc>)
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	4a58      	ldr	r2, [pc, #352]	@ (8003d80 <HAL_UART_MspInit+0x2dc>)
 8003c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c22:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c24:	4b56      	ldr	r3, [pc, #344]	@ (8003d80 <HAL_UART_MspInit+0x2dc>)
 8003c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	4b52      	ldr	r3, [pc, #328]	@ (8003d80 <HAL_UART_MspInit+0x2dc>)
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	4a51      	ldr	r2, [pc, #324]	@ (8003d80 <HAL_UART_MspInit+0x2dc>)
 8003c3a:	f043 0304 	orr.w	r3, r3, #4
 8003c3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c40:	4b4f      	ldr	r3, [pc, #316]	@ (8003d80 <HAL_UART_MspInit+0x2dc>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	4b4b      	ldr	r3, [pc, #300]	@ (8003d80 <HAL_UART_MspInit+0x2dc>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	4a4a      	ldr	r2, [pc, #296]	@ (8003d80 <HAL_UART_MspInit+0x2dc>)
 8003c56:	f043 0308 	orr.w	r3, r3, #8
 8003c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c5c:	4b48      	ldr	r3, [pc, #288]	@ (8003d80 <HAL_UART_MspInit+0x2dc>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c76:	2303      	movs	r3, #3
 8003c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c7e:	f107 031c 	add.w	r3, r7, #28
 8003c82:	4619      	mov	r1, r3
 8003c84:	483f      	ldr	r0, [pc, #252]	@ (8003d84 <HAL_UART_MspInit+0x2e0>)
 8003c86:	f000 fe5d 	bl	8004944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c8a:	2304      	movs	r3, #4
 8003c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c96:	2303      	movs	r3, #3
 8003c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c9e:	f107 031c 	add.w	r3, r7, #28
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4838      	ldr	r0, [pc, #224]	@ (8003d88 <HAL_UART_MspInit+0x2e4>)
 8003ca6:	f000 fe4d 	bl	8004944 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003caa:	4b38      	ldr	r3, [pc, #224]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003cac:	4a38      	ldr	r2, [pc, #224]	@ (8003d90 <HAL_UART_MspInit+0x2ec>)
 8003cae:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003cb0:	4b36      	ldr	r3, [pc, #216]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003cb2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003cb6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cb8:	4b34      	ldr	r3, [pc, #208]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cbe:	4b33      	ldr	r3, [pc, #204]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cc4:	4b31      	ldr	r3, [pc, #196]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003cc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cca:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cde:	4b2b      	ldr	r3, [pc, #172]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ce4:	4b29      	ldr	r3, [pc, #164]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003cea:	4828      	ldr	r0, [pc, #160]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003cec:	f000 fa28 	bl	8004140 <HAL_DMA_Init>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_UART_MspInit+0x256>
      Error_Handler();
 8003cf6:	f7fe f8f1 	bl	8001edc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a23      	ldr	r2, [pc, #140]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003cfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d00:	4a22      	ldr	r2, [pc, #136]	@ (8003d8c <HAL_UART_MspInit+0x2e8>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8003d06:	4b23      	ldr	r3, [pc, #140]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d08:	4a23      	ldr	r2, [pc, #140]	@ (8003d98 <HAL_UART_MspInit+0x2f4>)
 8003d0a:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8003d0c:	4b21      	ldr	r3, [pc, #132]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003d12:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d14:	4b1f      	ldr	r3, [pc, #124]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d16:	2240      	movs	r2, #64	@ 0x40
 8003d18:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d20:	4b1c      	ldr	r3, [pc, #112]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d26:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d28:	4b1a      	ldr	r3, [pc, #104]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d2e:	4b19      	ldr	r3, [pc, #100]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8003d34:	4b17      	ldr	r3, [pc, #92]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d3a:	4b16      	ldr	r3, [pc, #88]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d40:	4b14      	ldr	r3, [pc, #80]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8003d46:	4813      	ldr	r0, [pc, #76]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d48:	f000 f9fa 	bl	8004140 <HAL_DMA_Init>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8003d52:	f7fe f8c3 	bl	8001edc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a0e      	ldr	r2, [pc, #56]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d94 <HAL_UART_MspInit+0x2f0>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003d62:	2200      	movs	r2, #0
 8003d64:	2100      	movs	r1, #0
 8003d66:	2035      	movs	r0, #53	@ 0x35
 8003d68:	f000 f9b3 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003d6c:	2035      	movs	r0, #53	@ 0x35
 8003d6e:	f000 f9cc 	bl	800410a <HAL_NVIC_EnableIRQ>
}
 8003d72:	bf00      	nop
 8003d74:	3730      	adds	r7, #48	@ 0x30
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40005000 	.word	0x40005000
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40020800 	.word	0x40020800
 8003d88:	40020c00 	.word	0x40020c00
 8003d8c:	200007c0 	.word	0x200007c0
 8003d90:	40026010 	.word	0x40026010
 8003d94:	20000820 	.word	0x20000820
 8003d98:	400260b8 	.word	0x400260b8

08003d9c <Reset_Handler>:
 8003d9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003dd4 <LoopFillZerobss+0xe>
 8003da0:	f7ff f866 	bl	8002e70 <SystemInit>
 8003da4:	480c      	ldr	r0, [pc, #48]	@ (8003dd8 <LoopFillZerobss+0x12>)
 8003da6:	490d      	ldr	r1, [pc, #52]	@ (8003ddc <LoopFillZerobss+0x16>)
 8003da8:	4a0d      	ldr	r2, [pc, #52]	@ (8003de0 <LoopFillZerobss+0x1a>)
 8003daa:	2300      	movs	r3, #0
 8003dac:	e002      	b.n	8003db4 <LoopCopyDataInit>

08003dae <CopyDataInit>:
 8003dae:	58d4      	ldr	r4, [r2, r3]
 8003db0:	50c4      	str	r4, [r0, r3]
 8003db2:	3304      	adds	r3, #4

08003db4 <LoopCopyDataInit>:
 8003db4:	18c4      	adds	r4, r0, r3
 8003db6:	428c      	cmp	r4, r1
 8003db8:	d3f9      	bcc.n	8003dae <CopyDataInit>
 8003dba:	4a0a      	ldr	r2, [pc, #40]	@ (8003de4 <LoopFillZerobss+0x1e>)
 8003dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8003de8 <LoopFillZerobss+0x22>)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e001      	b.n	8003dc6 <LoopFillZerobss>

08003dc2 <FillZerobss>:
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	3204      	adds	r2, #4

08003dc6 <LoopFillZerobss>:
 8003dc6:	42a2      	cmp	r2, r4
 8003dc8:	d3fb      	bcc.n	8003dc2 <FillZerobss>
 8003dca:	f004 f9d1 	bl	8008170 <__libc_init_array>
 8003dce:	f7fd ff41 	bl	8001c54 <main>
 8003dd2:	4770      	bx	lr
 8003dd4:	20020000 	.word	0x20020000
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	200000b0 	.word	0x200000b0
 8003de0:	08008220 	.word	0x08008220
 8003de4:	200000b0 	.word	0x200000b0
 8003de8:	200009bc 	.word	0x200009bc

08003dec <ADC_IRQHandler>:
 8003dec:	e7fe      	b.n	8003dec <ADC_IRQHandler>
	...

08003df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003df4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e30 <HAL_Init+0x40>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a0d      	ldr	r2, [pc, #52]	@ (8003e30 <HAL_Init+0x40>)
 8003dfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <HAL_Init+0x40>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0a      	ldr	r2, [pc, #40]	@ (8003e30 <HAL_Init+0x40>)
 8003e06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e0c:	4b08      	ldr	r3, [pc, #32]	@ (8003e30 <HAL_Init+0x40>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a07      	ldr	r2, [pc, #28]	@ (8003e30 <HAL_Init+0x40>)
 8003e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e18:	2003      	movs	r0, #3
 8003e1a:	f000 f94f 	bl	80040bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e1e:	200f      	movs	r0, #15
 8003e20:	f000 f808 	bl	8003e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e24:	f7fe ff78 	bl	8002d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023c00 	.word	0x40023c00

08003e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e3c:	4b12      	ldr	r3, [pc, #72]	@ (8003e88 <HAL_InitTick+0x54>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <HAL_InitTick+0x58>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	4619      	mov	r1, r3
 8003e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f967 	bl	8004126 <HAL_SYSTICK_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e00e      	b.n	8003e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b0f      	cmp	r3, #15
 8003e66:	d80a      	bhi.n	8003e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e70:	f000 f92f 	bl	80040d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e74:	4a06      	ldr	r2, [pc, #24]	@ (8003e90 <HAL_InitTick+0x5c>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e000      	b.n	8003e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000024 	.word	0x20000024
 8003e8c:	2000005c 	.word	0x2000005c
 8003e90:	20000058 	.word	0x20000058

08003e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e98:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <HAL_IncTick+0x20>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <HAL_IncTick+0x24>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4a04      	ldr	r2, [pc, #16]	@ (8003eb8 <HAL_IncTick+0x24>)
 8003ea6:	6013      	str	r3, [r2, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	2000005c 	.word	0x2000005c
 8003eb8:	20000880 	.word	0x20000880

08003ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec0:	4b03      	ldr	r3, [pc, #12]	@ (8003ed0 <HAL_GetTick+0x14>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000880 	.word	0x20000880

08003ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003edc:	f7ff ffee 	bl	8003ebc <HAL_GetTick>
 8003ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d005      	beq.n	8003efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eee:	4b0a      	ldr	r3, [pc, #40]	@ (8003f18 <HAL_Delay+0x44>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003efa:	bf00      	nop
 8003efc:	f7ff ffde 	bl	8003ebc <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d8f7      	bhi.n	8003efc <HAL_Delay+0x28>
  {
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	2000005c 	.word	0x2000005c

08003f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <__NVIC_SetPriorityGrouping+0x44>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f4e:	4a04      	ldr	r2, [pc, #16]	@ (8003f60 <__NVIC_SetPriorityGrouping+0x44>)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	60d3      	str	r3, [r2, #12]
}
 8003f54:	bf00      	nop
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	e000ed00 	.word	0xe000ed00

08003f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f68:	4b04      	ldr	r3, [pc, #16]	@ (8003f7c <__NVIC_GetPriorityGrouping+0x18>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	0a1b      	lsrs	r3, r3, #8
 8003f6e:	f003 0307 	and.w	r3, r3, #7
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	db0b      	blt.n	8003faa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	f003 021f 	and.w	r2, r3, #31
 8003f98:	4907      	ldr	r1, [pc, #28]	@ (8003fb8 <__NVIC_EnableIRQ+0x38>)
 8003f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	e000e100 	.word	0xe000e100

08003fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	6039      	str	r1, [r7, #0]
 8003fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	db0a      	blt.n	8003fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	490c      	ldr	r1, [pc, #48]	@ (8004008 <__NVIC_SetPriority+0x4c>)
 8003fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fda:	0112      	lsls	r2, r2, #4
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	440b      	add	r3, r1
 8003fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fe4:	e00a      	b.n	8003ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	4908      	ldr	r1, [pc, #32]	@ (800400c <__NVIC_SetPriority+0x50>)
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	3b04      	subs	r3, #4
 8003ff4:	0112      	lsls	r2, r2, #4
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	761a      	strb	r2, [r3, #24]
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	e000e100 	.word	0xe000e100
 800400c:	e000ed00 	.word	0xe000ed00

08004010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004010:	b480      	push	{r7}
 8004012:	b089      	sub	sp, #36	@ 0x24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f1c3 0307 	rsb	r3, r3, #7
 800402a:	2b04      	cmp	r3, #4
 800402c:	bf28      	it	cs
 800402e:	2304      	movcs	r3, #4
 8004030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	3304      	adds	r3, #4
 8004036:	2b06      	cmp	r3, #6
 8004038:	d902      	bls.n	8004040 <NVIC_EncodePriority+0x30>
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	3b03      	subs	r3, #3
 800403e:	e000      	b.n	8004042 <NVIC_EncodePriority+0x32>
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004044:	f04f 32ff 	mov.w	r2, #4294967295
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43da      	mvns	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	401a      	ands	r2, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004058:	f04f 31ff 	mov.w	r1, #4294967295
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	fa01 f303 	lsl.w	r3, r1, r3
 8004062:	43d9      	mvns	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004068:	4313      	orrs	r3, r2
         );
}
 800406a:	4618      	mov	r0, r3
 800406c:	3724      	adds	r7, #36	@ 0x24
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3b01      	subs	r3, #1
 8004084:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004088:	d301      	bcc.n	800408e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800408a:	2301      	movs	r3, #1
 800408c:	e00f      	b.n	80040ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800408e:	4a0a      	ldr	r2, [pc, #40]	@ (80040b8 <SysTick_Config+0x40>)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3b01      	subs	r3, #1
 8004094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004096:	210f      	movs	r1, #15
 8004098:	f04f 30ff 	mov.w	r0, #4294967295
 800409c:	f7ff ff8e 	bl	8003fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <SysTick_Config+0x40>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040a6:	4b04      	ldr	r3, [pc, #16]	@ (80040b8 <SysTick_Config+0x40>)
 80040a8:	2207      	movs	r2, #7
 80040aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	e000e010 	.word	0xe000e010

080040bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ff29 	bl	8003f1c <__NVIC_SetPriorityGrouping>
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b086      	sub	sp, #24
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	4603      	mov	r3, r0
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040e4:	f7ff ff3e 	bl	8003f64 <__NVIC_GetPriorityGrouping>
 80040e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	6978      	ldr	r0, [r7, #20]
 80040f0:	f7ff ff8e 	bl	8004010 <NVIC_EncodePriority>
 80040f4:	4602      	mov	r2, r0
 80040f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff ff5d 	bl	8003fbc <__NVIC_SetPriority>
}
 8004102:	bf00      	nop
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	4603      	mov	r3, r0
 8004112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff ff31 	bl	8003f80 <__NVIC_EnableIRQ>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ffa2 	bl	8004078 <SysTick_Config>
 8004134:	4603      	mov	r3, r0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800414c:	f7ff feb6 	bl	8003ebc <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e099      	b.n	8004290 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800417c:	e00f      	b.n	800419e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800417e:	f7ff fe9d 	bl	8003ebc <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b05      	cmp	r3, #5
 800418a:	d908      	bls.n	800419e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2203      	movs	r2, #3
 8004196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e078      	b.n	8004290 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e8      	bne.n	800417e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4b38      	ldr	r3, [pc, #224]	@ (8004298 <HAL_DMA_Init+0x158>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d107      	bne.n	8004208 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004200:	4313      	orrs	r3, r2
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0307 	bic.w	r3, r3, #7
 800421e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	2b04      	cmp	r3, #4
 8004230:	d117      	bne.n	8004262 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00e      	beq.n	8004262 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fb01 	bl	800484c <DMA_CheckFifoParam>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2240      	movs	r2, #64	@ 0x40
 8004254:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800425e:	2301      	movs	r3, #1
 8004260:	e016      	b.n	8004290 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fab8 	bl	80047e0 <DMA_CalcBaseAndBitshift>
 8004270:	4603      	mov	r3, r0
 8004272:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004278:	223f      	movs	r2, #63	@ 0x3f
 800427a:	409a      	lsls	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	f010803f 	.word	0xf010803f

0800429c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_DMA_Start_IT+0x26>
 80042be:	2302      	movs	r3, #2
 80042c0:	e040      	b.n	8004344 <HAL_DMA_Start_IT+0xa8>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d12f      	bne.n	8004336 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2202      	movs	r2, #2
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fa4a 	bl	8004784 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f4:	223f      	movs	r2, #63	@ 0x3f
 80042f6:	409a      	lsls	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0216 	orr.w	r2, r2, #22
 800430a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0208 	orr.w	r2, r2, #8
 8004322:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	e005      	b.n	8004342 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800433e:	2302      	movs	r3, #2
 8004340:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004342:	7dfb      	ldrb	r3, [r7, #23]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004358:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800435a:	f7ff fdaf 	bl	8003ebc <HAL_GetTick>
 800435e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d008      	beq.n	800437e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2280      	movs	r2, #128	@ 0x80
 8004370:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e052      	b.n	8004424 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0216 	bic.w	r2, r2, #22
 800438c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800439c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <HAL_DMA_Abort+0x62>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0208 	bic.w	r2, r2, #8
 80043bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ce:	e013      	b.n	80043f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043d0:	f7ff fd74 	bl	8003ebc <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b05      	cmp	r3, #5
 80043dc:	d90c      	bls.n	80043f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2203      	movs	r2, #3
 80043e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e015      	b.n	8004424 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e4      	bne.n	80043d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440a:	223f      	movs	r2, #63	@ 0x3f
 800440c:	409a      	lsls	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d004      	beq.n	800444a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2280      	movs	r2, #128	@ 0x80
 8004444:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e00c      	b.n	8004464 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2205      	movs	r2, #5
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0201 	bic.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800447c:	4b8e      	ldr	r3, [pc, #568]	@ (80046b8 <HAL_DMA_IRQHandler+0x248>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a8e      	ldr	r2, [pc, #568]	@ (80046bc <HAL_DMA_IRQHandler+0x24c>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	0a9b      	lsrs	r3, r3, #10
 8004488:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449a:	2208      	movs	r2, #8
 800449c:	409a      	lsls	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01a      	beq.n	80044dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d013      	beq.n	80044dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0204 	bic.w	r2, r2, #4
 80044c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c8:	2208      	movs	r2, #8
 80044ca:	409a      	lsls	r2, r3
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d4:	f043 0201 	orr.w	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e0:	2201      	movs	r2, #1
 80044e2:	409a      	lsls	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d012      	beq.n	8004512 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00b      	beq.n	8004512 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fe:	2201      	movs	r2, #1
 8004500:	409a      	lsls	r2, r3
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450a:	f043 0202 	orr.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004516:	2204      	movs	r2, #4
 8004518:	409a      	lsls	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4013      	ands	r3, r2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d012      	beq.n	8004548 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004534:	2204      	movs	r2, #4
 8004536:	409a      	lsls	r2, r3
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004540:	f043 0204 	orr.w	r2, r3, #4
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454c:	2210      	movs	r2, #16
 800454e:	409a      	lsls	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d043      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d03c      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456a:	2210      	movs	r2, #16
 800456c:	409a      	lsls	r2, r3
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d018      	beq.n	80045b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d108      	bne.n	80045a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d024      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	4798      	blx	r3
 800459e:	e01f      	b.n	80045e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01b      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	4798      	blx	r3
 80045b0:	e016      	b.n	80045e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d107      	bne.n	80045d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0208 	bic.w	r2, r2, #8
 80045ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e4:	2220      	movs	r2, #32
 80045e6:	409a      	lsls	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 808f 	beq.w	8004710 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8087 	beq.w	8004710 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004606:	2220      	movs	r2, #32
 8004608:	409a      	lsls	r2, r3
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b05      	cmp	r3, #5
 8004618:	d136      	bne.n	8004688 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0216 	bic.w	r2, r2, #22
 8004628:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695a      	ldr	r2, [r3, #20]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004638:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d103      	bne.n	800464a <HAL_DMA_IRQHandler+0x1da>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0208 	bic.w	r2, r2, #8
 8004658:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465e:	223f      	movs	r2, #63	@ 0x3f
 8004660:	409a      	lsls	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800467a:	2b00      	cmp	r3, #0
 800467c:	d07e      	beq.n	800477c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
        }
        return;
 8004686:	e079      	b.n	800477c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01d      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10d      	bne.n	80046c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d031      	beq.n	8004710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
 80046b4:	e02c      	b.n	8004710 <HAL_DMA_IRQHandler+0x2a0>
 80046b6:	bf00      	nop
 80046b8:	20000024 	.word	0x20000024
 80046bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d023      	beq.n	8004710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
 80046d0:	e01e      	b.n	8004710 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10f      	bne.n	8004700 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0210 	bic.w	r2, r2, #16
 80046ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004714:	2b00      	cmp	r3, #0
 8004716:	d032      	beq.n	800477e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d022      	beq.n	800476a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2205      	movs	r2, #5
 8004728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	3301      	adds	r3, #1
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	429a      	cmp	r2, r3
 8004746:	d307      	bcc.n	8004758 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f2      	bne.n	800473c <HAL_DMA_IRQHandler+0x2cc>
 8004756:	e000      	b.n	800475a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004758:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
 800477a:	e000      	b.n	800477e <HAL_DMA_IRQHandler+0x30e>
        return;
 800477c:	bf00      	nop
    }
  }
}
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b40      	cmp	r3, #64	@ 0x40
 80047b0:	d108      	bne.n	80047c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047c2:	e007      	b.n	80047d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	60da      	str	r2, [r3, #12]
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	3b10      	subs	r3, #16
 80047f0:	4a14      	ldr	r2, [pc, #80]	@ (8004844 <DMA_CalcBaseAndBitshift+0x64>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047fa:	4a13      	ldr	r2, [pc, #76]	@ (8004848 <DMA_CalcBaseAndBitshift+0x68>)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d909      	bls.n	8004822 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	1d1a      	adds	r2, r3, #4
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004820:	e007      	b.n	8004832 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800482a:	f023 0303 	bic.w	r3, r3, #3
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	aaaaaaab 	.word	0xaaaaaaab
 8004848:	080081f8 	.word	0x080081f8

0800484c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d11f      	bne.n	80048a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d856      	bhi.n	800491a <DMA_CheckFifoParam+0xce>
 800486c:	a201      	add	r2, pc, #4	@ (adr r2, 8004874 <DMA_CheckFifoParam+0x28>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004885 	.word	0x08004885
 8004878:	08004897 	.word	0x08004897
 800487c:	08004885 	.word	0x08004885
 8004880:	0800491b 	.word	0x0800491b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004888:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d046      	beq.n	800491e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004894:	e043      	b.n	800491e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800489e:	d140      	bne.n	8004922 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a4:	e03d      	b.n	8004922 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ae:	d121      	bne.n	80048f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d837      	bhi.n	8004926 <DMA_CheckFifoParam+0xda>
 80048b6:	a201      	add	r2, pc, #4	@ (adr r2, 80048bc <DMA_CheckFifoParam+0x70>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048d3 	.word	0x080048d3
 80048c4:	080048cd 	.word	0x080048cd
 80048c8:	080048e5 	.word	0x080048e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
      break;
 80048d0:	e030      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d025      	beq.n	800492a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e2:	e022      	b.n	800492a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048ec:	d11f      	bne.n	800492e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048f2:	e01c      	b.n	800492e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d903      	bls.n	8004902 <DMA_CheckFifoParam+0xb6>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d003      	beq.n	8004908 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004900:	e018      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
      break;
 8004906:	e015      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00e      	beq.n	8004932 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      break;
 8004918:	e00b      	b.n	8004932 <DMA_CheckFifoParam+0xe6>
      break;
 800491a:	bf00      	nop
 800491c:	e00a      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      break;
 800491e:	bf00      	nop
 8004920:	e008      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      break;
 8004922:	bf00      	nop
 8004924:	e006      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      break;
 8004926:	bf00      	nop
 8004928:	e004      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      break;
 800492a:	bf00      	nop
 800492c:	e002      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      break;   
 800492e:	bf00      	nop
 8004930:	e000      	b.n	8004934 <DMA_CheckFifoParam+0xe8>
      break;
 8004932:	bf00      	nop
    }
  } 
  
  return status; 
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop

08004944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004944:	b480      	push	{r7}
 8004946:	b089      	sub	sp, #36	@ 0x24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004956:	2300      	movs	r3, #0
 8004958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	e16b      	b.n	8004c38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004960:	2201      	movs	r2, #1
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4013      	ands	r3, r2
 8004972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	429a      	cmp	r2, r3
 800497a:	f040 815a 	bne.w	8004c32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b01      	cmp	r3, #1
 8004988:	d005      	beq.n	8004996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004992:	2b02      	cmp	r3, #2
 8004994:	d130      	bne.n	80049f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	2203      	movs	r2, #3
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4013      	ands	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049cc:	2201      	movs	r2, #1
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 0201 	and.w	r2, r3, #1
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d017      	beq.n	8004a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	2203      	movs	r2, #3
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d123      	bne.n	8004a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	08da      	lsrs	r2, r3, #3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3208      	adds	r2, #8
 8004a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	220f      	movs	r2, #15
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4013      	ands	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	08da      	lsrs	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3208      	adds	r2, #8
 8004a82:	69b9      	ldr	r1, [r7, #24]
 8004a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	2203      	movs	r2, #3
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 0203 	and.w	r2, r3, #3
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80b4 	beq.w	8004c32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	4b60      	ldr	r3, [pc, #384]	@ (8004c50 <HAL_GPIO_Init+0x30c>)
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad2:	4a5f      	ldr	r2, [pc, #380]	@ (8004c50 <HAL_GPIO_Init+0x30c>)
 8004ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ada:	4b5d      	ldr	r3, [pc, #372]	@ (8004c50 <HAL_GPIO_Init+0x30c>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ae6:	4a5b      	ldr	r2, [pc, #364]	@ (8004c54 <HAL_GPIO_Init+0x310>)
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	089b      	lsrs	r3, r3, #2
 8004aec:	3302      	adds	r3, #2
 8004aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	220f      	movs	r2, #15
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4013      	ands	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a52      	ldr	r2, [pc, #328]	@ (8004c58 <HAL_GPIO_Init+0x314>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d02b      	beq.n	8004b6a <HAL_GPIO_Init+0x226>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a51      	ldr	r2, [pc, #324]	@ (8004c5c <HAL_GPIO_Init+0x318>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d025      	beq.n	8004b66 <HAL_GPIO_Init+0x222>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a50      	ldr	r2, [pc, #320]	@ (8004c60 <HAL_GPIO_Init+0x31c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01f      	beq.n	8004b62 <HAL_GPIO_Init+0x21e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a4f      	ldr	r2, [pc, #316]	@ (8004c64 <HAL_GPIO_Init+0x320>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d019      	beq.n	8004b5e <HAL_GPIO_Init+0x21a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8004c68 <HAL_GPIO_Init+0x324>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <HAL_GPIO_Init+0x216>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a4d      	ldr	r2, [pc, #308]	@ (8004c6c <HAL_GPIO_Init+0x328>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00d      	beq.n	8004b56 <HAL_GPIO_Init+0x212>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a4c      	ldr	r2, [pc, #304]	@ (8004c70 <HAL_GPIO_Init+0x32c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <HAL_GPIO_Init+0x20e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a4b      	ldr	r2, [pc, #300]	@ (8004c74 <HAL_GPIO_Init+0x330>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d101      	bne.n	8004b4e <HAL_GPIO_Init+0x20a>
 8004b4a:	2307      	movs	r3, #7
 8004b4c:	e00e      	b.n	8004b6c <HAL_GPIO_Init+0x228>
 8004b4e:	2308      	movs	r3, #8
 8004b50:	e00c      	b.n	8004b6c <HAL_GPIO_Init+0x228>
 8004b52:	2306      	movs	r3, #6
 8004b54:	e00a      	b.n	8004b6c <HAL_GPIO_Init+0x228>
 8004b56:	2305      	movs	r3, #5
 8004b58:	e008      	b.n	8004b6c <HAL_GPIO_Init+0x228>
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	e006      	b.n	8004b6c <HAL_GPIO_Init+0x228>
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e004      	b.n	8004b6c <HAL_GPIO_Init+0x228>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e002      	b.n	8004b6c <HAL_GPIO_Init+0x228>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_GPIO_Init+0x228>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	f002 0203 	and.w	r2, r2, #3
 8004b72:	0092      	lsls	r2, r2, #2
 8004b74:	4093      	lsls	r3, r2
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b7c:	4935      	ldr	r1, [pc, #212]	@ (8004c54 <HAL_GPIO_Init+0x310>)
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	3302      	adds	r3, #2
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c78 <HAL_GPIO_Init+0x334>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	43db      	mvns	r3, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4013      	ands	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bae:	4a32      	ldr	r2, [pc, #200]	@ (8004c78 <HAL_GPIO_Init+0x334>)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bb4:	4b30      	ldr	r3, [pc, #192]	@ (8004c78 <HAL_GPIO_Init+0x334>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bd8:	4a27      	ldr	r2, [pc, #156]	@ (8004c78 <HAL_GPIO_Init+0x334>)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bde:	4b26      	ldr	r3, [pc, #152]	@ (8004c78 <HAL_GPIO_Init+0x334>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	43db      	mvns	r3, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4013      	ands	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c02:	4a1d      	ldr	r2, [pc, #116]	@ (8004c78 <HAL_GPIO_Init+0x334>)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c08:	4b1b      	ldr	r3, [pc, #108]	@ (8004c78 <HAL_GPIO_Init+0x334>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c2c:	4a12      	ldr	r2, [pc, #72]	@ (8004c78 <HAL_GPIO_Init+0x334>)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3301      	adds	r3, #1
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b0f      	cmp	r3, #15
 8004c3c:	f67f ae90 	bls.w	8004960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	3724      	adds	r7, #36	@ 0x24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40013800 	.word	0x40013800
 8004c58:	40020000 	.word	0x40020000
 8004c5c:	40020400 	.word	0x40020400
 8004c60:	40020800 	.word	0x40020800
 8004c64:	40020c00 	.word	0x40020c00
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	40021400 	.word	0x40021400
 8004c70:	40021800 	.word	0x40021800
 8004c74:	40021c00 	.word	0x40021c00
 8004c78:	40013c00 	.word	0x40013c00

08004c7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	887b      	ldrh	r3, [r7, #2]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	e001      	b.n	8004c9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	807b      	strh	r3, [r7, #2]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cbc:	787b      	ldrb	r3, [r7, #1]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cc8:	e003      	b.n	8004cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	041a      	lsls	r2, r3, #16
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	619a      	str	r2, [r3, #24]
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e267      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d075      	beq.n	8004dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cfe:	4b88      	ldr	r3, [pc, #544]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d00c      	beq.n	8004d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d0a:	4b85      	ldr	r3, [pc, #532]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d112      	bne.n	8004d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d16:	4b82      	ldr	r3, [pc, #520]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d22:	d10b      	bne.n	8004d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	4b7e      	ldr	r3, [pc, #504]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d05b      	beq.n	8004de8 <HAL_RCC_OscConfig+0x108>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d157      	bne.n	8004de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e242      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d44:	d106      	bne.n	8004d54 <HAL_RCC_OscConfig+0x74>
 8004d46:	4b76      	ldr	r3, [pc, #472]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a75      	ldr	r2, [pc, #468]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e01d      	b.n	8004d90 <HAL_RCC_OscConfig+0xb0>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCC_OscConfig+0x98>
 8004d5e:	4b70      	ldr	r3, [pc, #448]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a6f      	ldr	r2, [pc, #444]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a6c      	ldr	r2, [pc, #432]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	e00b      	b.n	8004d90 <HAL_RCC_OscConfig+0xb0>
 8004d78:	4b69      	ldr	r3, [pc, #420]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a68      	ldr	r2, [pc, #416]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	4b66      	ldr	r3, [pc, #408]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a65      	ldr	r2, [pc, #404]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d98:	f7ff f890 	bl	8003ebc <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004da0:	f7ff f88c 	bl	8003ebc <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	@ 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e207      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0xc0>
 8004dbe:	e014      	b.n	8004dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7ff f87c 	bl	8003ebc <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7ff f878 	bl	8003ebc <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	@ 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e1f3      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dda:	4b51      	ldr	r3, [pc, #324]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0xe8>
 8004de6:	e000      	b.n	8004dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d063      	beq.n	8004ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004df6:	4b4a      	ldr	r3, [pc, #296]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e02:	4b47      	ldr	r3, [pc, #284]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d11c      	bne.n	8004e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e0e:	4b44      	ldr	r3, [pc, #272]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d116      	bne.n	8004e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1a:	4b41      	ldr	r3, [pc, #260]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_RCC_OscConfig+0x152>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e1c7      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e32:	4b3b      	ldr	r3, [pc, #236]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4937      	ldr	r1, [pc, #220]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e46:	e03a      	b.n	8004ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e50:	4b34      	ldr	r3, [pc, #208]	@ (8004f24 <HAL_RCC_OscConfig+0x244>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e56:	f7ff f831 	bl	8003ebc <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e5e:	f7ff f82d 	bl	8003ebc <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e1a8      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e70:	4b2b      	ldr	r3, [pc, #172]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7c:	4b28      	ldr	r3, [pc, #160]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4925      	ldr	r1, [pc, #148]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	600b      	str	r3, [r1, #0]
 8004e90:	e015      	b.n	8004ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e92:	4b24      	ldr	r3, [pc, #144]	@ (8004f24 <HAL_RCC_OscConfig+0x244>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7ff f810 	bl	8003ebc <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ea0:	f7ff f80c 	bl	8003ebc <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e187      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d036      	beq.n	8004f38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d016      	beq.n	8004f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ed2:	4b15      	ldr	r3, [pc, #84]	@ (8004f28 <HAL_RCC_OscConfig+0x248>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7fe fff0 	bl	8003ebc <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ee0:	f7fe ffec 	bl	8003ebc <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e167      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x200>
 8004efe:	e01b      	b.n	8004f38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f00:	4b09      	ldr	r3, [pc, #36]	@ (8004f28 <HAL_RCC_OscConfig+0x248>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f06:	f7fe ffd9 	bl	8003ebc <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f0c:	e00e      	b.n	8004f2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f0e:	f7fe ffd5 	bl	8003ebc <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d907      	bls.n	8004f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e150      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
 8004f20:	40023800 	.word	0x40023800
 8004f24:	42470000 	.word	0x42470000
 8004f28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f2c:	4b88      	ldr	r3, [pc, #544]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1ea      	bne.n	8004f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8097 	beq.w	8005074 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f46:	2300      	movs	r3, #0
 8004f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4a:	4b81      	ldr	r3, [pc, #516]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10f      	bne.n	8004f76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	4b7d      	ldr	r3, [pc, #500]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	4a7c      	ldr	r2, [pc, #496]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f66:	4b7a      	ldr	r3, [pc, #488]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f76:	4b77      	ldr	r3, [pc, #476]	@ (8005154 <HAL_RCC_OscConfig+0x474>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d118      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f82:	4b74      	ldr	r3, [pc, #464]	@ (8005154 <HAL_RCC_OscConfig+0x474>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a73      	ldr	r2, [pc, #460]	@ (8005154 <HAL_RCC_OscConfig+0x474>)
 8004f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f8e:	f7fe ff95 	bl	8003ebc <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f96:	f7fe ff91 	bl	8003ebc <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e10c      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8005154 <HAL_RCC_OscConfig+0x474>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d106      	bne.n	8004fca <HAL_RCC_OscConfig+0x2ea>
 8004fbc:	4b64      	ldr	r3, [pc, #400]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc0:	4a63      	ldr	r2, [pc, #396]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc8:	e01c      	b.n	8005004 <HAL_RCC_OscConfig+0x324>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b05      	cmp	r3, #5
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0x30c>
 8004fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd6:	4a5e      	ldr	r2, [pc, #376]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	f043 0304 	orr.w	r3, r3, #4
 8004fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fde:	4b5c      	ldr	r3, [pc, #368]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe2:	4a5b      	ldr	r2, [pc, #364]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fea:	e00b      	b.n	8005004 <HAL_RCC_OscConfig+0x324>
 8004fec:	4b58      	ldr	r3, [pc, #352]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff0:	4a57      	ldr	r2, [pc, #348]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ff8:	4b55      	ldr	r3, [pc, #340]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffc:	4a54      	ldr	r2, [pc, #336]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004ffe:	f023 0304 	bic.w	r3, r3, #4
 8005002:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d015      	beq.n	8005038 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fe ff56 	bl	8003ebc <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005012:	e00a      	b.n	800502a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005014:	f7fe ff52 	bl	8003ebc <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e0cb      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502a:	4b49      	ldr	r3, [pc, #292]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 800502c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0ee      	beq.n	8005014 <HAL_RCC_OscConfig+0x334>
 8005036:	e014      	b.n	8005062 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005038:	f7fe ff40 	bl	8003ebc <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800503e:	e00a      	b.n	8005056 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005040:	f7fe ff3c 	bl	8003ebc <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e0b5      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005056:	4b3e      	ldr	r3, [pc, #248]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1ee      	bne.n	8005040 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005068:	4b39      	ldr	r3, [pc, #228]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	4a38      	ldr	r2, [pc, #224]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 800506e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005072:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80a1 	beq.w	80051c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800507e:	4b34      	ldr	r3, [pc, #208]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b08      	cmp	r3, #8
 8005088:	d05c      	beq.n	8005144 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d141      	bne.n	8005116 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005092:	4b31      	ldr	r3, [pc, #196]	@ (8005158 <HAL_RCC_OscConfig+0x478>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fe ff10 	bl	8003ebc <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a0:	f7fe ff0c 	bl	8003ebc <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e087      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b2:	4b27      	ldr	r3, [pc, #156]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	019b      	lsls	r3, r3, #6
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	3b01      	subs	r3, #1
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e0:	061b      	lsls	r3, r3, #24
 80050e2:	491b      	ldr	r1, [pc, #108]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005158 <HAL_RCC_OscConfig+0x478>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fe fee5 	bl	8003ebc <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f6:	f7fe fee1 	bl	8003ebc <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e05c      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005108:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x416>
 8005114:	e054      	b.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005116:	4b10      	ldr	r3, [pc, #64]	@ (8005158 <HAL_RCC_OscConfig+0x478>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511c:	f7fe fece 	bl	8003ebc <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005124:	f7fe feca 	bl	8003ebc <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e045      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x444>
 8005142:	e03d      	b.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d107      	bne.n	800515c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e038      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
 8005150:	40023800 	.word	0x40023800
 8005154:	40007000 	.word	0x40007000
 8005158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800515c:	4b1b      	ldr	r3, [pc, #108]	@ (80051cc <HAL_RCC_OscConfig+0x4ec>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d028      	beq.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d121      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d11a      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800518c:	4013      	ands	r3, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005194:	4293      	cmp	r3, r2
 8005196:	d111      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	3b01      	subs	r3, #1
 80051a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023800 	.word	0x40023800

080051d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0cc      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051e4:	4b68      	ldr	r3, [pc, #416]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d90c      	bls.n	800520c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f2:	4b65      	ldr	r3, [pc, #404]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b63      	ldr	r3, [pc, #396]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0b8      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d020      	beq.n	800525a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005224:	4b59      	ldr	r3, [pc, #356]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	4a58      	ldr	r2, [pc, #352]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800522e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800523c:	4b53      	ldr	r3, [pc, #332]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4a52      	ldr	r2, [pc, #328]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005248:	4b50      	ldr	r3, [pc, #320]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	494d      	ldr	r1, [pc, #308]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d044      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d107      	bne.n	800527e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526e:	4b47      	ldr	r3, [pc, #284]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d119      	bne.n	80052ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e07f      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d003      	beq.n	800528e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800528a:	2b03      	cmp	r3, #3
 800528c:	d107      	bne.n	800529e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528e:	4b3f      	ldr	r3, [pc, #252]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e06f      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800529e:	4b3b      	ldr	r3, [pc, #236]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e067      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ae:	4b37      	ldr	r3, [pc, #220]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f023 0203 	bic.w	r2, r3, #3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4934      	ldr	r1, [pc, #208]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052c0:	f7fe fdfc 	bl	8003ebc <HAL_GetTick>
 80052c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c6:	e00a      	b.n	80052de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c8:	f7fe fdf8 	bl	8003ebc <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e04f      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052de:	4b2b      	ldr	r3, [pc, #172]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 020c 	and.w	r2, r3, #12
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d1eb      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052f0:	4b25      	ldr	r3, [pc, #148]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d20c      	bcs.n	8005318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fe:	4b22      	ldr	r3, [pc, #136]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b20      	ldr	r3, [pc, #128]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e032      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005324:	4b19      	ldr	r3, [pc, #100]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4916      	ldr	r1, [pc, #88]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005342:	4b12      	ldr	r3, [pc, #72]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	490e      	ldr	r1, [pc, #56]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	4313      	orrs	r3, r2
 8005354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005356:	f000 f821 	bl	800539c <HAL_RCC_GetSysClockFreq>
 800535a:	4602      	mov	r2, r0
 800535c:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	490a      	ldr	r1, [pc, #40]	@ (8005390 <HAL_RCC_ClockConfig+0x1c0>)
 8005368:	5ccb      	ldrb	r3, [r1, r3]
 800536a:	fa22 f303 	lsr.w	r3, r2, r3
 800536e:	4a09      	ldr	r2, [pc, #36]	@ (8005394 <HAL_RCC_ClockConfig+0x1c4>)
 8005370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005372:	4b09      	ldr	r3, [pc, #36]	@ (8005398 <HAL_RCC_ClockConfig+0x1c8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe fd5c 	bl	8003e34 <HAL_InitTick>

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40023c00 	.word	0x40023c00
 800538c:	40023800 	.word	0x40023800
 8005390:	080081e0 	.word	0x080081e0
 8005394:	20000024 	.word	0x20000024
 8005398:	20000058 	.word	0x20000058

0800539c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800539c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a0:	b090      	sub	sp, #64	@ 0x40
 80053a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80053a8:	2300      	movs	r3, #0
 80053aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053ac:	2300      	movs	r3, #0
 80053ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053b4:	4b59      	ldr	r3, [pc, #356]	@ (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 030c 	and.w	r3, r3, #12
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d00d      	beq.n	80053dc <HAL_RCC_GetSysClockFreq+0x40>
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	f200 80a1 	bhi.w	8005508 <HAL_RCC_GetSysClockFreq+0x16c>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0x34>
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d003      	beq.n	80053d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80053ce:	e09b      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053d0:	4b53      	ldr	r3, [pc, #332]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x184>)
 80053d2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80053d4:	e09b      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053d6:	4b53      	ldr	r3, [pc, #332]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x188>)
 80053d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053da:	e098      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053dc:	4b4f      	ldr	r3, [pc, #316]	@ (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053e6:	4b4d      	ldr	r3, [pc, #308]	@ (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d028      	beq.n	8005444 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f2:	4b4a      	ldr	r3, [pc, #296]	@ (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	099b      	lsrs	r3, r3, #6
 80053f8:	2200      	movs	r2, #0
 80053fa:	623b      	str	r3, [r7, #32]
 80053fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005404:	2100      	movs	r1, #0
 8005406:	4b47      	ldr	r3, [pc, #284]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x188>)
 8005408:	fb03 f201 	mul.w	r2, r3, r1
 800540c:	2300      	movs	r3, #0
 800540e:	fb00 f303 	mul.w	r3, r0, r3
 8005412:	4413      	add	r3, r2
 8005414:	4a43      	ldr	r2, [pc, #268]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x188>)
 8005416:	fba0 1202 	umull	r1, r2, r0, r2
 800541a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800541c:	460a      	mov	r2, r1
 800541e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005422:	4413      	add	r3, r2
 8005424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005428:	2200      	movs	r2, #0
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	61fa      	str	r2, [r7, #28]
 800542e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005432:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005436:	f7fb fb53 	bl	8000ae0 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4613      	mov	r3, r2
 8005440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005442:	e053      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005444:	4b35      	ldr	r3, [pc, #212]	@ (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	099b      	lsrs	r3, r3, #6
 800544a:	2200      	movs	r2, #0
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	617a      	str	r2, [r7, #20]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005456:	f04f 0b00 	mov.w	fp, #0
 800545a:	4652      	mov	r2, sl
 800545c:	465b      	mov	r3, fp
 800545e:	f04f 0000 	mov.w	r0, #0
 8005462:	f04f 0100 	mov.w	r1, #0
 8005466:	0159      	lsls	r1, r3, #5
 8005468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800546c:	0150      	lsls	r0, r2, #5
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	ebb2 080a 	subs.w	r8, r2, sl
 8005476:	eb63 090b 	sbc.w	r9, r3, fp
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005486:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800548a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800548e:	ebb2 0408 	subs.w	r4, r2, r8
 8005492:	eb63 0509 	sbc.w	r5, r3, r9
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	00eb      	lsls	r3, r5, #3
 80054a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054a4:	00e2      	lsls	r2, r4, #3
 80054a6:	4614      	mov	r4, r2
 80054a8:	461d      	mov	r5, r3
 80054aa:	eb14 030a 	adds.w	r3, r4, sl
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	eb45 030b 	adc.w	r3, r5, fp
 80054b4:	607b      	str	r3, [r7, #4]
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054c2:	4629      	mov	r1, r5
 80054c4:	028b      	lsls	r3, r1, #10
 80054c6:	4621      	mov	r1, r4
 80054c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054cc:	4621      	mov	r1, r4
 80054ce:	028a      	lsls	r2, r1, #10
 80054d0:	4610      	mov	r0, r2
 80054d2:	4619      	mov	r1, r3
 80054d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d6:	2200      	movs	r2, #0
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	60fa      	str	r2, [r7, #12]
 80054dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054e0:	f7fb fafe 	bl	8000ae0 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4613      	mov	r3, r2
 80054ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054ec:	4b0b      	ldr	r3, [pc, #44]	@ (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	0c1b      	lsrs	r3, r3, #16
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	3301      	adds	r3, #1
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80054fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	fbb2 f3f3 	udiv	r3, r2, r3
 8005504:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005506:	e002      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005508:	4b05      	ldr	r3, [pc, #20]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x184>)
 800550a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800550c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800550e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005510:	4618      	mov	r0, r3
 8005512:	3740      	adds	r7, #64	@ 0x40
 8005514:	46bd      	mov	sp, r7
 8005516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800551a:	bf00      	nop
 800551c:	40023800 	.word	0x40023800
 8005520:	00f42400 	.word	0x00f42400
 8005524:	017d7840 	.word	0x017d7840

08005528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800552c:	4b03      	ldr	r3, [pc, #12]	@ (800553c <HAL_RCC_GetHCLKFreq+0x14>)
 800552e:	681b      	ldr	r3, [r3, #0]
}
 8005530:	4618      	mov	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000024 	.word	0x20000024

08005540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005544:	f7ff fff0 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005548:	4602      	mov	r2, r0
 800554a:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	0a9b      	lsrs	r3, r3, #10
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	4903      	ldr	r1, [pc, #12]	@ (8005564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005556:	5ccb      	ldrb	r3, [r1, r3]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40023800 	.word	0x40023800
 8005564:	080081f0 	.word	0x080081f0

08005568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800556c:	f7ff ffdc 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0b5b      	lsrs	r3, r3, #13
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4903      	ldr	r1, [pc, #12]	@ (800558c <HAL_RCC_GetPCLK2Freq+0x24>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40023800 	.word	0x40023800
 800558c:	080081f0 	.word	0x080081f0

08005590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e041      	b.n	8005626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fd ffb6 	bl	8003528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f000 fdfe 	bl	80061d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d001      	beq.n	8005648 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e046      	b.n	80056d6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a23      	ldr	r2, [pc, #140]	@ (80056e4 <HAL_TIM_Base_Start+0xb4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d022      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005662:	d01d      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1f      	ldr	r2, [pc, #124]	@ (80056e8 <HAL_TIM_Base_Start+0xb8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d018      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1e      	ldr	r2, [pc, #120]	@ (80056ec <HAL_TIM_Base_Start+0xbc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1c      	ldr	r2, [pc, #112]	@ (80056f0 <HAL_TIM_Base_Start+0xc0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00e      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1b      	ldr	r2, [pc, #108]	@ (80056f4 <HAL_TIM_Base_Start+0xc4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a19      	ldr	r2, [pc, #100]	@ (80056f8 <HAL_TIM_Base_Start+0xc8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_TIM_Base_Start+0x70>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a18      	ldr	r2, [pc, #96]	@ (80056fc <HAL_TIM_Base_Start+0xcc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d111      	bne.n	80056c4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b06      	cmp	r3, #6
 80056b0:	d010      	beq.n	80056d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0201 	orr.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c2:	e007      	b.n	80056d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40000c00 	.word	0x40000c00
 80056f4:	40010400 	.word	0x40010400
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40001800 	.word	0x40001800

08005700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d001      	beq.n	8005718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e04e      	b.n	80057b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a23      	ldr	r2, [pc, #140]	@ (80057c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d022      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005742:	d01d      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1f      	ldr	r2, [pc, #124]	@ (80057c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d018      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1e      	ldr	r2, [pc, #120]	@ (80057cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1c      	ldr	r2, [pc, #112]	@ (80057d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00e      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1b      	ldr	r2, [pc, #108]	@ (80057d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a19      	ldr	r2, [pc, #100]	@ (80057d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a18      	ldr	r2, [pc, #96]	@ (80057dc <HAL_TIM_Base_Start_IT+0xdc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d111      	bne.n	80057a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b06      	cmp	r3, #6
 8005790:	d010      	beq.n	80057b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0201 	orr.w	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a2:	e007      	b.n	80057b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40000c00 	.word	0x40000c00
 80057d4:	40010400 	.word	0x40010400
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40001800 	.word	0x40001800

080057e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e041      	b.n	8005876 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f839 	bl	800587e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3304      	adds	r3, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4610      	mov	r0, r2
 8005820:	f000 fcd6 	bl	80061d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d109      	bne.n	80058b8 <HAL_TIM_PWM_Start+0x24>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	bf14      	ite	ne
 80058b0:	2301      	movne	r3, #1
 80058b2:	2300      	moveq	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	e022      	b.n	80058fe <HAL_TIM_PWM_Start+0x6a>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d109      	bne.n	80058d2 <HAL_TIM_PWM_Start+0x3e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	bf14      	ite	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	2300      	moveq	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	e015      	b.n	80058fe <HAL_TIM_PWM_Start+0x6a>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d109      	bne.n	80058ec <HAL_TIM_PWM_Start+0x58>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	e008      	b.n	80058fe <HAL_TIM_PWM_Start+0x6a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	bf14      	ite	ne
 80058f8:	2301      	movne	r3, #1
 80058fa:	2300      	moveq	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e07c      	b.n	8005a00 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <HAL_TIM_PWM_Start+0x82>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005914:	e013      	b.n	800593e <HAL_TIM_PWM_Start+0xaa>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b04      	cmp	r3, #4
 800591a:	d104      	bne.n	8005926 <HAL_TIM_PWM_Start+0x92>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005924:	e00b      	b.n	800593e <HAL_TIM_PWM_Start+0xaa>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b08      	cmp	r3, #8
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Start+0xa2>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005934:	e003      	b.n	800593e <HAL_TIM_PWM_Start+0xaa>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2201      	movs	r2, #1
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 ff38 	bl	80067bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a2d      	ldr	r2, [pc, #180]	@ (8005a08 <HAL_TIM_PWM_Start+0x174>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_TIM_PWM_Start+0xcc>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a0c <HAL_TIM_PWM_Start+0x178>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d101      	bne.n	8005964 <HAL_TIM_PWM_Start+0xd0>
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <HAL_TIM_PWM_Start+0xd2>
 8005964:	2300      	movs	r3, #0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005978:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a22      	ldr	r2, [pc, #136]	@ (8005a08 <HAL_TIM_PWM_Start+0x174>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d022      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598c:	d01d      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1f      	ldr	r2, [pc, #124]	@ (8005a10 <HAL_TIM_PWM_Start+0x17c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d018      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a14 <HAL_TIM_PWM_Start+0x180>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a18 <HAL_TIM_PWM_Start+0x184>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00e      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a16      	ldr	r2, [pc, #88]	@ (8005a0c <HAL_TIM_PWM_Start+0x178>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a18      	ldr	r2, [pc, #96]	@ (8005a1c <HAL_TIM_PWM_Start+0x188>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a16      	ldr	r2, [pc, #88]	@ (8005a20 <HAL_TIM_PWM_Start+0x18c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d111      	bne.n	80059ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b06      	cmp	r3, #6
 80059da:	d010      	beq.n	80059fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ec:	e007      	b.n	80059fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0201 	orr.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40010400 	.word	0x40010400
 8005a10:	40000400 	.word	0x40000400
 8005a14:	40000800 	.word	0x40000800
 8005a18:	40000c00 	.word	0x40000c00
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40001800 	.word	0x40001800

08005a24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e097      	b.n	8005b68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7fd fe3d 	bl	80036cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a68:	f023 0307 	bic.w	r3, r3, #7
 8005a6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3304      	adds	r3, #4
 8005a76:	4619      	mov	r1, r3
 8005a78:	4610      	mov	r0, r2
 8005a7a:	f000 fba9 	bl	80061d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005ac4:	f023 030c 	bic.w	r3, r3, #12
 8005ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ad0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ad4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	011a      	lsls	r2, r3, #4
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	031b      	lsls	r3, r3, #12
 8005af4:	4313      	orrs	r3, r2
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005b02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005b0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	4313      	orrs	r3, r2
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d110      	bne.n	8005bc2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d102      	bne.n	8005bac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ba6:	7b7b      	ldrb	r3, [r7, #13]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d001      	beq.n	8005bb0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e069      	b.n	8005c84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bc0:	e031      	b.n	8005c26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d110      	bne.n	8005bea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bc8:	7bbb      	ldrb	r3, [r7, #14]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d102      	bne.n	8005bd4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bce:	7b3b      	ldrb	r3, [r7, #12]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d001      	beq.n	8005bd8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e055      	b.n	8005c84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005be8:	e01d      	b.n	8005c26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d108      	bne.n	8005c02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bf0:	7bbb      	ldrb	r3, [r7, #14]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d105      	bne.n	8005c02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bf6:	7b7b      	ldrb	r3, [r7, #13]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d102      	bne.n	8005c02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bfc:	7b3b      	ldrb	r3, [r7, #12]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d001      	beq.n	8005c06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e03e      	b.n	8005c84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2202      	movs	r2, #2
 8005c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_TIM_Encoder_Start+0xc4>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d008      	beq.n	8005c44 <HAL_TIM_Encoder_Start+0xd4>
 8005c32:	e00f      	b.n	8005c54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fdbd 	bl	80067bc <TIM_CCxChannelCmd>
      break;
 8005c42:	e016      	b.n	8005c72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	2104      	movs	r1, #4
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fdb5 	bl	80067bc <TIM_CCxChannelCmd>
      break;
 8005c52:	e00e      	b.n	8005c72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fdad 	bl	80067bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2201      	movs	r2, #1
 8005c68:	2104      	movs	r1, #4
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fda6 	bl	80067bc <TIM_CCxChannelCmd>
      break;
 8005c70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f042 0201 	orr.w	r2, r2, #1
 8005c80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d020      	beq.n	8005cf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d01b      	beq.n	8005cf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0202 	mvn.w	r2, #2
 8005cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa5b 	bl	8006192 <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa4d 	bl	800617e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fa5e 	bl	80061a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d020      	beq.n	8005d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d01b      	beq.n	8005d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0204 	mvn.w	r2, #4
 8005d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2202      	movs	r2, #2
 8005d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fa35 	bl	8006192 <HAL_TIM_IC_CaptureCallback>
 8005d28:	e005      	b.n	8005d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fa27 	bl	800617e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fa38 	bl	80061a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 0308 	and.w	r3, r3, #8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d020      	beq.n	8005d88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01b      	beq.n	8005d88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0208 	mvn.w	r2, #8
 8005d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa0f 	bl	8006192 <HAL_TIM_IC_CaptureCallback>
 8005d74:	e005      	b.n	8005d82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa01 	bl	800617e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fa12 	bl	80061a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f003 0310 	and.w	r3, r3, #16
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d020      	beq.n	8005dd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01b      	beq.n	8005dd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0210 	mvn.w	r2, #16
 8005da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2208      	movs	r2, #8
 8005daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9e9 	bl	8006192 <HAL_TIM_IC_CaptureCallback>
 8005dc0:	e005      	b.n	8005dce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f9db 	bl	800617e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f9ec 	bl	80061a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00c      	beq.n	8005df8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d007      	beq.n	8005df8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0201 	mvn.w	r2, #1
 8005df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fa ffec 	bl	8000dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00c      	beq.n	8005e1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d007      	beq.n	8005e1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fdce 	bl	80069b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00c      	beq.n	8005e40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9bd 	bl	80061ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00c      	beq.n	8005e64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0220 	mvn.w	r2, #32
 8005e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fda0 	bl	80069a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e64:	bf00      	nop
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e0ae      	b.n	8005fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b0c      	cmp	r3, #12
 8005e96:	f200 809f 	bhi.w	8005fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005ed5 	.word	0x08005ed5
 8005ea4:	08005fd9 	.word	0x08005fd9
 8005ea8:	08005fd9 	.word	0x08005fd9
 8005eac:	08005fd9 	.word	0x08005fd9
 8005eb0:	08005f15 	.word	0x08005f15
 8005eb4:	08005fd9 	.word	0x08005fd9
 8005eb8:	08005fd9 	.word	0x08005fd9
 8005ebc:	08005fd9 	.word	0x08005fd9
 8005ec0:	08005f57 	.word	0x08005f57
 8005ec4:	08005fd9 	.word	0x08005fd9
 8005ec8:	08005fd9 	.word	0x08005fd9
 8005ecc:	08005fd9 	.word	0x08005fd9
 8005ed0:	08005f97 	.word	0x08005f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fa24 	bl	8006328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0208 	orr.w	r2, r2, #8
 8005eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0204 	bic.w	r2, r2, #4
 8005efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6999      	ldr	r1, [r3, #24]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	619a      	str	r2, [r3, #24]
      break;
 8005f12:	e064      	b.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fa74 	bl	8006408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6999      	ldr	r1, [r3, #24]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	021a      	lsls	r2, r3, #8
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	619a      	str	r2, [r3, #24]
      break;
 8005f54:	e043      	b.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fac9 	bl	80064f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0208 	orr.w	r2, r2, #8
 8005f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0204 	bic.w	r2, r2, #4
 8005f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69d9      	ldr	r1, [r3, #28]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	61da      	str	r2, [r3, #28]
      break;
 8005f94:	e023      	b.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fb1d 	bl	80065dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69d9      	ldr	r1, [r3, #28]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	021a      	lsls	r2, r3, #8
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	61da      	str	r2, [r3, #28]
      break;
 8005fd6:	e002      	b.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	75fb      	strb	r3, [r7, #23]
      break;
 8005fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_TIM_ConfigClockSource+0x1c>
 8006008:	2302      	movs	r3, #2
 800600a:	e0b4      	b.n	8006176 <HAL_TIM_ConfigClockSource+0x186>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800602a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006044:	d03e      	beq.n	80060c4 <HAL_TIM_ConfigClockSource+0xd4>
 8006046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800604a:	f200 8087 	bhi.w	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800604e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006052:	f000 8086 	beq.w	8006162 <HAL_TIM_ConfigClockSource+0x172>
 8006056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800605a:	d87f      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800605c:	2b70      	cmp	r3, #112	@ 0x70
 800605e:	d01a      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0xa6>
 8006060:	2b70      	cmp	r3, #112	@ 0x70
 8006062:	d87b      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 8006064:	2b60      	cmp	r3, #96	@ 0x60
 8006066:	d050      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x11a>
 8006068:	2b60      	cmp	r3, #96	@ 0x60
 800606a:	d877      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800606c:	2b50      	cmp	r3, #80	@ 0x50
 800606e:	d03c      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0xfa>
 8006070:	2b50      	cmp	r3, #80	@ 0x50
 8006072:	d873      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 8006074:	2b40      	cmp	r3, #64	@ 0x40
 8006076:	d058      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x13a>
 8006078:	2b40      	cmp	r3, #64	@ 0x40
 800607a:	d86f      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b30      	cmp	r3, #48	@ 0x30
 800607e:	d064      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x15a>
 8006080:	2b30      	cmp	r3, #48	@ 0x30
 8006082:	d86b      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b20      	cmp	r3, #32
 8006086:	d060      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x15a>
 8006088:	2b20      	cmp	r3, #32
 800608a:	d867      	bhi.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
 800608c:	2b00      	cmp	r3, #0
 800608e:	d05c      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x15a>
 8006090:	2b10      	cmp	r3, #16
 8006092:	d05a      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x15a>
 8006094:	e062      	b.n	800615c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060a6:	f000 fb69 	bl	800677c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	609a      	str	r2, [r3, #8]
      break;
 80060c2:	e04f      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060d4:	f000 fb52 	bl	800677c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060e6:	609a      	str	r2, [r3, #8]
      break;
 80060e8:	e03c      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f6:	461a      	mov	r2, r3
 80060f8:	f000 fac6 	bl	8006688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2150      	movs	r1, #80	@ 0x50
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fb1f 	bl	8006746 <TIM_ITRx_SetConfig>
      break;
 8006108:	e02c      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006116:	461a      	mov	r2, r3
 8006118:	f000 fae5 	bl	80066e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2160      	movs	r1, #96	@ 0x60
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fb0f 	bl	8006746 <TIM_ITRx_SetConfig>
      break;
 8006128:	e01c      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006136:	461a      	mov	r2, r3
 8006138:	f000 faa6 	bl	8006688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2140      	movs	r1, #64	@ 0x40
 8006142:	4618      	mov	r0, r3
 8006144:	f000 faff 	bl	8006746 <TIM_ITRx_SetConfig>
      break;
 8006148:	e00c      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4619      	mov	r1, r3
 8006154:	4610      	mov	r0, r2
 8006156:	f000 faf6 	bl	8006746 <TIM_ITRx_SetConfig>
      break;
 800615a:	e003      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	73fb      	strb	r3, [r7, #15]
      break;
 8006160:	e000      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
	...

080061d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a46      	ldr	r2, [pc, #280]	@ (80062fc <TIM_Base_SetConfig+0x12c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d013      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ee:	d00f      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a43      	ldr	r2, [pc, #268]	@ (8006300 <TIM_Base_SetConfig+0x130>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00b      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a42      	ldr	r2, [pc, #264]	@ (8006304 <TIM_Base_SetConfig+0x134>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d007      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a41      	ldr	r2, [pc, #260]	@ (8006308 <TIM_Base_SetConfig+0x138>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a40      	ldr	r2, [pc, #256]	@ (800630c <TIM_Base_SetConfig+0x13c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d108      	bne.n	8006222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a35      	ldr	r2, [pc, #212]	@ (80062fc <TIM_Base_SetConfig+0x12c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d02b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006230:	d027      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a32      	ldr	r2, [pc, #200]	@ (8006300 <TIM_Base_SetConfig+0x130>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d023      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a31      	ldr	r2, [pc, #196]	@ (8006304 <TIM_Base_SetConfig+0x134>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01f      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a30      	ldr	r2, [pc, #192]	@ (8006308 <TIM_Base_SetConfig+0x138>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2f      	ldr	r2, [pc, #188]	@ (800630c <TIM_Base_SetConfig+0x13c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d017      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2e      	ldr	r2, [pc, #184]	@ (8006310 <TIM_Base_SetConfig+0x140>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2d      	ldr	r2, [pc, #180]	@ (8006314 <TIM_Base_SetConfig+0x144>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00f      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2c      	ldr	r2, [pc, #176]	@ (8006318 <TIM_Base_SetConfig+0x148>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <TIM_Base_SetConfig+0x14c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2a      	ldr	r2, [pc, #168]	@ (8006320 <TIM_Base_SetConfig+0x150>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a29      	ldr	r2, [pc, #164]	@ (8006324 <TIM_Base_SetConfig+0x154>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d108      	bne.n	8006294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a10      	ldr	r2, [pc, #64]	@ (80062fc <TIM_Base_SetConfig+0x12c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_Base_SetConfig+0xf8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a12      	ldr	r2, [pc, #72]	@ (800630c <TIM_Base_SetConfig+0x13c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d103      	bne.n	80062d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d105      	bne.n	80062ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f023 0201 	bic.w	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	611a      	str	r2, [r3, #16]
  }
}
 80062ee:	bf00      	nop
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40010000 	.word	0x40010000
 8006300:	40000400 	.word	0x40000400
 8006304:	40000800 	.word	0x40000800
 8006308:	40000c00 	.word	0x40000c00
 800630c:	40010400 	.word	0x40010400
 8006310:	40014000 	.word	0x40014000
 8006314:	40014400 	.word	0x40014400
 8006318:	40014800 	.word	0x40014800
 800631c:	40001800 	.word	0x40001800
 8006320:	40001c00 	.word	0x40001c00
 8006324:	40002000 	.word	0x40002000

08006328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	f023 0201 	bic.w	r2, r3, #1
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f023 0302 	bic.w	r3, r3, #2
 8006370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a20      	ldr	r2, [pc, #128]	@ (8006400 <TIM_OC1_SetConfig+0xd8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_OC1_SetConfig+0x64>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a1f      	ldr	r2, [pc, #124]	@ (8006404 <TIM_OC1_SetConfig+0xdc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d10c      	bne.n	80063a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f023 0308 	bic.w	r3, r3, #8
 8006392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f023 0304 	bic.w	r3, r3, #4
 80063a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a15      	ldr	r2, [pc, #84]	@ (8006400 <TIM_OC1_SetConfig+0xd8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d003      	beq.n	80063b6 <TIM_OC1_SetConfig+0x8e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a14      	ldr	r2, [pc, #80]	@ (8006404 <TIM_OC1_SetConfig+0xdc>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d111      	bne.n	80063da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	621a      	str	r2, [r3, #32]
}
 80063f4:	bf00      	nop
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	40010000 	.word	0x40010000
 8006404:	40010400 	.word	0x40010400

08006408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f023 0210 	bic.w	r2, r3, #16
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f023 0320 	bic.w	r3, r3, #32
 8006452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a22      	ldr	r2, [pc, #136]	@ (80064ec <TIM_OC2_SetConfig+0xe4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d003      	beq.n	8006470 <TIM_OC2_SetConfig+0x68>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a21      	ldr	r2, [pc, #132]	@ (80064f0 <TIM_OC2_SetConfig+0xe8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d10d      	bne.n	800648c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800648a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a17      	ldr	r2, [pc, #92]	@ (80064ec <TIM_OC2_SetConfig+0xe4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d003      	beq.n	800649c <TIM_OC2_SetConfig+0x94>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a16      	ldr	r2, [pc, #88]	@ (80064f0 <TIM_OC2_SetConfig+0xe8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d113      	bne.n	80064c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40010000 	.word	0x40010000
 80064f0:	40010400 	.word	0x40010400

080064f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0303 	bic.w	r3, r3, #3
 800652a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800653c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a21      	ldr	r2, [pc, #132]	@ (80065d4 <TIM_OC3_SetConfig+0xe0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d003      	beq.n	800655a <TIM_OC3_SetConfig+0x66>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a20      	ldr	r2, [pc, #128]	@ (80065d8 <TIM_OC3_SetConfig+0xe4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d10d      	bne.n	8006576 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a16      	ldr	r2, [pc, #88]	@ (80065d4 <TIM_OC3_SetConfig+0xe0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d003      	beq.n	8006586 <TIM_OC3_SetConfig+0x92>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a15      	ldr	r2, [pc, #84]	@ (80065d8 <TIM_OC3_SetConfig+0xe4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d113      	bne.n	80065ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800658c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	621a      	str	r2, [r3, #32]
}
 80065c8:	bf00      	nop
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	40010000 	.word	0x40010000
 80065d8:	40010400 	.word	0x40010400

080065dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800660a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	021b      	lsls	r3, r3, #8
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	031b      	lsls	r3, r3, #12
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a12      	ldr	r2, [pc, #72]	@ (8006680 <TIM_OC4_SetConfig+0xa4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_OC4_SetConfig+0x68>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a11      	ldr	r2, [pc, #68]	@ (8006684 <TIM_OC4_SetConfig+0xa8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d109      	bne.n	8006658 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800664a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	019b      	lsls	r3, r3, #6
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	621a      	str	r2, [r3, #32]
}
 8006672:	bf00      	nop
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40010000 	.word	0x40010000
 8006684:	40010400 	.word	0x40010400

08006688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	f023 0201 	bic.w	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f023 030a 	bic.w	r3, r3, #10
 80066c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	621a      	str	r2, [r3, #32]
}
 80066da:	bf00      	nop
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b087      	sub	sp, #28
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	f023 0210 	bic.w	r2, r3, #16
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	031b      	lsls	r3, r3, #12
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006722:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	621a      	str	r2, [r3, #32]
}
 800673a:	bf00      	nop
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	f043 0307 	orr.w	r3, r3, #7
 8006768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	609a      	str	r2, [r3, #8]
}
 8006770:	bf00      	nop
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	021a      	lsls	r2, r3, #8
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	431a      	orrs	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	609a      	str	r2, [r3, #8]
}
 80067b0:	bf00      	nop
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	2201      	movs	r2, #1
 80067d0:	fa02 f303 	lsl.w	r3, r2, r3
 80067d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	43db      	mvns	r3, r3
 80067de:	401a      	ands	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a1a      	ldr	r2, [r3, #32]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f003 031f 	and.w	r3, r3, #31
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	fa01 f303 	lsl.w	r3, r1, r3
 80067f4:	431a      	orrs	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	621a      	str	r2, [r3, #32]
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
	...

08006808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800681c:	2302      	movs	r3, #2
 800681e:	e05a      	b.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a21      	ldr	r2, [pc, #132]	@ (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d022      	beq.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800686c:	d01d      	beq.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1d      	ldr	r2, [pc, #116]	@ (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d018      	beq.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1b      	ldr	r2, [pc, #108]	@ (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d013      	beq.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a1a      	ldr	r2, [pc, #104]	@ (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00e      	beq.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a18      	ldr	r2, [pc, #96]	@ (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d009      	beq.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a17      	ldr	r2, [pc, #92]	@ (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d004      	beq.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a15      	ldr	r2, [pc, #84]	@ (80068fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d10c      	bne.n	80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40010000 	.word	0x40010000
 80068e8:	40000400 	.word	0x40000400
 80068ec:	40000800 	.word	0x40000800
 80068f0:	40000c00 	.word	0x40000c00
 80068f4:	40010400 	.word	0x40010400
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40001800 	.word	0x40001800

08006900 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006918:	2302      	movs	r3, #2
 800691a:	e03d      	b.n	8006998 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e042      	b.n	8006a64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fd f856 	bl	8003aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2224      	movs	r2, #36	@ 0x24
 80069fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 ff77 	bl	8007904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	695a      	ldr	r2, [r3, #20]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08c      	sub	sp, #48	@ 0x30
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d156      	bne.n	8006b34 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <HAL_UART_Transmit_DMA+0x26>
 8006a8c:	88fb      	ldrh	r3, [r7, #6]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e04f      	b.n	8006b36 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	88fa      	ldrh	r2, [r7, #6]
 8006aa0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	88fa      	ldrh	r2, [r7, #6]
 8006aa6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2221      	movs	r2, #33	@ 0x21
 8006ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aba:	4a21      	ldr	r2, [pc, #132]	@ (8006b40 <HAL_UART_Transmit_DMA+0xd4>)
 8006abc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac2:	4a20      	ldr	r2, [pc, #128]	@ (8006b44 <HAL_UART_Transmit_DMA+0xd8>)
 8006ac4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aca:	4a1f      	ldr	r2, [pc, #124]	@ (8006b48 <HAL_UART_Transmit_DMA+0xdc>)
 8006acc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006ad6:	f107 0308 	add.w	r3, r7, #8
 8006ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	461a      	mov	r2, r3
 8006aec:	88fb      	ldrh	r3, [r7, #6]
 8006aee:	f7fd fbd5 	bl	800429c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006afa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3314      	adds	r3, #20
 8006b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3314      	adds	r3, #20
 8006b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6a39      	ldr	r1, [r7, #32]
 8006b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e5      	bne.n	8006afc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	e000      	b.n	8006b36 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006b34:	2302      	movs	r3, #2
  }
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3730      	adds	r7, #48	@ 0x30
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	08007191 	.word	0x08007191
 8006b44:	0800722b 	.word	0x0800722b
 8006b48:	080073af 	.word	0x080073af

08006b4c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08c      	sub	sp, #48	@ 0x30
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	4613      	mov	r3, r2
 8006b58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d14a      	bne.n	8006bfc <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006b6c:	88fb      	ldrh	r3, [r7, #6]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e043      	b.n	8006bfe <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	461a      	mov	r2, r3
 8006b86:	68b9      	ldr	r1, [r7, #8]
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 fc5b 	bl	8007444 <UART_Start_Receive_DMA>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006b94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d12c      	bne.n	8006bf6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d125      	bne.n	8006bf0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	613b      	str	r3, [r7, #16]
 8006bb8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f043 0310 	orr.w	r3, r3, #16
 8006bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bda:	627a      	str	r2, [r7, #36]	@ 0x24
 8006bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6a39      	ldr	r1, [r7, #32]
 8006be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e5      	bne.n	8006bba <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006bee:	e002      	b.n	8006bf6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bfa:	e000      	b.n	8006bfe <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006bfc:	2302      	movs	r3, #2
  }
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3730      	adds	r7, #48	@ 0x30
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b0ba      	sub	sp, #232	@ 0xe8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10f      	bne.n	8006c6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <HAL_UART_IRQHandler+0x66>
 8006c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fd8d 	bl	8007786 <UART_Receive_IT>
      return;
 8006c6c:	e25b      	b.n	8007126 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 80de 	beq.w	8006e34 <HAL_UART_IRQHandler+0x22c>
 8006c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d106      	bne.n	8006c92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 80d1 	beq.w	8006e34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00b      	beq.n	8006cb6 <HAL_UART_IRQHandler+0xae>
 8006c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cae:	f043 0201 	orr.w	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cba:	f003 0304 	and.w	r3, r3, #4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <HAL_UART_IRQHandler+0xd2>
 8006cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd2:	f043 0202 	orr.w	r2, r3, #2
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <HAL_UART_IRQHandler+0xf6>
 8006ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d005      	beq.n	8006cfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf6:	f043 0204 	orr.w	r2, r3, #4
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d02:	f003 0308 	and.w	r3, r3, #8
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d011      	beq.n	8006d2e <HAL_UART_IRQHandler+0x126>
 8006d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d0e:	f003 0320 	and.w	r3, r3, #32
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d105      	bne.n	8006d22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d26:	f043 0208 	orr.w	r2, r3, #8
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 81f2 	beq.w	800711c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d3c:	f003 0320 	and.w	r3, r3, #32
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <HAL_UART_IRQHandler+0x14e>
 8006d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fd18 	bl	8007786 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d60:	2b40      	cmp	r3, #64	@ 0x40
 8006d62:	bf0c      	ite	eq
 8006d64:	2301      	moveq	r3, #1
 8006d66:	2300      	movne	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <HAL_UART_IRQHandler+0x17a>
 8006d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d04f      	beq.n	8006e22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fc20 	bl	80075c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d92:	2b40      	cmp	r3, #64	@ 0x40
 8006d94:	d141      	bne.n	8006e1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3314      	adds	r3, #20
 8006d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006db4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3314      	adds	r3, #20
 8006dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006dc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006dce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1d9      	bne.n	8006d96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d013      	beq.n	8006e12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dee:	4a7e      	ldr	r2, [pc, #504]	@ (8006fe8 <HAL_UART_IRQHandler+0x3e0>)
 8006df0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fd fb18 	bl	800442c <HAL_DMA_Abort_IT>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d016      	beq.n	8006e30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e10:	e00e      	b.n	8006e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9b2 	bl	800717c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e18:	e00a      	b.n	8006e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f9ae 	bl	800717c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e20:	e006      	b.n	8006e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f9aa 	bl	800717c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006e2e:	e175      	b.n	800711c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e30:	bf00      	nop
    return;
 8006e32:	e173      	b.n	800711c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	f040 814f 	bne.w	80070dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 8148 	beq.w	80070dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e50:	f003 0310 	and.w	r3, r3, #16
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 8141 	beq.w	80070dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60bb      	str	r3, [r7, #8]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	60bb      	str	r3, [r7, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	60bb      	str	r3, [r7, #8]
 8006e6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e7a:	2b40      	cmp	r3, #64	@ 0x40
 8006e7c:	f040 80b6 	bne.w	8006fec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 8145 	beq.w	8007120 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	f080 813e 	bcs.w	8007120 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006eaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eb6:	f000 8088 	beq.w	8006fca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ee6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ef2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1d9      	bne.n	8006eba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3314      	adds	r3, #20
 8006f0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3314      	adds	r3, #20
 8006f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e1      	bne.n	8006f06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3314      	adds	r3, #20
 8006f48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3314      	adds	r3, #20
 8006f62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e3      	bne.n	8006f42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	330c      	adds	r3, #12
 8006f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f9a:	f023 0310 	bic.w	r3, r3, #16
 8006f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	330c      	adds	r3, #12
 8006fa8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006fac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006fae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e3      	bne.n	8006f88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fd f9c1 	bl	800434c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7fa f861 	bl	80010a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fe6:	e09b      	b.n	8007120 <HAL_UART_IRQHandler+0x518>
 8006fe8:	0800768f 	.word	0x0800768f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 808e 	beq.w	8007124 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007008:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 8089 	beq.w	8007124 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	330c      	adds	r3, #12
 8007018:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007028:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330c      	adds	r3, #12
 8007032:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007036:	647a      	str	r2, [r7, #68]	@ 0x44
 8007038:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800703c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e3      	bne.n	8007012 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3314      	adds	r3, #20
 8007050:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	623b      	str	r3, [r7, #32]
   return(result);
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3314      	adds	r3, #20
 800706a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800706e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007070:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800707c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e3      	bne.n	800704a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	330c      	adds	r3, #12
 8007096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0310 	bic.w	r3, r3, #16
 80070a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	330c      	adds	r3, #12
 80070b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80070b4:	61fa      	str	r2, [r7, #28]
 80070b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	69b9      	ldr	r1, [r7, #24]
 80070ba:	69fa      	ldr	r2, [r7, #28]
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	617b      	str	r3, [r7, #20]
   return(result);
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e3      	bne.n	8007090 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7f9 ffe7 	bl	80010a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070da:	e023      	b.n	8007124 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d009      	beq.n	80070fc <HAL_UART_IRQHandler+0x4f4>
 80070e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fade 	bl	80076b6 <UART_Transmit_IT>
    return;
 80070fa:	e014      	b.n	8007126 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80070fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00e      	beq.n	8007126 <HAL_UART_IRQHandler+0x51e>
 8007108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800710c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fb1e 	bl	8007756 <UART_EndTransmit_IT>
    return;
 800711a:	e004      	b.n	8007126 <HAL_UART_IRQHandler+0x51e>
    return;
 800711c:	bf00      	nop
 800711e:	e002      	b.n	8007126 <HAL_UART_IRQHandler+0x51e>
      return;
 8007120:	bf00      	nop
 8007122:	e000      	b.n	8007126 <HAL_UART_IRQHandler+0x51e>
      return;
 8007124:	bf00      	nop
  }
}
 8007126:	37e8      	adds	r7, #232	@ 0xe8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b090      	sub	sp, #64	@ 0x40
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d137      	bne.n	800721c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80071ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ae:	2200      	movs	r2, #0
 80071b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3314      	adds	r3, #20
 80071b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	623b      	str	r3, [r7, #32]
   return(result);
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3314      	adds	r3, #20
 80071d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80071d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e5      	bne.n	80071b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80071fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	330c      	adds	r3, #12
 8007204:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007206:	61fa      	str	r2, [r7, #28]
 8007208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	69b9      	ldr	r1, [r7, #24]
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	617b      	str	r3, [r7, #20]
   return(result);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800721a:	e002      	b.n	8007222 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800721c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800721e:	f7ff ff85 	bl	800712c <HAL_UART_TxCpltCallback>
}
 8007222:	bf00      	nop
 8007224:	3740      	adds	r7, #64	@ 0x40
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007236:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff ff81 	bl	8007140 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b09c      	sub	sp, #112	@ 0x70
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007252:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725e:	2b00      	cmp	r3, #0
 8007260:	d172      	bne.n	8007348 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007264:	2200      	movs	r2, #0
 8007266:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800727a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800727e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007280:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	330c      	adds	r3, #12
 8007286:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007288:	65ba      	str	r2, [r7, #88]	@ 0x58
 800728a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800728e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e5      	bne.n	8007268 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3314      	adds	r3, #20
 80072a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ae:	f023 0301 	bic.w	r3, r3, #1
 80072b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80072b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3314      	adds	r3, #20
 80072ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80072bc:	647a      	str	r2, [r7, #68]	@ 0x44
 80072be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e5      	bne.n	800729c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3314      	adds	r3, #20
 80072d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	623b      	str	r3, [r7, #32]
   return(result);
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80072e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3314      	adds	r3, #20
 80072ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80072f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80072f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e5      	bne.n	80072d0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007306:	2220      	movs	r2, #32
 8007308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800730e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007310:	2b01      	cmp	r3, #1
 8007312:	d119      	bne.n	8007348 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	330c      	adds	r3, #12
 800731a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	e853 3f00 	ldrex	r3, [r3]
 8007322:	60fb      	str	r3, [r7, #12]
   return(result);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0310 	bic.w	r3, r3, #16
 800732a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800732c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	330c      	adds	r3, #12
 8007332:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007334:	61fa      	str	r2, [r7, #28]
 8007336:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	69b9      	ldr	r1, [r7, #24]
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	617b      	str	r3, [r7, #20]
   return(result);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e5      	bne.n	8007314 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800734a:	2200      	movs	r2, #0
 800734c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800734e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007352:	2b01      	cmp	r3, #1
 8007354:	d106      	bne.n	8007364 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007358:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800735a:	4619      	mov	r1, r3
 800735c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800735e:	f7f9 fea3 	bl	80010a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007362:	e002      	b.n	800736a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007364:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007366:	f7ff fef5 	bl	8007154 <HAL_UART_RxCpltCallback>
}
 800736a:	bf00      	nop
 800736c:	3770      	adds	r7, #112	@ 0x70
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2201      	movs	r2, #1
 8007384:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738a:	2b01      	cmp	r3, #1
 800738c:	d108      	bne.n	80073a0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007392:	085b      	lsrs	r3, r3, #1
 8007394:	b29b      	uxth	r3, r3
 8007396:	4619      	mov	r1, r3
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f7f9 fe85 	bl	80010a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800739e:	e002      	b.n	80073a6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f7ff fee1 	bl	8007168 <HAL_UART_RxHalfCpltCallback>
}
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ca:	2b80      	cmp	r3, #128	@ 0x80
 80073cc:	bf0c      	ite	eq
 80073ce:	2301      	moveq	r3, #1
 80073d0:	2300      	movne	r3, #0
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b21      	cmp	r3, #33	@ 0x21
 80073e0:	d108      	bne.n	80073f4 <UART_DMAError+0x46>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d005      	beq.n	80073f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2200      	movs	r2, #0
 80073ec:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80073ee:	68b8      	ldr	r0, [r7, #8]
 80073f0:	f000 f8c2 	bl	8007578 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fe:	2b40      	cmp	r3, #64	@ 0x40
 8007400:	bf0c      	ite	eq
 8007402:	2301      	moveq	r3, #1
 8007404:	2300      	movne	r3, #0
 8007406:	b2db      	uxtb	r3, r3
 8007408:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b22      	cmp	r3, #34	@ 0x22
 8007414:	d108      	bne.n	8007428 <UART_DMAError+0x7a>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d005      	beq.n	8007428 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2200      	movs	r2, #0
 8007420:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f000 f8d0 	bl	80075c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800742c:	f043 0210 	orr.w	r2, r3, #16
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007434:	68b8      	ldr	r0, [r7, #8]
 8007436:	f7ff fea1 	bl	800717c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800743a:	bf00      	nop
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b098      	sub	sp, #96	@ 0x60
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	88fa      	ldrh	r2, [r7, #6]
 800745c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2222      	movs	r2, #34	@ 0x22
 8007468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007470:	4a3e      	ldr	r2, [pc, #248]	@ (800756c <UART_Start_Receive_DMA+0x128>)
 8007472:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007478:	4a3d      	ldr	r2, [pc, #244]	@ (8007570 <UART_Start_Receive_DMA+0x12c>)
 800747a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007480:	4a3c      	ldr	r2, [pc, #240]	@ (8007574 <UART_Start_Receive_DMA+0x130>)
 8007482:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007488:	2200      	movs	r2, #0
 800748a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800748c:	f107 0308 	add.w	r3, r7, #8
 8007490:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	f7fc fefa 	bl	800429c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80074a8:	2300      	movs	r3, #0
 80074aa:	613b      	str	r3, [r7, #16]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	613b      	str	r3, [r7, #16]
 80074bc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d019      	beq.n	80074fa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	330c      	adds	r3, #12
 80074cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074d0:	e853 3f00 	ldrex	r3, [r3]
 80074d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	330c      	adds	r3, #12
 80074e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074e6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80074e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80074ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074ee:	e841 2300 	strex	r3, r2, [r1]
 80074f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80074f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1e5      	bne.n	80074c6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3314      	adds	r3, #20
 8007500:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800750a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750c:	f043 0301 	orr.w	r3, r3, #1
 8007510:	657b      	str	r3, [r7, #84]	@ 0x54
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3314      	adds	r3, #20
 8007518:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800751a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800751c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e5      	bne.n	80074fa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3314      	adds	r3, #20
 8007534:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	617b      	str	r3, [r7, #20]
   return(result);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007544:	653b      	str	r3, [r7, #80]	@ 0x50
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3314      	adds	r3, #20
 800754c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800754e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6a39      	ldr	r1, [r7, #32]
 8007554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	61fb      	str	r3, [r7, #28]
   return(result);
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e5      	bne.n	800752e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3760      	adds	r7, #96	@ 0x60
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	08007247 	.word	0x08007247
 8007570:	08007373 	.word	0x08007373
 8007574:	080073af 	.word	0x080073af

08007578 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b089      	sub	sp, #36	@ 0x24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	330c      	adds	r3, #12
 8007586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007596:	61fb      	str	r3, [r7, #28]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	330c      	adds	r3, #12
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	61ba      	str	r2, [r7, #24]
 80075a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6979      	ldr	r1, [r7, #20]
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	613b      	str	r3, [r7, #16]
   return(result);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e5      	bne.n	8007580 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80075bc:	bf00      	nop
 80075be:	3724      	adds	r7, #36	@ 0x24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b095      	sub	sp, #84	@ 0x54
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	330c      	adds	r3, #12
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075da:	e853 3f00 	ldrex	r3, [r3]
 80075de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	330c      	adds	r3, #12
 80075ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075f8:	e841 2300 	strex	r3, r2, [r1]
 80075fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e5      	bne.n	80075d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3314      	adds	r3, #20
 800760a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	61fb      	str	r3, [r7, #28]
   return(result);
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	f023 0301 	bic.w	r3, r3, #1
 800761a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3314      	adds	r3, #20
 8007622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007624:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007626:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800762a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800762c:	e841 2300 	strex	r3, r2, [r1]
 8007630:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e5      	bne.n	8007604 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763c:	2b01      	cmp	r3, #1
 800763e:	d119      	bne.n	8007674 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	330c      	adds	r3, #12
 8007646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f023 0310 	bic.w	r3, r3, #16
 8007656:	647b      	str	r3, [r7, #68]	@ 0x44
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	330c      	adds	r3, #12
 800765e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007660:	61ba      	str	r2, [r7, #24]
 8007662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6979      	ldr	r1, [r7, #20]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	613b      	str	r3, [r7, #16]
   return(result);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e5      	bne.n	8007640 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007682:	bf00      	nop
 8007684:	3754      	adds	r7, #84	@ 0x54
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7ff fd67 	bl	800717c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ae:	bf00      	nop
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b085      	sub	sp, #20
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b21      	cmp	r3, #33	@ 0x21
 80076c8:	d13e      	bne.n	8007748 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d2:	d114      	bne.n	80076fe <UART_Transmit_IT+0x48>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d110      	bne.n	80076fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	1c9a      	adds	r2, r3, #2
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	621a      	str	r2, [r3, #32]
 80076fc:	e008      	b.n	8007710 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	1c59      	adds	r1, r3, #1
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	6211      	str	r1, [r2, #32]
 8007708:	781a      	ldrb	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29b      	uxth	r3, r3
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	4619      	mov	r1, r3
 800771e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10f      	bne.n	8007744 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007732:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007742:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	e000      	b.n	800774a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007748:	2302      	movs	r3, #2
  }
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800776c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff fcd8 	bl	800712c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b08c      	sub	sp, #48	@ 0x30
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b22      	cmp	r3, #34	@ 0x22
 8007798:	f040 80ae 	bne.w	80078f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077a4:	d117      	bne.n	80077d6 <UART_Receive_IT+0x50>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d113      	bne.n	80077d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ce:	1c9a      	adds	r2, r3, #2
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80077d4:	e026      	b.n	8007824 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e8:	d007      	beq.n	80077fa <UART_Receive_IT+0x74>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <UART_Receive_IT+0x82>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	b2da      	uxtb	r2, r3
 8007802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	e008      	b.n	800781a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007814:	b2da      	uxtb	r2, r3
 8007816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007818:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29b      	uxth	r3, r3
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	4619      	mov	r1, r3
 8007832:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007834:	2b00      	cmp	r3, #0
 8007836:	d15d      	bne.n	80078f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0220 	bic.w	r2, r2, #32
 8007846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68da      	ldr	r2, [r3, #12]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695a      	ldr	r2, [r3, #20]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0201 	bic.w	r2, r2, #1
 8007866:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787a:	2b01      	cmp	r3, #1
 800787c:	d135      	bne.n	80078ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	613b      	str	r3, [r7, #16]
   return(result);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f023 0310 	bic.w	r3, r3, #16
 800789a:	627b      	str	r3, [r7, #36]	@ 0x24
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	330c      	adds	r3, #12
 80078a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078a4:	623a      	str	r2, [r7, #32]
 80078a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	69f9      	ldr	r1, [r7, #28]
 80078aa:	6a3a      	ldr	r2, [r7, #32]
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e5      	bne.n	8007884 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0310 	and.w	r3, r3, #16
 80078c2:	2b10      	cmp	r3, #16
 80078c4:	d10a      	bne.n	80078dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7f9 fbe0 	bl	80010a8 <HAL_UARTEx_RxEventCallback>
 80078e8:	e002      	b.n	80078f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff fc32 	bl	8007154 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	e002      	b.n	80078fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e000      	b.n	80078fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3730      	adds	r7, #48	@ 0x30
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007908:	b0c0      	sub	sp, #256	@ 0x100
 800790a:	af00      	add	r7, sp, #0
 800790c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800791c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007920:	68d9      	ldr	r1, [r3, #12]
 8007922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	ea40 0301 	orr.w	r3, r0, r1
 800792c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800792e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	431a      	orrs	r2, r3
 800793c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	431a      	orrs	r2, r3
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	4313      	orrs	r3, r2
 800794c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800795c:	f021 010c 	bic.w	r1, r1, #12
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800796a:	430b      	orrs	r3, r1
 800796c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800796e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800797a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797e:	6999      	ldr	r1, [r3, #24]
 8007980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	ea40 0301 	orr.w	r3, r0, r1
 800798a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800798c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4b8f      	ldr	r3, [pc, #572]	@ (8007bd0 <UART_SetConfig+0x2cc>)
 8007994:	429a      	cmp	r2, r3
 8007996:	d005      	beq.n	80079a4 <UART_SetConfig+0xa0>
 8007998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4b8d      	ldr	r3, [pc, #564]	@ (8007bd4 <UART_SetConfig+0x2d0>)
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d104      	bne.n	80079ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079a4:	f7fd fde0 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 80079a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80079ac:	e003      	b.n	80079b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079ae:	f7fd fdc7 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 80079b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079c0:	f040 810c 	bne.w	8007bdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80079d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80079d6:	4622      	mov	r2, r4
 80079d8:	462b      	mov	r3, r5
 80079da:	1891      	adds	r1, r2, r2
 80079dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80079de:	415b      	adcs	r3, r3
 80079e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80079e6:	4621      	mov	r1, r4
 80079e8:	eb12 0801 	adds.w	r8, r2, r1
 80079ec:	4629      	mov	r1, r5
 80079ee:	eb43 0901 	adc.w	r9, r3, r1
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	f04f 0300 	mov.w	r3, #0
 80079fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a06:	4690      	mov	r8, r2
 8007a08:	4699      	mov	r9, r3
 8007a0a:	4623      	mov	r3, r4
 8007a0c:	eb18 0303 	adds.w	r3, r8, r3
 8007a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a14:	462b      	mov	r3, r5
 8007a16:	eb49 0303 	adc.w	r3, r9, r3
 8007a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a32:	460b      	mov	r3, r1
 8007a34:	18db      	adds	r3, r3, r3
 8007a36:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a38:	4613      	mov	r3, r2
 8007a3a:	eb42 0303 	adc.w	r3, r2, r3
 8007a3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a48:	f7f9 f84a 	bl	8000ae0 <__aeabi_uldivmod>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4b61      	ldr	r3, [pc, #388]	@ (8007bd8 <UART_SetConfig+0x2d4>)
 8007a52:	fba3 2302 	umull	r2, r3, r3, r2
 8007a56:	095b      	lsrs	r3, r3, #5
 8007a58:	011c      	lsls	r4, r3, #4
 8007a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	464b      	mov	r3, r9
 8007a70:	1891      	adds	r1, r2, r2
 8007a72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a74:	415b      	adcs	r3, r3
 8007a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a7c:	4641      	mov	r1, r8
 8007a7e:	eb12 0a01 	adds.w	sl, r2, r1
 8007a82:	4649      	mov	r1, r9
 8007a84:	eb43 0b01 	adc.w	fp, r3, r1
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a9c:	4692      	mov	sl, r2
 8007a9e:	469b      	mov	fp, r3
 8007aa0:	4643      	mov	r3, r8
 8007aa2:	eb1a 0303 	adds.w	r3, sl, r3
 8007aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007aaa:	464b      	mov	r3, r9
 8007aac:	eb4b 0303 	adc.w	r3, fp, r3
 8007ab0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ac0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ac4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	18db      	adds	r3, r3, r3
 8007acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ace:	4613      	mov	r3, r2
 8007ad0:	eb42 0303 	adc.w	r3, r2, r3
 8007ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ad6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007ada:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007ade:	f7f8 ffff 	bl	8000ae0 <__aeabi_uldivmod>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8007bd8 <UART_SetConfig+0x2d4>)
 8007aea:	fba3 2301 	umull	r2, r3, r3, r1
 8007aee:	095b      	lsrs	r3, r3, #5
 8007af0:	2264      	movs	r2, #100	@ 0x64
 8007af2:	fb02 f303 	mul.w	r3, r2, r3
 8007af6:	1acb      	subs	r3, r1, r3
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007afe:	4b36      	ldr	r3, [pc, #216]	@ (8007bd8 <UART_SetConfig+0x2d4>)
 8007b00:	fba3 2302 	umull	r2, r3, r3, r2
 8007b04:	095b      	lsrs	r3, r3, #5
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b0c:	441c      	add	r4, r3
 8007b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b20:	4642      	mov	r2, r8
 8007b22:	464b      	mov	r3, r9
 8007b24:	1891      	adds	r1, r2, r2
 8007b26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b28:	415b      	adcs	r3, r3
 8007b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b30:	4641      	mov	r1, r8
 8007b32:	1851      	adds	r1, r2, r1
 8007b34:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b36:	4649      	mov	r1, r9
 8007b38:	414b      	adcs	r3, r1
 8007b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b3c:	f04f 0200 	mov.w	r2, #0
 8007b40:	f04f 0300 	mov.w	r3, #0
 8007b44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007b48:	4659      	mov	r1, fp
 8007b4a:	00cb      	lsls	r3, r1, #3
 8007b4c:	4651      	mov	r1, sl
 8007b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b52:	4651      	mov	r1, sl
 8007b54:	00ca      	lsls	r2, r1, #3
 8007b56:	4610      	mov	r0, r2
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	189b      	adds	r3, r3, r2
 8007b60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b64:	464b      	mov	r3, r9
 8007b66:	460a      	mov	r2, r1
 8007b68:	eb42 0303 	adc.w	r3, r2, r3
 8007b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b84:	460b      	mov	r3, r1
 8007b86:	18db      	adds	r3, r3, r3
 8007b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	eb42 0303 	adc.w	r3, r2, r3
 8007b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b9a:	f7f8 ffa1 	bl	8000ae0 <__aeabi_uldivmod>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd8 <UART_SetConfig+0x2d4>)
 8007ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba8:	095b      	lsrs	r3, r3, #5
 8007baa:	2164      	movs	r1, #100	@ 0x64
 8007bac:	fb01 f303 	mul.w	r3, r1, r3
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	3332      	adds	r3, #50	@ 0x32
 8007bb6:	4a08      	ldr	r2, [pc, #32]	@ (8007bd8 <UART_SetConfig+0x2d4>)
 8007bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bbc:	095b      	lsrs	r3, r3, #5
 8007bbe:	f003 0207 	and.w	r2, r3, #7
 8007bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4422      	add	r2, r4
 8007bca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bcc:	e106      	b.n	8007ddc <UART_SetConfig+0x4d8>
 8007bce:	bf00      	nop
 8007bd0:	40011000 	.word	0x40011000
 8007bd4:	40011400 	.word	0x40011400
 8007bd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007be6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007bea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007bee:	4642      	mov	r2, r8
 8007bf0:	464b      	mov	r3, r9
 8007bf2:	1891      	adds	r1, r2, r2
 8007bf4:	6239      	str	r1, [r7, #32]
 8007bf6:	415b      	adcs	r3, r3
 8007bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bfe:	4641      	mov	r1, r8
 8007c00:	1854      	adds	r4, r2, r1
 8007c02:	4649      	mov	r1, r9
 8007c04:	eb43 0501 	adc.w	r5, r3, r1
 8007c08:	f04f 0200 	mov.w	r2, #0
 8007c0c:	f04f 0300 	mov.w	r3, #0
 8007c10:	00eb      	lsls	r3, r5, #3
 8007c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c16:	00e2      	lsls	r2, r4, #3
 8007c18:	4614      	mov	r4, r2
 8007c1a:	461d      	mov	r5, r3
 8007c1c:	4643      	mov	r3, r8
 8007c1e:	18e3      	adds	r3, r4, r3
 8007c20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c24:	464b      	mov	r3, r9
 8007c26:	eb45 0303 	adc.w	r3, r5, r3
 8007c2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c3e:	f04f 0200 	mov.w	r2, #0
 8007c42:	f04f 0300 	mov.w	r3, #0
 8007c46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	008b      	lsls	r3, r1, #2
 8007c4e:	4621      	mov	r1, r4
 8007c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c54:	4621      	mov	r1, r4
 8007c56:	008a      	lsls	r2, r1, #2
 8007c58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c5c:	f7f8 ff40 	bl	8000ae0 <__aeabi_uldivmod>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4b60      	ldr	r3, [pc, #384]	@ (8007de8 <UART_SetConfig+0x4e4>)
 8007c66:	fba3 2302 	umull	r2, r3, r3, r2
 8007c6a:	095b      	lsrs	r3, r3, #5
 8007c6c:	011c      	lsls	r4, r3, #4
 8007c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c80:	4642      	mov	r2, r8
 8007c82:	464b      	mov	r3, r9
 8007c84:	1891      	adds	r1, r2, r2
 8007c86:	61b9      	str	r1, [r7, #24]
 8007c88:	415b      	adcs	r3, r3
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c90:	4641      	mov	r1, r8
 8007c92:	1851      	adds	r1, r2, r1
 8007c94:	6139      	str	r1, [r7, #16]
 8007c96:	4649      	mov	r1, r9
 8007c98:	414b      	adcs	r3, r1
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ca8:	4659      	mov	r1, fp
 8007caa:	00cb      	lsls	r3, r1, #3
 8007cac:	4651      	mov	r1, sl
 8007cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cb2:	4651      	mov	r1, sl
 8007cb4:	00ca      	lsls	r2, r1, #3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	4642      	mov	r2, r8
 8007cbe:	189b      	adds	r3, r3, r2
 8007cc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	460a      	mov	r2, r1
 8007cc8:	eb42 0303 	adc.w	r3, r2, r3
 8007ccc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ce8:	4649      	mov	r1, r9
 8007cea:	008b      	lsls	r3, r1, #2
 8007cec:	4641      	mov	r1, r8
 8007cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	008a      	lsls	r2, r1, #2
 8007cf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007cfa:	f7f8 fef1 	bl	8000ae0 <__aeabi_uldivmod>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4611      	mov	r1, r2
 8007d04:	4b38      	ldr	r3, [pc, #224]	@ (8007de8 <UART_SetConfig+0x4e4>)
 8007d06:	fba3 2301 	umull	r2, r3, r3, r1
 8007d0a:	095b      	lsrs	r3, r3, #5
 8007d0c:	2264      	movs	r2, #100	@ 0x64
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
 8007d12:	1acb      	subs	r3, r1, r3
 8007d14:	011b      	lsls	r3, r3, #4
 8007d16:	3332      	adds	r3, #50	@ 0x32
 8007d18:	4a33      	ldr	r2, [pc, #204]	@ (8007de8 <UART_SetConfig+0x4e4>)
 8007d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1e:	095b      	lsrs	r3, r3, #5
 8007d20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d24:	441c      	add	r4, r3
 8007d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d34:	4642      	mov	r2, r8
 8007d36:	464b      	mov	r3, r9
 8007d38:	1891      	adds	r1, r2, r2
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	415b      	adcs	r3, r3
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d44:	4641      	mov	r1, r8
 8007d46:	1851      	adds	r1, r2, r1
 8007d48:	6039      	str	r1, [r7, #0]
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	414b      	adcs	r3, r1
 8007d4e:	607b      	str	r3, [r7, #4]
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	f04f 0300 	mov.w	r3, #0
 8007d58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d5c:	4659      	mov	r1, fp
 8007d5e:	00cb      	lsls	r3, r1, #3
 8007d60:	4651      	mov	r1, sl
 8007d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d66:	4651      	mov	r1, sl
 8007d68:	00ca      	lsls	r2, r1, #3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4603      	mov	r3, r0
 8007d70:	4642      	mov	r2, r8
 8007d72:	189b      	adds	r3, r3, r2
 8007d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d76:	464b      	mov	r3, r9
 8007d78:	460a      	mov	r2, r1
 8007d7a:	eb42 0303 	adc.w	r3, r2, r3
 8007d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	f04f 0300 	mov.w	r3, #0
 8007d94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d98:	4649      	mov	r1, r9
 8007d9a:	008b      	lsls	r3, r1, #2
 8007d9c:	4641      	mov	r1, r8
 8007d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007da2:	4641      	mov	r1, r8
 8007da4:	008a      	lsls	r2, r1, #2
 8007da6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007daa:	f7f8 fe99 	bl	8000ae0 <__aeabi_uldivmod>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4b0d      	ldr	r3, [pc, #52]	@ (8007de8 <UART_SetConfig+0x4e4>)
 8007db4:	fba3 1302 	umull	r1, r3, r3, r2
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	2164      	movs	r1, #100	@ 0x64
 8007dbc:	fb01 f303 	mul.w	r3, r1, r3
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	3332      	adds	r3, #50	@ 0x32
 8007dc6:	4a08      	ldr	r2, [pc, #32]	@ (8007de8 <UART_SetConfig+0x4e4>)
 8007dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dcc:	095b      	lsrs	r3, r3, #5
 8007dce:	f003 020f 	and.w	r2, r3, #15
 8007dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4422      	add	r2, r4
 8007dda:	609a      	str	r2, [r3, #8]
}
 8007ddc:	bf00      	nop
 8007dde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007de2:	46bd      	mov	sp, r7
 8007de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007de8:	51eb851f 	.word	0x51eb851f

08007dec <fmod>:
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dee:	ed2d 8b02 	vpush	{d8}
 8007df2:	ec57 6b10 	vmov	r6, r7, d0
 8007df6:	ec55 4b11 	vmov	r4, r5, d1
 8007dfa:	f000 f8a1 	bl	8007f40 <__ieee754_fmod>
 8007dfe:	4622      	mov	r2, r4
 8007e00:	462b      	mov	r3, r5
 8007e02:	4630      	mov	r0, r6
 8007e04:	4639      	mov	r1, r7
 8007e06:	eeb0 8a40 	vmov.f32	s16, s0
 8007e0a:	eef0 8a60 	vmov.f32	s17, s1
 8007e0e:	f7f8 fe31 	bl	8000a74 <__aeabi_dcmpun>
 8007e12:	b990      	cbnz	r0, 8007e3a <fmod+0x4e>
 8007e14:	2200      	movs	r2, #0
 8007e16:	2300      	movs	r3, #0
 8007e18:	4620      	mov	r0, r4
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	f7f8 fdf8 	bl	8000a10 <__aeabi_dcmpeq>
 8007e20:	b158      	cbz	r0, 8007e3a <fmod+0x4e>
 8007e22:	f000 f99f 	bl	8008164 <__errno>
 8007e26:	2321      	movs	r3, #33	@ 0x21
 8007e28:	6003      	str	r3, [r0, #0]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4610      	mov	r0, r2
 8007e30:	4619      	mov	r1, r3
 8007e32:	f7f8 fcaf 	bl	8000794 <__aeabi_ddiv>
 8007e36:	ec41 0b18 	vmov	d8, r0, r1
 8007e3a:	eeb0 0a48 	vmov.f32	s0, s16
 8007e3e:	eef0 0a68 	vmov.f32	s1, s17
 8007e42:	ecbd 8b02 	vpop	{d8}
 8007e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e48 <floor>:
 8007e48:	ec51 0b10 	vmov	r0, r1, d0
 8007e4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e54:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007e58:	2e13      	cmp	r6, #19
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	4680      	mov	r8, r0
 8007e60:	dc34      	bgt.n	8007ecc <floor+0x84>
 8007e62:	2e00      	cmp	r6, #0
 8007e64:	da17      	bge.n	8007e96 <floor+0x4e>
 8007e66:	a332      	add	r3, pc, #200	@ (adr r3, 8007f30 <floor+0xe8>)
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f7f8 f9b2 	bl	80001d4 <__adddf3>
 8007e70:	2200      	movs	r2, #0
 8007e72:	2300      	movs	r3, #0
 8007e74:	f7f8 fdf4 	bl	8000a60 <__aeabi_dcmpgt>
 8007e78:	b150      	cbz	r0, 8007e90 <floor+0x48>
 8007e7a:	2c00      	cmp	r4, #0
 8007e7c:	da55      	bge.n	8007f2a <floor+0xe2>
 8007e7e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007e82:	432c      	orrs	r4, r5
 8007e84:	2500      	movs	r5, #0
 8007e86:	42ac      	cmp	r4, r5
 8007e88:	4c2b      	ldr	r4, [pc, #172]	@ (8007f38 <floor+0xf0>)
 8007e8a:	bf08      	it	eq
 8007e8c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007e90:	4621      	mov	r1, r4
 8007e92:	4628      	mov	r0, r5
 8007e94:	e023      	b.n	8007ede <floor+0x96>
 8007e96:	4f29      	ldr	r7, [pc, #164]	@ (8007f3c <floor+0xf4>)
 8007e98:	4137      	asrs	r7, r6
 8007e9a:	ea01 0307 	and.w	r3, r1, r7
 8007e9e:	4303      	orrs	r3, r0
 8007ea0:	d01d      	beq.n	8007ede <floor+0x96>
 8007ea2:	a323      	add	r3, pc, #140	@ (adr r3, 8007f30 <floor+0xe8>)
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f7f8 f994 	bl	80001d4 <__adddf3>
 8007eac:	2200      	movs	r2, #0
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f7f8 fdd6 	bl	8000a60 <__aeabi_dcmpgt>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d0eb      	beq.n	8007e90 <floor+0x48>
 8007eb8:	2c00      	cmp	r4, #0
 8007eba:	bfbe      	ittt	lt
 8007ebc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007ec0:	4133      	asrlt	r3, r6
 8007ec2:	18e4      	addlt	r4, r4, r3
 8007ec4:	ea24 0407 	bic.w	r4, r4, r7
 8007ec8:	2500      	movs	r5, #0
 8007eca:	e7e1      	b.n	8007e90 <floor+0x48>
 8007ecc:	2e33      	cmp	r6, #51	@ 0x33
 8007ece:	dd0a      	ble.n	8007ee6 <floor+0x9e>
 8007ed0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007ed4:	d103      	bne.n	8007ede <floor+0x96>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	f7f8 f97b 	bl	80001d4 <__adddf3>
 8007ede:	ec41 0b10 	vmov	d0, r0, r1
 8007ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007eea:	f04f 37ff 	mov.w	r7, #4294967295
 8007eee:	40df      	lsrs	r7, r3
 8007ef0:	4207      	tst	r7, r0
 8007ef2:	d0f4      	beq.n	8007ede <floor+0x96>
 8007ef4:	a30e      	add	r3, pc, #56	@ (adr r3, 8007f30 <floor+0xe8>)
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	f7f8 f96b 	bl	80001d4 <__adddf3>
 8007efe:	2200      	movs	r2, #0
 8007f00:	2300      	movs	r3, #0
 8007f02:	f7f8 fdad 	bl	8000a60 <__aeabi_dcmpgt>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d0c2      	beq.n	8007e90 <floor+0x48>
 8007f0a:	2c00      	cmp	r4, #0
 8007f0c:	da0a      	bge.n	8007f24 <floor+0xdc>
 8007f0e:	2e14      	cmp	r6, #20
 8007f10:	d101      	bne.n	8007f16 <floor+0xce>
 8007f12:	3401      	adds	r4, #1
 8007f14:	e006      	b.n	8007f24 <floor+0xdc>
 8007f16:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	40b3      	lsls	r3, r6
 8007f1e:	441d      	add	r5, r3
 8007f20:	4545      	cmp	r5, r8
 8007f22:	d3f6      	bcc.n	8007f12 <floor+0xca>
 8007f24:	ea25 0507 	bic.w	r5, r5, r7
 8007f28:	e7b2      	b.n	8007e90 <floor+0x48>
 8007f2a:	2500      	movs	r5, #0
 8007f2c:	462c      	mov	r4, r5
 8007f2e:	e7af      	b.n	8007e90 <floor+0x48>
 8007f30:	8800759c 	.word	0x8800759c
 8007f34:	7e37e43c 	.word	0x7e37e43c
 8007f38:	bff00000 	.word	0xbff00000
 8007f3c:	000fffff 	.word	0x000fffff

08007f40 <__ieee754_fmod>:
 8007f40:	ec53 2b11 	vmov	r2, r3, d1
 8007f44:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8007f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4c:	ea52 040c 	orrs.w	r4, r2, ip
 8007f50:	ec51 0b10 	vmov	r0, r1, d0
 8007f54:	461e      	mov	r6, r3
 8007f56:	4617      	mov	r7, r2
 8007f58:	4696      	mov	lr, r2
 8007f5a:	d00c      	beq.n	8007f76 <__ieee754_fmod+0x36>
 8007f5c:	4c77      	ldr	r4, [pc, #476]	@ (800813c <__ieee754_fmod+0x1fc>)
 8007f5e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8007f62:	45a0      	cmp	r8, r4
 8007f64:	4689      	mov	r9, r1
 8007f66:	d806      	bhi.n	8007f76 <__ieee754_fmod+0x36>
 8007f68:	4254      	negs	r4, r2
 8007f6a:	4d75      	ldr	r5, [pc, #468]	@ (8008140 <__ieee754_fmod+0x200>)
 8007f6c:	4314      	orrs	r4, r2
 8007f6e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8007f72:	42ac      	cmp	r4, r5
 8007f74:	d909      	bls.n	8007f8a <__ieee754_fmod+0x4a>
 8007f76:	f7f8 fae3 	bl	8000540 <__aeabi_dmul>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	f7f8 fc09 	bl	8000794 <__aeabi_ddiv>
 8007f82:	ec41 0b10 	vmov	d0, r0, r1
 8007f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8a:	45e0      	cmp	r8, ip
 8007f8c:	4682      	mov	sl, r0
 8007f8e:	4604      	mov	r4, r0
 8007f90:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8007f94:	dc09      	bgt.n	8007faa <__ieee754_fmod+0x6a>
 8007f96:	dbf4      	blt.n	8007f82 <__ieee754_fmod+0x42>
 8007f98:	4282      	cmp	r2, r0
 8007f9a:	d8f2      	bhi.n	8007f82 <__ieee754_fmod+0x42>
 8007f9c:	d105      	bne.n	8007faa <__ieee754_fmod+0x6a>
 8007f9e:	4b69      	ldr	r3, [pc, #420]	@ (8008144 <__ieee754_fmod+0x204>)
 8007fa0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8007fa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fa8:	e7eb      	b.n	8007f82 <__ieee754_fmod+0x42>
 8007faa:	4a65      	ldr	r2, [pc, #404]	@ (8008140 <__ieee754_fmod+0x200>)
 8007fac:	ea19 0f02 	tst.w	r9, r2
 8007fb0:	d148      	bne.n	8008044 <__ieee754_fmod+0x104>
 8007fb2:	f1b8 0f00 	cmp.w	r8, #0
 8007fb6:	d13d      	bne.n	8008034 <__ieee754_fmod+0xf4>
 8007fb8:	4963      	ldr	r1, [pc, #396]	@ (8008148 <__ieee754_fmod+0x208>)
 8007fba:	4653      	mov	r3, sl
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc36      	bgt.n	800802e <__ieee754_fmod+0xee>
 8007fc0:	4216      	tst	r6, r2
 8007fc2:	d14f      	bne.n	8008064 <__ieee754_fmod+0x124>
 8007fc4:	f1bc 0f00 	cmp.w	ip, #0
 8007fc8:	d144      	bne.n	8008054 <__ieee754_fmod+0x114>
 8007fca:	4a5f      	ldr	r2, [pc, #380]	@ (8008148 <__ieee754_fmod+0x208>)
 8007fcc:	463b      	mov	r3, r7
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	dc3d      	bgt.n	800804e <__ieee754_fmod+0x10e>
 8007fd2:	485e      	ldr	r0, [pc, #376]	@ (800814c <__ieee754_fmod+0x20c>)
 8007fd4:	4281      	cmp	r1, r0
 8007fd6:	db4a      	blt.n	800806e <__ieee754_fmod+0x12e>
 8007fd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fe0:	485a      	ldr	r0, [pc, #360]	@ (800814c <__ieee754_fmod+0x20c>)
 8007fe2:	4282      	cmp	r2, r0
 8007fe4:	db57      	blt.n	8008096 <__ieee754_fmod+0x156>
 8007fe6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8007fea:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8007fee:	1a89      	subs	r1, r1, r2
 8007ff0:	1b98      	subs	r0, r3, r6
 8007ff2:	eba4 070e 	sub.w	r7, r4, lr
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	d162      	bne.n	80080c0 <__ieee754_fmod+0x180>
 8007ffa:	4574      	cmp	r4, lr
 8007ffc:	bf38      	it	cc
 8007ffe:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8008002:	2800      	cmp	r0, #0
 8008004:	bfa4      	itt	ge
 8008006:	463c      	movge	r4, r7
 8008008:	4603      	movge	r3, r0
 800800a:	ea53 0104 	orrs.w	r1, r3, r4
 800800e:	d0c6      	beq.n	8007f9e <__ieee754_fmod+0x5e>
 8008010:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008014:	db69      	blt.n	80080ea <__ieee754_fmod+0x1aa>
 8008016:	494d      	ldr	r1, [pc, #308]	@ (800814c <__ieee754_fmod+0x20c>)
 8008018:	428a      	cmp	r2, r1
 800801a:	db6c      	blt.n	80080f6 <__ieee754_fmod+0x1b6>
 800801c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008020:	432b      	orrs	r3, r5
 8008022:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8008026:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800802a:	4620      	mov	r0, r4
 800802c:	e7a9      	b.n	8007f82 <__ieee754_fmod+0x42>
 800802e:	3901      	subs	r1, #1
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	e7c3      	b.n	8007fbc <__ieee754_fmod+0x7c>
 8008034:	4945      	ldr	r1, [pc, #276]	@ (800814c <__ieee754_fmod+0x20c>)
 8008036:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800803a:	2b00      	cmp	r3, #0
 800803c:	ddc0      	ble.n	8007fc0 <__ieee754_fmod+0x80>
 800803e:	3901      	subs	r1, #1
 8008040:	005b      	lsls	r3, r3, #1
 8008042:	e7fa      	b.n	800803a <__ieee754_fmod+0xfa>
 8008044:	ea4f 5128 	mov.w	r1, r8, asr #20
 8008048:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800804c:	e7b8      	b.n	8007fc0 <__ieee754_fmod+0x80>
 800804e:	3a01      	subs	r2, #1
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	e7bc      	b.n	8007fce <__ieee754_fmod+0x8e>
 8008054:	4a3d      	ldr	r2, [pc, #244]	@ (800814c <__ieee754_fmod+0x20c>)
 8008056:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800805a:	2b00      	cmp	r3, #0
 800805c:	ddb9      	ble.n	8007fd2 <__ieee754_fmod+0x92>
 800805e:	3a01      	subs	r2, #1
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	e7fa      	b.n	800805a <__ieee754_fmod+0x11a>
 8008064:	ea4f 522c 	mov.w	r2, ip, asr #20
 8008068:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800806c:	e7b1      	b.n	8007fd2 <__ieee754_fmod+0x92>
 800806e:	1a40      	subs	r0, r0, r1
 8008070:	281f      	cmp	r0, #31
 8008072:	dc0a      	bgt.n	800808a <__ieee754_fmod+0x14a>
 8008074:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8008078:	fa08 f800 	lsl.w	r8, r8, r0
 800807c:	fa2a f303 	lsr.w	r3, sl, r3
 8008080:	ea43 0308 	orr.w	r3, r3, r8
 8008084:	fa0a f400 	lsl.w	r4, sl, r0
 8008088:	e7aa      	b.n	8007fe0 <__ieee754_fmod+0xa0>
 800808a:	4b31      	ldr	r3, [pc, #196]	@ (8008150 <__ieee754_fmod+0x210>)
 800808c:	1a5b      	subs	r3, r3, r1
 800808e:	fa0a f303 	lsl.w	r3, sl, r3
 8008092:	2400      	movs	r4, #0
 8008094:	e7a4      	b.n	8007fe0 <__ieee754_fmod+0xa0>
 8008096:	1a80      	subs	r0, r0, r2
 8008098:	281f      	cmp	r0, #31
 800809a:	dc0a      	bgt.n	80080b2 <__ieee754_fmod+0x172>
 800809c:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80080a0:	fa0c fc00 	lsl.w	ip, ip, r0
 80080a4:	fa27 f606 	lsr.w	r6, r7, r6
 80080a8:	ea46 060c 	orr.w	r6, r6, ip
 80080ac:	fa07 fe00 	lsl.w	lr, r7, r0
 80080b0:	e79d      	b.n	8007fee <__ieee754_fmod+0xae>
 80080b2:	4e27      	ldr	r6, [pc, #156]	@ (8008150 <__ieee754_fmod+0x210>)
 80080b4:	1ab6      	subs	r6, r6, r2
 80080b6:	fa07 f606 	lsl.w	r6, r7, r6
 80080ba:	f04f 0e00 	mov.w	lr, #0
 80080be:	e796      	b.n	8007fee <__ieee754_fmod+0xae>
 80080c0:	4574      	cmp	r4, lr
 80080c2:	bf38      	it	cc
 80080c4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80080c8:	2800      	cmp	r0, #0
 80080ca:	da05      	bge.n	80080d8 <__ieee754_fmod+0x198>
 80080cc:	0fe0      	lsrs	r0, r4, #31
 80080ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80080d2:	0064      	lsls	r4, r4, #1
 80080d4:	3901      	subs	r1, #1
 80080d6:	e78b      	b.n	8007ff0 <__ieee754_fmod+0xb0>
 80080d8:	ea50 0307 	orrs.w	r3, r0, r7
 80080dc:	f43f af5f 	beq.w	8007f9e <__ieee754_fmod+0x5e>
 80080e0:	0ffb      	lsrs	r3, r7, #31
 80080e2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80080e6:	007c      	lsls	r4, r7, #1
 80080e8:	e7f4      	b.n	80080d4 <__ieee754_fmod+0x194>
 80080ea:	0fe1      	lsrs	r1, r4, #31
 80080ec:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80080f0:	0064      	lsls	r4, r4, #1
 80080f2:	3a01      	subs	r2, #1
 80080f4:	e78c      	b.n	8008010 <__ieee754_fmod+0xd0>
 80080f6:	1a89      	subs	r1, r1, r2
 80080f8:	2914      	cmp	r1, #20
 80080fa:	dc0a      	bgt.n	8008112 <__ieee754_fmod+0x1d2>
 80080fc:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8008100:	fa03 f202 	lsl.w	r2, r3, r2
 8008104:	40cc      	lsrs	r4, r1
 8008106:	4322      	orrs	r2, r4
 8008108:	410b      	asrs	r3, r1
 800810a:	ea43 0105 	orr.w	r1, r3, r5
 800810e:	4610      	mov	r0, r2
 8008110:	e737      	b.n	8007f82 <__ieee754_fmod+0x42>
 8008112:	291f      	cmp	r1, #31
 8008114:	dc07      	bgt.n	8008126 <__ieee754_fmod+0x1e6>
 8008116:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800811a:	40cc      	lsrs	r4, r1
 800811c:	fa03 f202 	lsl.w	r2, r3, r2
 8008120:	4322      	orrs	r2, r4
 8008122:	462b      	mov	r3, r5
 8008124:	e7f1      	b.n	800810a <__ieee754_fmod+0x1ca>
 8008126:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800812a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800812e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8008132:	32e2      	adds	r2, #226	@ 0xe2
 8008134:	fa43 f202 	asr.w	r2, r3, r2
 8008138:	e7f3      	b.n	8008122 <__ieee754_fmod+0x1e2>
 800813a:	bf00      	nop
 800813c:	7fefffff 	.word	0x7fefffff
 8008140:	7ff00000 	.word	0x7ff00000
 8008144:	08008200 	.word	0x08008200
 8008148:	fffffbed 	.word	0xfffffbed
 800814c:	fffffc02 	.word	0xfffffc02
 8008150:	fffffbe2 	.word	0xfffffbe2

08008154 <memset>:
 8008154:	4402      	add	r2, r0
 8008156:	4603      	mov	r3, r0
 8008158:	4293      	cmp	r3, r2
 800815a:	d100      	bne.n	800815e <memset+0xa>
 800815c:	4770      	bx	lr
 800815e:	f803 1b01 	strb.w	r1, [r3], #1
 8008162:	e7f9      	b.n	8008158 <memset+0x4>

08008164 <__errno>:
 8008164:	4b01      	ldr	r3, [pc, #4]	@ (800816c <__errno+0x8>)
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	20000060 	.word	0x20000060

08008170 <__libc_init_array>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	4d0d      	ldr	r5, [pc, #52]	@ (80081a8 <__libc_init_array+0x38>)
 8008174:	4c0d      	ldr	r4, [pc, #52]	@ (80081ac <__libc_init_array+0x3c>)
 8008176:	1b64      	subs	r4, r4, r5
 8008178:	10a4      	asrs	r4, r4, #2
 800817a:	2600      	movs	r6, #0
 800817c:	42a6      	cmp	r6, r4
 800817e:	d109      	bne.n	8008194 <__libc_init_array+0x24>
 8008180:	4d0b      	ldr	r5, [pc, #44]	@ (80081b0 <__libc_init_array+0x40>)
 8008182:	4c0c      	ldr	r4, [pc, #48]	@ (80081b4 <__libc_init_array+0x44>)
 8008184:	f000 f818 	bl	80081b8 <_init>
 8008188:	1b64      	subs	r4, r4, r5
 800818a:	10a4      	asrs	r4, r4, #2
 800818c:	2600      	movs	r6, #0
 800818e:	42a6      	cmp	r6, r4
 8008190:	d105      	bne.n	800819e <__libc_init_array+0x2e>
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	f855 3b04 	ldr.w	r3, [r5], #4
 8008198:	4798      	blx	r3
 800819a:	3601      	adds	r6, #1
 800819c:	e7ee      	b.n	800817c <__libc_init_array+0xc>
 800819e:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a2:	4798      	blx	r3
 80081a4:	3601      	adds	r6, #1
 80081a6:	e7f2      	b.n	800818e <__libc_init_array+0x1e>
 80081a8:	08008218 	.word	0x08008218
 80081ac:	08008218 	.word	0x08008218
 80081b0:	08008218 	.word	0x08008218
 80081b4:	0800821c 	.word	0x0800821c

080081b8 <_init>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	bf00      	nop
 80081bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081be:	bc08      	pop	{r3}
 80081c0:	469e      	mov	lr, r3
 80081c2:	4770      	bx	lr

080081c4 <_fini>:
 80081c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c6:	bf00      	nop
 80081c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ca:	bc08      	pop	{r3}
 80081cc:	469e      	mov	lr, r3
 80081ce:	4770      	bx	lr


autoCAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c98  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006e20  08006e20  00007e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e60  08006e60  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e60  08006e60  00007e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e68  08006e68  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e68  08006e68  00007e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e6c  08006e6c  00007e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006e70  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          0000075c  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007c8  200007c8  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000104c5  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000279b  00000000  00000000  00018561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  0001ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab0  00000000  00000000  0001bac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b33  00000000  00000000  0001c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e7d  00000000  00000000  0003e0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb4b4  00000000  00000000  0004ff20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b3d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c0c  00000000  00000000  0011b418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0011f024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e08 	.word	0x08006e08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08006e08 	.word	0x08006e08

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b96a 	b.w	8000dcc <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	460c      	mov	r4, r1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14e      	bne.n	8000bba <__udivmoddi4+0xaa>
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	458c      	cmp	ip, r1
 8000b20:	4686      	mov	lr, r0
 8000b22:	fab2 f282 	clz	r2, r2
 8000b26:	d962      	bls.n	8000bee <__udivmoddi4+0xde>
 8000b28:	b14a      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2a:	f1c2 0320 	rsb	r3, r2, #32
 8000b2e:	4091      	lsls	r1, r2
 8000b30:	fa20 f303 	lsr.w	r3, r0, r3
 8000b34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b38:	4319      	orrs	r1, r3
 8000b3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f f68c 	uxth.w	r6, ip
 8000b46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b56:	fb04 f106 	mul.w	r1, r4, r6
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	d90a      	bls.n	8000b74 <__udivmoddi4+0x64>
 8000b5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b62:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b66:	f080 8112 	bcs.w	8000d8e <__udivmoddi4+0x27e>
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	f240 810f 	bls.w	8000d8e <__udivmoddi4+0x27e>
 8000b70:	3c02      	subs	r4, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	1a59      	subs	r1, r3, r1
 8000b76:	fa1f f38e 	uxth.w	r3, lr
 8000b7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000b82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b86:	fb00 f606 	mul.w	r6, r0, r6
 8000b8a:	429e      	cmp	r6, r3
 8000b8c:	d90a      	bls.n	8000ba4 <__udivmoddi4+0x94>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b96:	f080 80fc 	bcs.w	8000d92 <__udivmoddi4+0x282>
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	f240 80f9 	bls.w	8000d92 <__udivmoddi4+0x282>
 8000ba0:	4463      	add	r3, ip
 8000ba2:	3802      	subs	r0, #2
 8000ba4:	1b9b      	subs	r3, r3, r6
 8000ba6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11d      	cbz	r5, 8000bb6 <__udivmoddi4+0xa6>
 8000bae:	40d3      	lsrs	r3, r2
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d905      	bls.n	8000bca <__udivmoddi4+0xba>
 8000bbe:	b10d      	cbz	r5, 8000bc4 <__udivmoddi4+0xb4>
 8000bc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	e7f5      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000bca:	fab3 f183 	clz	r1, r3
 8000bce:	2900      	cmp	r1, #0
 8000bd0:	d146      	bne.n	8000c60 <__udivmoddi4+0x150>
 8000bd2:	42a3      	cmp	r3, r4
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xcc>
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	f0c0 80f0 	bcc.w	8000dbc <__udivmoddi4+0x2ac>
 8000bdc:	1a86      	subs	r6, r0, r2
 8000bde:	eb64 0303 	sbc.w	r3, r4, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d0e6      	beq.n	8000bb6 <__udivmoddi4+0xa6>
 8000be8:	e9c5 6300 	strd	r6, r3, [r5]
 8000bec:	e7e3      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	f040 8090 	bne.w	8000d14 <__udivmoddi4+0x204>
 8000bf4:	eba1 040c 	sub.w	r4, r1, ip
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	fa1f f78c 	uxth.w	r7, ip
 8000c00:	2101      	movs	r1, #1
 8000c02:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c12:	fb07 f006 	mul.w	r0, r7, r6
 8000c16:	4298      	cmp	r0, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x11c>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x11a>
 8000c24:	4298      	cmp	r0, r3
 8000c26:	f200 80cd 	bhi.w	8000dc4 <__udivmoddi4+0x2b4>
 8000c2a:	4626      	mov	r6, r4
 8000c2c:	1a1c      	subs	r4, r3, r0
 8000c2e:	fa1f f38e 	uxth.w	r3, lr
 8000c32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c36:	fb08 4410 	mls	r4, r8, r0, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb00 f707 	mul.w	r7, r0, r7
 8000c42:	429f      	cmp	r7, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x148>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x146>
 8000c50:	429f      	cmp	r7, r3
 8000c52:	f200 80b0 	bhi.w	8000db6 <__udivmoddi4+0x2a6>
 8000c56:	4620      	mov	r0, r4
 8000c58:	1bdb      	subs	r3, r3, r7
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0x9c>
 8000c60:	f1c1 0620 	rsb	r6, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6a:	431f      	orrs	r7, r3
 8000c6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c70:	fa04 f301 	lsl.w	r3, r4, r1
 8000c74:	ea43 030c 	orr.w	r3, r3, ip
 8000c78:	40f4      	lsrs	r4, r6
 8000c7a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c7e:	0c38      	lsrs	r0, r7, #16
 8000c80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c84:	fbb4 fef0 	udiv	lr, r4, r0
 8000c88:	fa1f fc87 	uxth.w	ip, r7
 8000c8c:	fb00 441e 	mls	r4, r0, lr, r4
 8000c90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c94:	fb0e f90c 	mul.w	r9, lr, ip
 8000c98:	45a1      	cmp	r9, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	d90a      	bls.n	8000cb6 <__udivmoddi4+0x1a6>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ca6:	f080 8084 	bcs.w	8000db2 <__udivmoddi4+0x2a2>
 8000caa:	45a1      	cmp	r9, r4
 8000cac:	f240 8081 	bls.w	8000db2 <__udivmoddi4+0x2a2>
 8000cb0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb4:	443c      	add	r4, r7
 8000cb6:	eba4 0409 	sub.w	r4, r4, r9
 8000cba:	fa1f f983 	uxth.w	r9, r3
 8000cbe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cc2:	fb00 4413 	mls	r4, r0, r3, r4
 8000cc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cca:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x1d2>
 8000cd2:	193c      	adds	r4, r7, r4
 8000cd4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cd8:	d267      	bcs.n	8000daa <__udivmoddi4+0x29a>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0x29a>
 8000cde:	3b02      	subs	r3, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ce6:	fba0 9302 	umull	r9, r3, r0, r2
 8000cea:	eba4 040c 	sub.w	r4, r4, ip
 8000cee:	429c      	cmp	r4, r3
 8000cf0:	46ce      	mov	lr, r9
 8000cf2:	469c      	mov	ip, r3
 8000cf4:	d351      	bcc.n	8000d9a <__udivmoddi4+0x28a>
 8000cf6:	d04e      	beq.n	8000d96 <__udivmoddi4+0x286>
 8000cf8:	b155      	cbz	r5, 8000d10 <__udivmoddi4+0x200>
 8000cfa:	ebb8 030e 	subs.w	r3, r8, lr
 8000cfe:	eb64 040c 	sbc.w	r4, r4, ip
 8000d02:	fa04 f606 	lsl.w	r6, r4, r6
 8000d06:	40cb      	lsrs	r3, r1
 8000d08:	431e      	orrs	r6, r3
 8000d0a:	40cc      	lsrs	r4, r1
 8000d0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d10:	2100      	movs	r1, #0
 8000d12:	e750      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f103 	lsr.w	r1, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa24 f303 	lsr.w	r3, r4, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	430c      	orrs	r4, r1
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d30:	fa1f f78c 	uxth.w	r7, ip
 8000d34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d38:	fb08 3110 	mls	r1, r8, r0, r3
 8000d3c:	0c23      	lsrs	r3, r4, #16
 8000d3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d42:	fb00 f107 	mul.w	r1, r0, r7
 8000d46:	4299      	cmp	r1, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x24c>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d52:	d22c      	bcs.n	8000dae <__udivmoddi4+0x29e>
 8000d54:	4299      	cmp	r1, r3
 8000d56:	d92a      	bls.n	8000dae <__udivmoddi4+0x29e>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d64:	fb08 3311 	mls	r3, r8, r1, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb01 f307 	mul.w	r3, r1, r7
 8000d70:	42a3      	cmp	r3, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x276>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d7c:	d213      	bcs.n	8000da6 <__udivmoddi4+0x296>
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	d911      	bls.n	8000da6 <__udivmoddi4+0x296>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	1ae4      	subs	r4, r4, r3
 8000d88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d8c:	e739      	b.n	8000c02 <__udivmoddi4+0xf2>
 8000d8e:	4604      	mov	r4, r0
 8000d90:	e6f0      	b.n	8000b74 <__udivmoddi4+0x64>
 8000d92:	4608      	mov	r0, r1
 8000d94:	e706      	b.n	8000ba4 <__udivmoddi4+0x94>
 8000d96:	45c8      	cmp	r8, r9
 8000d98:	d2ae      	bcs.n	8000cf8 <__udivmoddi4+0x1e8>
 8000d9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000da2:	3801      	subs	r0, #1
 8000da4:	e7a8      	b.n	8000cf8 <__udivmoddi4+0x1e8>
 8000da6:	4631      	mov	r1, r6
 8000da8:	e7ed      	b.n	8000d86 <__udivmoddi4+0x276>
 8000daa:	4603      	mov	r3, r0
 8000dac:	e799      	b.n	8000ce2 <__udivmoddi4+0x1d2>
 8000dae:	4630      	mov	r0, r6
 8000db0:	e7d4      	b.n	8000d5c <__udivmoddi4+0x24c>
 8000db2:	46d6      	mov	lr, sl
 8000db4:	e77f      	b.n	8000cb6 <__udivmoddi4+0x1a6>
 8000db6:	4463      	add	r3, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e74d      	b.n	8000c58 <__udivmoddi4+0x148>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e70f      	b.n	8000be4 <__udivmoddi4+0xd4>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	e730      	b.n	8000c2c <__udivmoddi4+0x11c>
 8000dca:	bf00      	nop

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <float_to_uint8_arry>:
float leftError=0,rightError=0; float error_last_left = 0,error_before_left= 0;float error_last_right = 0,error_before_right = 0;
uint8_t cRt[256]={};
int delayer=0;
float currentRpm_left=0;
float currentRpm_right=0;
int float_to_uint8_arry(uint8_t* u8Arry, float floatdata, int precision) {//float给定精度转换为uint8_t
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ddc:	6079      	str	r1, [r7, #4]
	int points = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
	float data1 = floatdata;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	61bb      	str	r3, [r7, #24]
	for (; data1 >=1; points++) {
 8000de6:	e00a      	b.n	8000dfe <float_to_uint8_arry+0x2e>
		data1 /= 10;
 8000de8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000dec:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000df0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df4:	edc7 7a06 	vstr	s15, [r7, #24]
	for (; data1 >=1; points++) {
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0e:	daeb      	bge.n	8000de8 <float_to_uint8_arry+0x18>
	}
	for (int i = 0; i < precision; i++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	e00a      	b.n	8000e2c <float_to_uint8_arry+0x5c>
		floatdata *= 10;
 8000e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e1a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e22:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int i = 0; i < precision; i++) {
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf0      	blt.n	8000e16 <float_to_uint8_arry+0x46>
	}
	for (int i = 0; i < points + precision + 1; i++) {
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	e081      	b.n	8000f3e <float_to_uint8_arry+0x16e>
		if (i != precision) {
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d075      	beq.n	8000f2e <float_to_uint8_arry+0x15e>
			if (i == 0) {
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d13c      	bne.n	8000ec2 <float_to_uint8_arry+0xf2>
				u8Arry[points + precision - i] = (uint8_t)((floor(fmod(floatdata, 10) + 0.5)) + '0');
 8000e48:	68b8      	ldr	r0, [r7, #8]
 8000e4a:	f7ff fb21 	bl	8000490 <__aeabi_f2d>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	ed9f 1b43 	vldr	d1, [pc, #268]	@ 8000f60 <float_to_uint8_arry+0x190>
 8000e56:	ec43 2b10 	vmov	d0, r2, r3
 8000e5a:	f005 fded 	bl	8006a38 <fmod>
 8000e5e:	ec51 0b10 	vmov	r0, r1, d0
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	4b40      	ldr	r3, [pc, #256]	@ (8000f68 <float_to_uint8_arry+0x198>)
 8000e68:	f7ff f9b4 	bl	80001d4 <__adddf3>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	ec43 2b17 	vmov	d7, r2, r3
 8000e74:	eeb0 0a47 	vmov.f32	s0, s14
 8000e78:	eef0 0a67 	vmov.f32	s1, s15
 8000e7c:	f005 fe0c 	bl	8006a98 <floor>
 8000e80:	ec51 0b10 	vmov	r0, r1, d0
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	4b38      	ldr	r3, [pc, #224]	@ (8000f6c <float_to_uint8_arry+0x19c>)
 8000e8a:	f7ff f9a3 	bl	80001d4 <__adddf3>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	441a      	add	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	189c      	adds	r4, r3, r2
 8000ea6:	f7ff fdfb 	bl	8000aa0 <__aeabi_d2uiz>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	7023      	strb	r3, [r4, #0]
				floatdata /= 10;
 8000eb0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000eb4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ebc:	edc7 7a02 	vstr	s15, [r7, #8]
 8000ec0:	e03a      	b.n	8000f38 <float_to_uint8_arry+0x168>
			}
			else {
				u8Arry[points + precision - i] = (uint8_t)((floor(fmod(floatdata, 10))) + '0');
 8000ec2:	68b8      	ldr	r0, [r7, #8]
 8000ec4:	f7ff fae4 	bl	8000490 <__aeabi_f2d>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 8000f60 <float_to_uint8_arry+0x190>
 8000ed0:	ec43 2b10 	vmov	d0, r2, r3
 8000ed4:	f005 fdb0 	bl	8006a38 <fmod>
 8000ed8:	eeb0 7a40 	vmov.f32	s14, s0
 8000edc:	eef0 7a60 	vmov.f32	s15, s1
 8000ee0:	eeb0 0a47 	vmov.f32	s0, s14
 8000ee4:	eef0 0a67 	vmov.f32	s1, s15
 8000ee8:	f005 fdd6 	bl	8006a98 <floor>
 8000eec:	ec51 0b10 	vmov	r0, r1, d0
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <float_to_uint8_arry+0x19c>)
 8000ef6:	f7ff f96d 	bl	80001d4 <__adddf3>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	441a      	add	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	189c      	adds	r4, r3, r2
 8000f12:	f7ff fdc5 	bl	8000aa0 <__aeabi_d2uiz>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	7023      	strb	r3, [r4, #0]
				floatdata /= 10;
 8000f1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f20:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f28:	edc7 7a02 	vstr	s15, [r7, #8]
 8000f2c:	e004      	b.n	8000f38 <float_to_uint8_arry+0x168>
			}
		}
		else {
			u8Arry[points] = '.';
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	222e      	movs	r2, #46	@ 0x2e
 8000f36:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < points + precision + 1; i++) {
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	f77f af77 	ble.w	8000e3a <float_to_uint8_arry+0x6a>
		}
	}
	return points + precision + 1;
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	3301      	adds	r3, #1

}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3724      	adds	r7, #36	@ 0x24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	f3af 8000 	nop.w
 8000f60:	00000000 	.word	0x00000000
 8000f64:	40240000 	.word	0x40240000
 8000f68:	3fe00000 	.word	0x3fe00000
 8000f6c:	40480000 	.word	0x40480000

08000f70 <uint8_to_float>:


// Function to convert uint8_t array to float
float uint8_to_float(uint8_t* u8arry, int point_length) {
 8000f70:	b480      	push	{r7}
 8000f72:	b08b      	sub	sp, #44	@ 0x2c
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
	int points = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
	int status = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
	int num_length = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
	float number = 0;
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
	for (; num_length < 256; num_length++) {
 8000f8c:	e013      	b.n	8000fb6 <uint8_to_float+0x46>
		if (u8arry[num_length] == '.') {
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f98:	d101      	bne.n	8000f9e <uint8_to_float+0x2e>
			points = num_length;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (u8arry[num_length] == 'o') {
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b6f      	cmp	r3, #111	@ 0x6f
 8000fa8:	d102      	bne.n	8000fb0 <uint8_to_float+0x40>
			status = num_length;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	623b      	str	r3, [r7, #32]
			break;
 8000fae:	e005      	b.n	8000fbc <uint8_to_float+0x4c>
	for (; num_length < 256; num_length++) {
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	2bff      	cmp	r3, #255	@ 0xff
 8000fba:	dde8      	ble.n	8000f8e <uint8_to_float+0x1e>
		}
	}
	if (status == 0) {
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <uint8_to_float+0x56>
		return -1;
 8000fc2:	4b47      	ldr	r3, [pc, #284]	@ (80010e0 <uint8_to_float+0x170>)
 8000fc4:	e083      	b.n	80010ce <uint8_to_float+0x15e>
	}
	else {
		float tens = 1;
 8000fc6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fca:	617b      	str	r3, [r7, #20]

		if (points == 0) {
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d121      	bne.n	8001016 <uint8_to_float+0xa6>
			for (size_t i= 0; i < num_length; i++) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e019      	b.n	800100c <uint8_to_float+0x9c>
			number += (float)(u8arry[i] - '0');
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	3b30      	subs	r3, #48	@ 0x30
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fea:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff2:	edc7 7a06 	vstr	s15, [r7, #24]
			number *= 10;
 8000ff6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ffa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001002:	edc7 7a06 	vstr	s15, [r7, #24]
			for (size_t i= 0; i < num_length; i++) {
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	3301      	adds	r3, #1
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3e1      	bcc.n	8000fd8 <uint8_to_float+0x68>
 8001014:	e04f      	b.n	80010b6 <uint8_to_float+0x146>
		}
			}
			else {
				for (int i = 0; i <= points + point_length; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e046      	b.n	80010aa <uint8_to_float+0x13a>
				if (i < points) {
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001020:	429a      	cmp	r2, r3
 8001022:	da17      	bge.n	8001054 <uint8_to_float+0xe4>
					number += (float)(u8arry[i] - '0');
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	3b30      	subs	r3, #48	@ 0x30
 800102e:	ee07 3a90 	vmov	s15, r3
 8001032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001036:	ed97 7a06 	vldr	s14, [r7, #24]
 800103a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103e:	edc7 7a06 	vstr	s15, [r7, #24]
					number *= 10;
 8001042:	edd7 7a06 	vldr	s15, [r7, #24]
 8001046:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800104a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800104e:	edc7 7a06 	vstr	s15, [r7, #24]
 8001052:	e027      	b.n	80010a4 <uint8_to_float+0x134>
				}
				else if (i > points) {
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001058:	429a      	cmp	r2, r3
 800105a:	dd1b      	ble.n	8001094 <uint8_to_float+0x124>
					tens /= 10;
 800105c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001060:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001068:	edc7 7a05 	vstr	s15, [r7, #20]
					number += ((float)(u8arry[i] - '0')) * tens;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	3b30      	subs	r3, #48	@ 0x30
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001086:	ed97 7a06 	vldr	s14, [r7, #24]
 800108a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108e:	edc7 7a06 	vstr	s15, [r7, #24]
 8001092:	e007      	b.n	80010a4 <uint8_to_float+0x134>
				}
				else {
					number /= 10;
 8001094:	ed97 7a06 	vldr	s14, [r7, #24]
 8001098:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800109c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a0:	edc7 7a06 	vstr	s15, [r7, #24]
				for (int i = 0; i <= points + point_length; i++) {
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	ddb2      	ble.n	800101c <uint8_to_float+0xac>
				}
				}
			}

		if (points == 0) {
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d107      	bne.n	80010cc <uint8_to_float+0x15c>
			number /= 10;
 80010bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80010c0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80010c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c8:	edc7 7a06 	vstr	s15, [r7, #24]
		}
		return number;
 80010cc:	69bb      	ldr	r3, [r7, #24]
	}

}
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	372c      	adds	r7, #44	@ 0x2c
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	bf800000 	.word	0xbf800000

080010e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	 if (htim==&htim7){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a2c      	ldr	r2, [pc, #176]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d10e      	bne.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x2e>
		 setRightRpm(rpmRight);
 80010f4:	4b2b      	ldr	r3, [pc, #172]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	f000 fa9d 	bl	800163c <setRightRpm>
		 setLeftRpm(rpmLeft);
 8001102:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	eeb0 0a67 	vmov.f32	s0, s15
 800110c:	f000 fa6c 	bl	80015e8 <setLeftRpm>
		cRt[left_Rpm_length+6+right_Rpm_length]='\n';
		HAL_UART_Transmit_DMA(&huart5, cRt, sizeof cRt);

	}

}
 8001110:	e042      	b.n	8001198 <HAL_TIM_PeriodElapsedCallback+0xb4>
	}else if (htim ==&htim9){
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a25      	ldr	r2, [pc, #148]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d13e      	bne.n	8001198 <HAL_TIM_PeriodElapsedCallback+0xb4>
		int right_Rpm_length=0,left_Rpm_length=0;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
		cRt[0]='l';
 8001122:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001124:	226c      	movs	r2, #108	@ 0x6c
 8001126:	701a      	strb	r2, [r3, #0]
		cRt[1]=':';
 8001128:	4b21      	ldr	r3, [pc, #132]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800112a:	223a      	movs	r2, #58	@ 0x3a
 800112c:	705a      	strb	r2, [r3, #1]
		left_Rpm_length=float_to_uint8_arry(cRt+2, currentRpm_left, 2);
 800112e:	4a21      	ldr	r2, [pc, #132]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001130:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	2102      	movs	r1, #2
 8001138:	eeb0 0a67 	vmov.f32	s0, s15
 800113c:	4610      	mov	r0, r2
 800113e:	f7ff fe47 	bl	8000dd0 <float_to_uint8_arry>
 8001142:	60b8      	str	r0, [r7, #8]
		cRt[left_Rpm_length+3]=' ';
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	3303      	adds	r3, #3
 8001148:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800114a:	2120      	movs	r1, #32
 800114c:	54d1      	strb	r1, [r2, r3]
		cRt[left_Rpm_length+4]='r';
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	3304      	adds	r3, #4
 8001152:	4a17      	ldr	r2, [pc, #92]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001154:	2172      	movs	r1, #114	@ 0x72
 8001156:	54d1      	strb	r1, [r2, r3]
		cRt[left_Rpm_length+5]=':';
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	3305      	adds	r3, #5
 800115c:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800115e:	213a      	movs	r1, #58	@ 0x3a
 8001160:	54d1      	strb	r1, [r2, r3]
		right_Rpm_length=float_to_uint8_arry(cRt+left_Rpm_length+6, currentRpm_right, 2);
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3306      	adds	r3, #6
 8001166:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001168:	4413      	add	r3, r2
 800116a:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800116c:	edd2 7a00 	vldr	s15, [r2]
 8001170:	2102      	movs	r1, #2
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fe2a 	bl	8000dd0 <float_to_uint8_arry>
 800117c:	60f8      	str	r0, [r7, #12]
		cRt[left_Rpm_length+6+right_Rpm_length]='\n';
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1d9a      	adds	r2, r3, #6
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4413      	add	r3, r2
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001188:	210a      	movs	r1, #10
 800118a:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit_DMA(&huart5, cRt, sizeof cRt);
 800118c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001190:	4907      	ldr	r1, [pc, #28]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001192:	480b      	ldr	r0, [pc, #44]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001194:	f004 fa90 	bl	80056b8 <HAL_UART_Transmit_DMA>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200003a4 	.word	0x200003a4
 80011a4:	200001b0 	.word	0x200001b0
 80011a8:	200001b4 	.word	0x200001b4
 80011ac:	20000434 	.word	0x20000434
 80011b0:	200000a8 	.word	0x200000a8
 80011b4:	200000aa 	.word	0x200000aa
 80011b8:	200001a8 	.word	0x200001a8
 80011bc:	200001ac 	.word	0x200001ac
 80011c0:	200004c4 	.word	0x200004c4

080011c4 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){//需要在main里启动接收函数
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
	if(huart==&huart5){
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a4e      	ldr	r2, [pc, #312]	@ (800130c <HAL_UARTEx_RxEventCallback+0x148>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	f040 8095 	bne.w	8001304 <HAL_UARTEx_RxEventCallback+0x140>
		if (rxData[0]=='w'||rxData[0]=='s'||rxData[0]=='d'||rxData[0]=='a'){//数据形式应该是“w1000”这样的
 80011da:	4b4d      	ldr	r3, [pc, #308]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x14c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b77      	cmp	r3, #119	@ 0x77
 80011e0:	d00b      	beq.n	80011fa <HAL_UARTEx_RxEventCallback+0x36>
 80011e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x14c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b73      	cmp	r3, #115	@ 0x73
 80011e8:	d007      	beq.n	80011fa <HAL_UARTEx_RxEventCallback+0x36>
 80011ea:	4b49      	ldr	r3, [pc, #292]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x14c>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b64      	cmp	r3, #100	@ 0x64
 80011f0:	d003      	beq.n	80011fa <HAL_UARTEx_RxEventCallback+0x36>
 80011f2:	4b47      	ldr	r3, [pc, #284]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x14c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b61      	cmp	r3, #97	@ 0x61
 80011f8:	d119      	bne.n	800122e <HAL_UARTEx_RxEventCallback+0x6a>
		setDirection(rxData[0]);
 80011fa:	4b45      	ldr	r3, [pc, #276]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x14c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fc36 	bl	8001a70 <setDirection>
		rpmLeft=uint8_to_float(rxData+1,0);
 8001204:	4b43      	ldr	r3, [pc, #268]	@ (8001314 <HAL_UARTEx_RxEventCallback+0x150>)
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff feb1 	bl	8000f70 <uint8_to_float>
 800120e:	eef0 7a40 	vmov.f32	s15, s0
 8001212:	4b41      	ldr	r3, [pc, #260]	@ (8001318 <HAL_UARTEx_RxEventCallback+0x154>)
 8001214:	edc3 7a00 	vstr	s15, [r3]
		rpmRight=uint8_to_float(rxData+1,0);
 8001218:	4b3e      	ldr	r3, [pc, #248]	@ (8001314 <HAL_UARTEx_RxEventCallback+0x150>)
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fea7 	bl	8000f70 <uint8_to_float>
 8001222:	eef0 7a40 	vmov.f32	s15, s0
 8001226:	4b3d      	ldr	r3, [pc, #244]	@ (800131c <HAL_UARTEx_RxEventCallback+0x158>)
 8001228:	edc3 7a00 	vstr	s15, [r3]
 800122c:	e038      	b.n	80012a0 <HAL_UARTEx_RxEventCallback+0xdc>
		}else if (rxData[0]=='P'){//数据形式应该是"p0.5"这样的
 800122e:	4b38      	ldr	r3, [pc, #224]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b50      	cmp	r3, #80	@ 0x50
 8001234:	d10a      	bne.n	800124c <HAL_UARTEx_RxEventCallback+0x88>
			kp=uint8_to_float(rxData+1,2);
 8001236:	4b37      	ldr	r3, [pc, #220]	@ (8001314 <HAL_UARTEx_RxEventCallback+0x150>)
 8001238:	2102      	movs	r1, #2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe98 	bl	8000f70 <uint8_to_float>
 8001240:	eef0 7a40 	vmov.f32	s15, s0
 8001244:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
 800124a:	e029      	b.n	80012a0 <HAL_UARTEx_RxEventCallback+0xdc>
		}else if (rxData[0]=='I'){
 800124c:	4b30      	ldr	r3, [pc, #192]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x14c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b49      	cmp	r3, #73	@ 0x49
 8001252:	d10a      	bne.n	800126a <HAL_UARTEx_RxEventCallback+0xa6>
			ki=uint8_to_float(rxData+1,2);
 8001254:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <HAL_UARTEx_RxEventCallback+0x150>)
 8001256:	2102      	movs	r1, #2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fe89 	bl	8000f70 <uint8_to_float>
 800125e:	eef0 7a40 	vmov.f32	s15, s0
 8001262:	4b30      	ldr	r3, [pc, #192]	@ (8001324 <HAL_UARTEx_RxEventCallback+0x160>)
 8001264:	edc3 7a00 	vstr	s15, [r3]
 8001268:	e01a      	b.n	80012a0 <HAL_UARTEx_RxEventCallback+0xdc>
		}else if (rxData[0]=='D'){
 800126a:	4b29      	ldr	r3, [pc, #164]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x14c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b44      	cmp	r3, #68	@ 0x44
 8001270:	d10a      	bne.n	8001288 <HAL_UARTEx_RxEventCallback+0xc4>
			kd=uint8_to_float(rxData+1,2);
 8001272:	4b28      	ldr	r3, [pc, #160]	@ (8001314 <HAL_UARTEx_RxEventCallback+0x150>)
 8001274:	2102      	movs	r1, #2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fe7a 	bl	8000f70 <uint8_to_float>
 800127c:	eef0 7a40 	vmov.f32	s15, s0
 8001280:	4b29      	ldr	r3, [pc, #164]	@ (8001328 <HAL_UARTEx_RxEventCallback+0x164>)
 8001282:	edc3 7a00 	vstr	s15, [r3]
 8001286:	e00b      	b.n	80012a0 <HAL_UARTEx_RxEventCallback+0xdc>
		}else if (rxData[0]=='q'){
 8001288:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x14c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b71      	cmp	r3, #113	@ 0x71
 800128e:	d107      	bne.n	80012a0 <HAL_UARTEx_RxEventCallback+0xdc>
			rpmLeft=0;
 8001290:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <HAL_UARTEx_RxEventCallback+0x154>)
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
			rpmRight=0;
 8001298:	4b20      	ldr	r3, [pc, #128]	@ (800131c <HAL_UARTEx_RxEventCallback+0x158>)
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
			/*HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);*/
		}
		uint8_t message[]="Order Received!";
 80012a0:	4b22      	ldr	r3, [pc, #136]	@ (800132c <HAL_UARTEx_RxEventCallback+0x168>)
 80012a2:	f107 0408 	add.w	r4, r7, #8
 80012a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		//float_to_uint8_arry(message,pulseLeft,0);
		//float_to_uint8_arry(message+4,pulseRight,0);
		HAL_UART_Transmit_DMA(&huart5, message, sizeof message);
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	2210      	movs	r2, #16
 80012b2:	4619      	mov	r1, r3
 80012b4:	4815      	ldr	r0, [pc, #84]	@ (800130c <HAL_UARTEx_RxEventCallback+0x148>)
 80012b6:	f004 f9ff 	bl	80056b8 <HAL_UART_Transmit_DMA>
		memset(rxData,0,sizeof rxData);
 80012ba:	2232      	movs	r2, #50	@ 0x32
 80012bc:	2100      	movs	r1, #0
 80012be:	4814      	ldr	r0, [pc, #80]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x14c>)
 80012c0:	f005 fd70 	bl	8006da4 <memset>
		rxData[0]=0;
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x14c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		leftError=0;rightError=0;error_last_left = 0;error_before_left= 0;error_last_right = 0;error_before_right = 0;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_UARTEx_RxEventCallback+0x16c>)
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x170>)
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x174>)
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	4b16      	ldr	r3, [pc, #88]	@ (800133c <HAL_UARTEx_RxEventCallback+0x178>)
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <HAL_UARTEx_RxEventCallback+0x17c>)
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <HAL_UARTEx_RxEventCallback+0x180>)
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxData, sizeof rxData);
 80012fa:	2232      	movs	r2, #50	@ 0x32
 80012fc:	4904      	ldr	r1, [pc, #16]	@ (8001310 <HAL_UARTEx_RxEventCallback+0x14c>)
 80012fe:	4803      	ldr	r0, [pc, #12]	@ (800130c <HAL_UARTEx_RxEventCallback+0x148>)
 8001300:	f004 fa4a 	bl	8005798 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

}
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd90      	pop	{r4, r7, pc}
 800130c:	200004c4 	.word	0x200004c4
 8001310:	200001b8 	.word	0x200001b8
 8001314:	200001b9 	.word	0x200001b9
 8001318:	200001b4 	.word	0x200001b4
 800131c:	200001b0 	.word	0x200001b0
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004
 8001328:	20000008 	.word	0x20000008
 800132c:	08006e20 	.word	0x08006e20
 8001330:	20000090 	.word	0x20000090
 8001334:	20000094 	.word	0x20000094
 8001338:	20000098 	.word	0x20000098
 800133c:	2000009c 	.word	0x2000009c
 8001340:	200000a0 	.word	0x200000a0
 8001344:	200000a4 	.word	0x200000a4

08001348 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <MX_DMA_Init+0x6c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a17      	ldr	r2, [pc, #92]	@ (80013b4 <MX_DMA_Init+0x6c>)
 8001358:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <MX_DMA_Init+0x6c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	200b      	movs	r0, #11
 8001370:	f001 fd55 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001374:	200b      	movs	r0, #11
 8001376:	f001 fd6e 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	200d      	movs	r0, #13
 8001380:	f001 fd4d 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001384:	200d      	movs	r0, #13
 8001386:	f001 fd66 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	200f      	movs	r0, #15
 8001390:	f001 fd45 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001394:	200f      	movs	r0, #15
 8001396:	f001 fd5e 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	202f      	movs	r0, #47	@ 0x2f
 80013a0:	f001 fd3d 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80013a4:	202f      	movs	r0, #47	@ 0x2f
 80013a6:	f001 fd56 	bl	8002e56 <HAL_NVIC_EnableIRQ>

}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b26      	ldr	r3, [pc, #152]	@ (800146c <MX_GPIO_Init+0xb4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a25      	ldr	r2, [pc, #148]	@ (800146c <MX_GPIO_Init+0xb4>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b23      	ldr	r3, [pc, #140]	@ (800146c <MX_GPIO_Init+0xb4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <MX_GPIO_Init+0xb4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a1e      	ldr	r2, [pc, #120]	@ (800146c <MX_GPIO_Init+0xb4>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b1c      	ldr	r3, [pc, #112]	@ (800146c <MX_GPIO_Init+0xb4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_GPIO_Init+0xb4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a17      	ldr	r2, [pc, #92]	@ (800146c <MX_GPIO_Init+0xb4>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <MX_GPIO_Init+0xb4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_GPIO_Init+0xb4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a10      	ldr	r2, [pc, #64]	@ (800146c <MX_GPIO_Init+0xb4>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_GPIO_Init+0xb4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN2_Pin|IN3_Pin|IN4_Pin|IN1_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	211e      	movs	r1, #30
 8001442:	480b      	ldr	r0, [pc, #44]	@ (8001470 <MX_GPIO_Init+0xb8>)
 8001444:	f002 fac0 	bl	80039c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = IN2_Pin|IN3_Pin|IN4_Pin|IN1_Pin;
 8001448:	231e      	movs	r3, #30
 800144a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_GPIO_Init+0xb8>)
 8001460:	f002 f916 	bl	8003690 <HAL_GPIO_Init>

}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	@ 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40021000 	.word	0x40021000

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001478:	f001 fb84 	bl	8002b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 f846 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f7ff ff9a 	bl	80013b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001484:	f7ff ff60 	bl	8001348 <MX_DMA_Init>
  MX_TIM2_Init();
 8001488:	f000 fcd2 	bl	8001e30 <MX_TIM2_Init>
  MX_TIM4_Init();
 800148c:	f000 fd70 	bl	8001f70 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001490:	f000 fdc2 	bl	8002018 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001494:	f000 fc14 	bl	8001cc0 <MX_TIM1_Init>
  MX_UART5_Init();
 8001498:	f001 f9a4 	bl	80027e4 <MX_UART5_Init>
  MX_UART4_Init();
 800149c:	f001 f978 	bl	8002790 <MX_UART4_Init>
  MX_TIM7_Init();
 80014a0:	f000 fe72 	bl	8002188 <MX_TIM7_Init>
  MX_TIM3_Init();
 80014a4:	f000 fd18 	bl	8001ed8 <MX_TIM3_Init>
  MX_TIM8_Init();
 80014a8:	f000 fea4 	bl	80021f4 <MX_TIM8_Init>
  MX_TIM6_Init();
 80014ac:	f000 fe36 	bl	800211c <MX_TIM6_Init>
  MX_TIM9_Init();
 80014b0:	f000 ff40 	bl	8002334 <MX_TIM9_Init>
  	/*HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_ALL);//�?????启电机PWM，最�?????255
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_ALL);//�?????启舵机PWM，最�?????1999
  	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);//左轮编码�?????
  	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);//右轮编码�?????
  	HAL_TIM_Base_Start_IT(&htim7);//中断定时器，50ms�?????次中�?????*/
  timersInit();
 80014b4:	f001 f93a 	bl	800272c <timersInit>
  __HAL_TIM_SET_COUNTER(&htim2,32768);
 80014b8:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <main+0x80>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014c0:	625a      	str	r2, [r3, #36]	@ 0x24
   __HAL_TIM_SET_COUNTER(&htim4,32768);
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <main+0x84>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014ca:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxData, sizeof rxData);
 80014cc:	2232      	movs	r2, #50	@ 0x32
 80014ce:	490b      	ldr	r1, [pc, #44]	@ (80014fc <main+0x88>)
 80014d0:	480b      	ldr	r0, [pc, #44]	@ (8001500 <main+0x8c>)
 80014d2:	f004 f961 	bl	8005798 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  setLeftPWM(pulseLeft,TIM_CHANNEL_3);
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <main+0x90>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2108      	movs	r1, #8
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fa8d 	bl	80019fc <setLeftPWM>
	  setRightPWM(pulseRight,TIM_CHANNEL_4);
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <main+0x94>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	210c      	movs	r1, #12
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fa4d 	bl	8001988 <setRightPWM>
	  setLeftPWM(pulseLeft,TIM_CHANNEL_3);
 80014ee:	bf00      	nop
 80014f0:	e7f1      	b.n	80014d6 <main+0x62>
 80014f2:	bf00      	nop
 80014f4:	2000023c 	.word	0x2000023c
 80014f8:	200002cc 	.word	0x200002cc
 80014fc:	200001b8 	.word	0x200001b8
 8001500:	200004c4 	.word	0x200004c4
 8001504:	20000088 	.word	0x20000088
 8001508:	2000008c 	.word	0x2000008c

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b094      	sub	sp, #80	@ 0x50
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	2230      	movs	r2, #48	@ 0x30
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f005 fc42 	bl	8006da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <SystemClock_Config+0xc8>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	4a26      	ldr	r2, [pc, #152]	@ (80015d4 <SystemClock_Config+0xc8>)
 800153a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001540:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <SystemClock_Config+0xc8>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <SystemClock_Config+0xcc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a20      	ldr	r2, [pc, #128]	@ (80015d8 <SystemClock_Config+0xcc>)
 8001556:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <SystemClock_Config+0xcc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001568:	2302      	movs	r3, #2
 800156a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001570:	2310      	movs	r3, #16
 8001572:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001574:	2302      	movs	r3, #2
 8001576:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001578:	2300      	movs	r3, #0
 800157a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800157c:	2308      	movs	r3, #8
 800157e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001580:	2348      	movs	r3, #72	@ 0x48
 8001582:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001584:	2302      	movs	r3, #2
 8001586:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001588:	2304      	movs	r3, #4
 800158a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	4618      	mov	r0, r3
 8001592:	f002 fa33 	bl	80039fc <HAL_RCC_OscConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800159c:	f000 f81e 	bl	80015dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a0:	230f      	movs	r3, #15
 80015a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a4:	2302      	movs	r3, #2
 80015a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2102      	movs	r1, #2
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 fc95 	bl	8003eec <HAL_RCC_ClockConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015c8:	f000 f808 	bl	80015dc <Error_Handler>
  }
}
 80015cc:	bf00      	nop
 80015ce:	3750      	adds	r7, #80	@ 0x50
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <Error_Handler+0x8>

080015e8 <setLeftRpm>:
uint16_t count_num_left_past=-1;
uint16_t count_num_right_past=-1;
extern int countnum_rightcircuance;
extern int countnum_leftcircuance;
extern float currentRpm_left,currentRpm_right;
void setLeftRpm(float rpm){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	ed87 0a01 	vstr	s0, [r7, #4]
	 currentRpm_left=getLeftRpm(&htim2);
 80015f2:	480e      	ldr	r0, [pc, #56]	@ (800162c <setLeftRpm+0x44>)
 80015f4:	f000 f90c 	bl	8001810 <getLeftRpm>
 80015f8:	eef0 7a40 	vmov.f32	s15, s0
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <setLeftRpm+0x48>)
 80015fe:	edc3 7a00 	vstr	s15, [r3]
	pulseLeft+=pidDiffLeft(rpm, currentRpm_left,&leftError);
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <setLeftRpm+0x48>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	480a      	ldr	r0, [pc, #40]	@ (8001634 <setLeftRpm+0x4c>)
 800160a:	eef0 0a67 	vmov.f32	s1, s15
 800160e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001612:	f000 f83d 	bl	8001690 <pidDiffLeft>
 8001616:	4602      	mov	r2, r0
 8001618:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <setLeftRpm+0x50>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4413      	add	r3, r2
 800161e:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <setLeftRpm+0x50>)
 8001620:	6013      	str	r3, [r2, #0]

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000023c 	.word	0x2000023c
 8001630:	200001a8 	.word	0x200001a8
 8001634:	20000090 	.word	0x20000090
 8001638:	20000088 	.word	0x20000088

0800163c <setRightRpm>:
void setRightRpm(float rpm){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	ed87 0a01 	vstr	s0, [r7, #4]
	currentRpm_right=getRightRpm(&htim4);
 8001646:	480e      	ldr	r0, [pc, #56]	@ (8001680 <setRightRpm+0x44>)
 8001648:	f000 f940 	bl	80018cc <getRightRpm>
 800164c:	eef0 7a40 	vmov.f32	s15, s0
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <setRightRpm+0x48>)
 8001652:	edc3 7a00 	vstr	s15, [r3]
	pulseRight+=pidDiffRight(rpm, currentRpm_right,&rightError);
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <setRightRpm+0x48>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	480a      	ldr	r0, [pc, #40]	@ (8001688 <setRightRpm+0x4c>)
 800165e:	eef0 0a67 	vmov.f32	s1, s15
 8001662:	ed97 0a01 	vldr	s0, [r7, #4]
 8001666:	f000 f873 	bl	8001750 <pidDiffRight>
 800166a:	4602      	mov	r2, r0
 800166c:	4b07      	ldr	r3, [pc, #28]	@ (800168c <setRightRpm+0x50>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4413      	add	r3, r2
 8001672:	4a06      	ldr	r2, [pc, #24]	@ (800168c <setRightRpm+0x50>)
 8001674:	6013      	str	r3, [r2, #0]

}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200002cc 	.word	0x200002cc
 8001684:	200001ac 	.word	0x200001ac
 8001688:	20000094 	.word	0x20000094
 800168c:	2000008c 	.word	0x2000008c

08001690 <pidDiffLeft>:
void setPID(char factor,float index){
	if (factor=='p'){kp=index;}
	else if (factor=='i'){ki=index;}
	else if (factor=='d'){kd=index;};
}
int pidDiffLeft(float target,float present,float * erro){
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	ed87 0a03 	vstr	s0, [r7, #12]
 800169a:	edc7 0a02 	vstr	s1, [r7, #8]
 800169e:	6078      	str	r0, [r7, #4]
	float error = target - present;
 80016a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80016a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80016a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ac:	edc7 7a05 	vstr	s15, [r7, #20]

		float pwm_pid=0;
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
		*erro = error;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]
		pwm_pid = kp*(error- error_last_left)+ki* error
 80016bc:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <pidDiffLeft+0xac>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80016c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <pidDiffLeft+0xb0>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <pidDiffLeft+0xb4>)
 80016d6:	edd3 6a00 	vldr	s13, [r3]
 80016da:	edd7 7a05 	vldr	s15, [r7, #20]
 80016de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+kd*( error-2* error_last_left+ error_before_left);
 80016e6:	4b15      	ldr	r3, [pc, #84]	@ (800173c <pidDiffLeft+0xac>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016f0:	edd7 6a05 	vldr	s13, [r7, #20]
 80016f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <pidDiffLeft+0xb8>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <pidDiffLeft+0xbc>)
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	ee66 7aa7 	vmul.f32	s15, s13, s15
		pwm_pid = kp*(error- error_last_left)+ki* error
 800170c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001710:	edc7 7a04 	vstr	s15, [r7, #16]
		 error_before_left =  error_last_left;	  	    // 保存上上次误差
 8001714:	4b09      	ldr	r3, [pc, #36]	@ (800173c <pidDiffLeft+0xac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <pidDiffLeft+0xb8>)
 800171a:	6013      	str	r3, [r2, #0]
		 error_last_left =  error;	              // 保存上次偏差
 800171c:	4a07      	ldr	r2, [pc, #28]	@ (800173c <pidDiffLeft+0xac>)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	6013      	str	r3, [r2, #0]
		 return (int)pwm_pid;
 8001722:	edd7 7a04 	vldr	s15, [r7, #16]
 8001726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172a:	ee17 3a90 	vmov	r3, s15
}
 800172e:	4618      	mov	r0, r3
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000098 	.word	0x20000098
 8001740:	20000000 	.word	0x20000000
 8001744:	20000004 	.word	0x20000004
 8001748:	2000009c 	.word	0x2000009c
 800174c:	20000008 	.word	0x20000008

08001750 <pidDiffRight>:
int pidDiffRight(float target,float present,float * erro){
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	ed87 0a03 	vstr	s0, [r7, #12]
 800175a:	edc7 0a02 	vstr	s1, [r7, #8]
 800175e:	6078      	str	r0, [r7, #4]
	float error = target - present;
 8001760:	ed97 7a03 	vldr	s14, [r7, #12]
 8001764:	edd7 7a02 	vldr	s15, [r7, #8]
 8001768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176c:	edc7 7a05 	vstr	s15, [r7, #20]

		float pwm_pid=0;
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
		*erro = error;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	601a      	str	r2, [r3, #0]
		pwm_pid = kp*(error- error_last_right)+ki* error
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <pidDiffRight+0xac>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ed97 7a05 	vldr	s14, [r7, #20]
 8001786:	ee37 7a67 	vsub.f32	s14, s14, s15
 800178a:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <pidDiffRight+0xb0>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <pidDiffRight+0xb4>)
 8001796:	edd3 6a00 	vldr	s13, [r3]
 800179a:	edd7 7a05 	vldr	s15, [r7, #20]
 800179e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+kd*( error-2* error_last_right+ error_before_right);
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <pidDiffRight+0xac>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017b0:	edd7 6a05 	vldr	s13, [r7, #20]
 80017b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <pidDiffRight+0xb8>)
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <pidDiffRight+0xbc>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
		pwm_pid = kp*(error- error_last_right)+ki* error
 80017cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d0:	edc7 7a04 	vstr	s15, [r7, #16]
		 error_before_right =  error_last_right;	  	    // 保存上上次误差
 80017d4:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <pidDiffRight+0xac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001808 <pidDiffRight+0xb8>)
 80017da:	6013      	str	r3, [r2, #0]
		 error_last_right =  error;	              // 保存上次偏差
 80017dc:	4a07      	ldr	r2, [pc, #28]	@ (80017fc <pidDiffRight+0xac>)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	6013      	str	r3, [r2, #0]
		 return (int)pwm_pid;
 80017e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ea:	ee17 3a90 	vmov	r3, s15
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	200000a0 	.word	0x200000a0
 8001800:	20000000 	.word	0x20000000
 8001804:	20000004 	.word	0x20000004
 8001808:	200000a4 	.word	0x200000a4
 800180c:	20000008 	.word	0x20000008

08001810 <getLeftRpm>:
float getLeftRpm(TIM_HandleTypeDef * htim){
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	uint16_t countnum=0;
 8001818:	2300      	movs	r3, #0
 800181a:	82fb      	strh	r3, [r7, #22]
	if(countnum_leftcircuance!=0){
 800181c:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <getLeftRpm+0xac>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d035      	beq.n	8001890 <getLeftRpm+0x80>
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)){
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b10      	cmp	r3, #16
 8001830:	d10d      	bne.n	800184e <getLeftRpm+0x3e>
		countnum =32768-__HAL_TIM_GET_COUNTER(htim);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001838:	b29a      	uxth	r2, r3
 800183a:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <getLeftRpm+0xb0>)
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	82fb      	strh	r3, [r7, #22]
		count_num_left_past=countnum;
 8001840:	4a20      	ldr	r2, [pc, #128]	@ (80018c4 <getLeftRpm+0xb4>)
 8001842:	8afb      	ldrh	r3, [r7, #22]
 8001844:	8013      	strh	r3, [r2, #0]
		countnum_leftcircuance=1;
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <getLeftRpm+0xac>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	e00c      	b.n	8001868 <getLeftRpm+0x58>
	}else{
		countnum=__HAL_TIM_GET_COUNTER(htim)-32768;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001854:	b29b      	uxth	r3, r3
 8001856:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800185a:	82fb      	strh	r3, [r7, #22]
		count_num_left_past=countnum;
 800185c:	4a19      	ldr	r2, [pc, #100]	@ (80018c4 <getLeftRpm+0xb4>)
 800185e:	8afb      	ldrh	r3, [r7, #22]
 8001860:	8013      	strh	r3, [r2, #0]
		countnum_leftcircuance=1;
 8001862:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <getLeftRpm+0xac>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]
	}
	float rpm;
	rpm = (4*countnum)/3;//读取编码器数�????
 8001868:	8afb      	ldrh	r3, [r7, #22]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4a16      	ldr	r2, [pc, #88]	@ (80018c8 <getLeftRpm+0xb8>)
 800186e:	fb82 1203 	smull	r1, r2, r2, r3
 8001872:	17db      	asrs	r3, r3, #31
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COUNTER(htim,32768);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24
	return rpm;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	e00b      	b.n	80018a8 <getLeftRpm+0x98>
	}
	else{
		float rpm=0;
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
		__HAL_TIM_SET_COUNTER(htim,32768);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800189e:	625a      	str	r2, [r3, #36]	@ 0x24
		countnum_leftcircuance=1;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <getLeftRpm+0xac>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
		return rpm;
 80018a6:	693b      	ldr	r3, [r7, #16]
	}

}
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eeb0 0a67 	vmov.f32	s0, s15
 80018b0:	371c      	adds	r7, #28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200001f0 	.word	0x200001f0
 80018c0:	ffff8000 	.word	0xffff8000
 80018c4:	2000000c 	.word	0x2000000c
 80018c8:	55555556 	.word	0x55555556

080018cc <getRightRpm>:
float getRightRpm(TIM_HandleTypeDef * htim){
 80018cc:	b480      	push	{r7}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	uint16_t countnum=0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	82fb      	strh	r3, [r7, #22]
	if(countnum_rightcircuance!=0){
 80018d8:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <getRightRpm+0xac>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d035      	beq.n	800194c <getRightRpm+0x80>
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)){
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d10d      	bne.n	800190a <getRightRpm+0x3e>
		countnum =32768-__HAL_TIM_GET_COUNTER(htim);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	4b21      	ldr	r3, [pc, #132]	@ (800197c <getRightRpm+0xb0>)
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	82fb      	strh	r3, [r7, #22]
		count_num_right_past=countnum;
 80018fc:	4a20      	ldr	r2, [pc, #128]	@ (8001980 <getRightRpm+0xb4>)
 80018fe:	8afb      	ldrh	r3, [r7, #22]
 8001900:	8013      	strh	r3, [r2, #0]
		countnum_rightcircuance=1;
 8001902:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <getRightRpm+0xac>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e00c      	b.n	8001924 <getRightRpm+0x58>
	}else{
		countnum=__HAL_TIM_GET_COUNTER(htim)-32768;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001910:	b29b      	uxth	r3, r3
 8001912:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8001916:	82fb      	strh	r3, [r7, #22]
		count_num_right_past=countnum;
 8001918:	4a19      	ldr	r2, [pc, #100]	@ (8001980 <getRightRpm+0xb4>)
 800191a:	8afb      	ldrh	r3, [r7, #22]
 800191c:	8013      	strh	r3, [r2, #0]
		countnum_rightcircuance=1;
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <getRightRpm+0xac>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
	}
	float rpm;
	rpm = (4*countnum)/3;//读取编码器数�????
 8001924:	8afb      	ldrh	r3, [r7, #22]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4a16      	ldr	r2, [pc, #88]	@ (8001984 <getRightRpm+0xb8>)
 800192a:	fb82 1203 	smull	r1, r2, r2, r3
 800192e:	17db      	asrs	r3, r3, #31
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193a:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COUNTER(htim,32768);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001946:	625a      	str	r2, [r3, #36]	@ 0x24
	return rpm;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	e00b      	b.n	8001964 <getRightRpm+0x98>
	}
	else{
			float rpm=0;
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
			__HAL_TIM_SET_COUNTER(htim,32768);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800195a:	625a      	str	r2, [r3, #36]	@ 0x24
			countnum_rightcircuance=1;
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <getRightRpm+0xac>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]
			return rpm;
 8001962:	693b      	ldr	r3, [r7, #16]
		}
}
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eeb0 0a67 	vmov.f32	s0, s15
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200001ec 	.word	0x200001ec
 800197c:	ffff8000 	.word	0xffff8000
 8001980:	2000000e 	.word	0x2000000e
 8001984:	55555556 	.word	0x55555556

08001988 <setRightPWM>:
void setRightPWM(int pulse,uint32_t channel){
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	int pwm_pulse;
	if(pulse>0){pwm_pulse=pulse;}else{pwm_pulse=0;};
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	dd02      	ble.n	800199e <setRightPWM+0x16>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	e001      	b.n	80019a2 <setRightPWM+0x1a>
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
	if(pwm_pulse>=719){pwm_pulse=719;};
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80019a8:	4293      	cmp	r3, r2
 80019aa:	dd02      	ble.n	80019b2 <setRightPWM+0x2a>
 80019ac:	f240 23cf 	movw	r3, #719	@ 0x2cf
 80019b0:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d104      	bne.n	80019c2 <setRightPWM+0x3a>
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <setRightPWM+0x70>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80019c0:	e013      	b.n	80019ea <setRightPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d104      	bne.n	80019d2 <setRightPWM+0x4a>
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <setRightPWM+0x70>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80019d0:	e00b      	b.n	80019ea <setRightPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d104      	bne.n	80019e2 <setRightPWM+0x5a>
 80019d8:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <setRightPWM+0x70>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80019e0:	e003      	b.n	80019ea <setRightPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <setRightPWM+0x70>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000314 	.word	0x20000314

080019fc <setLeftPWM>:
void setLeftPWM(int pulse,uint32_t channel){
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
	int pwm_pulse;
	if(pulse>0){pwm_pulse=pulse;}else{pwm_pulse=0;};
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	dd02      	ble.n	8001a12 <setLeftPWM+0x16>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e001      	b.n	8001a16 <setLeftPWM+0x1a>
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
	if(pwm_pulse>=719){pwm_pulse=719;};
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	dd02      	ble.n	8001a26 <setLeftPWM+0x2a>
 8001a20:	f240 23cf 	movw	r3, #719	@ 0x2cf
 8001a24:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d104      	bne.n	8001a36 <setLeftPWM+0x3a>
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <setLeftPWM+0x70>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a34:	e013      	b.n	8001a5e <setLeftPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d104      	bne.n	8001a46 <setLeftPWM+0x4a>
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <setLeftPWM+0x70>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001a44:	e00b      	b.n	8001a5e <setLeftPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d104      	bne.n	8001a56 <setLeftPWM+0x5a>
 8001a4c:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <setLeftPWM+0x70>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001a54:	e003      	b.n	8001a5e <setLeftPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8001a56:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <setLeftPWM+0x70>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000314 	.word	0x20000314

08001a70 <setDirection>:

void setDirection(char dir){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
	if (dir=='w'){
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b77      	cmp	r3, #119	@ 0x77
 8001a7e:	d114      	bne.n	8001aaa <setDirection+0x3a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2102      	movs	r1, #2
 8001a84:	482e      	ldr	r0, [pc, #184]	@ (8001b40 <setDirection+0xd0>)
 8001a86:	f001 ff9f 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	482c      	ldr	r0, [pc, #176]	@ (8001b40 <setDirection+0xd0>)
 8001a90:	f001 ff9a 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2108      	movs	r1, #8
 8001a98:	4829      	ldr	r0, [pc, #164]	@ (8001b40 <setDirection+0xd0>)
 8001a9a:	f001 ff95 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2110      	movs	r1, #16
 8001aa2:	4827      	ldr	r0, [pc, #156]	@ (8001b40 <setDirection+0xd0>)
 8001aa4:	f001 ff90 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
	}
}
 8001aa8:	e046      	b.n	8001b38 <setDirection+0xc8>
	else if (dir=='s'){
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b73      	cmp	r3, #115	@ 0x73
 8001aae:	d114      	bne.n	8001ada <setDirection+0x6a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4822      	ldr	r0, [pc, #136]	@ (8001b40 <setDirection+0xd0>)
 8001ab6:	f001 ff87 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2104      	movs	r1, #4
 8001abe:	4820      	ldr	r0, [pc, #128]	@ (8001b40 <setDirection+0xd0>)
 8001ac0:	f001 ff82 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2108      	movs	r1, #8
 8001ac8:	481d      	ldr	r0, [pc, #116]	@ (8001b40 <setDirection+0xd0>)
 8001aca:	f001 ff7d 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2110      	movs	r1, #16
 8001ad2:	481b      	ldr	r0, [pc, #108]	@ (8001b40 <setDirection+0xd0>)
 8001ad4:	f001 ff78 	bl	80039c8 <HAL_GPIO_WritePin>
}
 8001ad8:	e02e      	b.n	8001b38 <setDirection+0xc8>
	else if (dir=='a'){
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2b61      	cmp	r3, #97	@ 0x61
 8001ade:	d114      	bne.n	8001b0a <setDirection+0x9a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	4816      	ldr	r0, [pc, #88]	@ (8001b40 <setDirection+0xd0>)
 8001ae6:	f001 ff6f 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2104      	movs	r1, #4
 8001aee:	4814      	ldr	r0, [pc, #80]	@ (8001b40 <setDirection+0xd0>)
 8001af0:	f001 ff6a 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2108      	movs	r1, #8
 8001af8:	4811      	ldr	r0, [pc, #68]	@ (8001b40 <setDirection+0xd0>)
 8001afa:	f001 ff65 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	2110      	movs	r1, #16
 8001b02:	480f      	ldr	r0, [pc, #60]	@ (8001b40 <setDirection+0xd0>)
 8001b04:	f001 ff60 	bl	80039c8 <HAL_GPIO_WritePin>
}
 8001b08:	e016      	b.n	8001b38 <setDirection+0xc8>
	else if (dir=='d'){
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b64      	cmp	r3, #100	@ 0x64
 8001b0e:	d113      	bne.n	8001b38 <setDirection+0xc8>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2102      	movs	r1, #2
 8001b14:	480a      	ldr	r0, [pc, #40]	@ (8001b40 <setDirection+0xd0>)
 8001b16:	f001 ff57 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2104      	movs	r1, #4
 8001b1e:	4808      	ldr	r0, [pc, #32]	@ (8001b40 <setDirection+0xd0>)
 8001b20:	f001 ff52 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	2108      	movs	r1, #8
 8001b28:	4805      	ldr	r0, [pc, #20]	@ (8001b40 <setDirection+0xd0>)
 8001b2a:	f001 ff4d 	bl	80039c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2110      	movs	r1, #16
 8001b32:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <setDirection+0xd0>)
 8001b34:	f001 ff48 	bl	80039c8 <HAL_GPIO_WritePin>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	4a0f      	ldr	r2, [pc, #60]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <NMI_Handler+0x4>

08001b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <MemManage_Handler+0x4>

08001bac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bea:	f001 f81d 	bl	8002c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <DMA1_Stream0_IRQHandler+0x10>)
 8001bfa:	f001 fadf 	bl	80031bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200005cc 	.word	0x200005cc

08001c08 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001c0c:	4802      	ldr	r0, [pc, #8]	@ (8001c18 <DMA1_Stream2_IRQHandler+0x10>)
 8001c0e:	f001 fad5 	bl	80031bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000050c 	.word	0x2000050c

08001c1c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001c20:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <DMA1_Stream4_IRQHandler+0x10>)
 8001c22:	f001 facb 	bl	80031bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000056c 	.word	0x2000056c

08001c30 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c34:	4803      	ldr	r0, [pc, #12]	@ (8001c44 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001c36:	f002 fe4f 	bl	80048d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001c3a:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001c3c:	f002 fe4c 	bl	80048d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200001f4 	.word	0x200001f4
 8001c48:	20000434 	.word	0x20000434

08001c4c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <DMA1_Stream7_IRQHandler+0x10>)
 8001c52:	f001 fab3 	bl	80031bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000062c 	.word	0x2000062c

08001c60 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <UART4_IRQHandler+0x10>)
 8001c66:	f003 fdf5 	bl	8005854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000047c 	.word	0x2000047c

08001c74 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001c78:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <UART5_IRQHandler+0x10>)
 8001c7a:	f003 fdeb 	bl	8005854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200004c4 	.word	0x200004c4

08001c88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c8c:	4802      	ldr	r0, [pc, #8]	@ (8001c98 <TIM7_IRQHandler+0x10>)
 8001c8e:	f002 fe23 	bl	80048d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200003a4 	.word	0x200003a4

08001c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <SystemInit+0x20>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <SystemInit+0x20>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b096      	sub	sp, #88	@ 0x58
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	615a      	str	r2, [r3, #20]
 8001cf0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f005 f853 	bl	8006da4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001d00:	4a4a      	ldr	r2, [pc, #296]	@ (8001e2c <MX_TIM1_Init+0x16c>)
 8001d02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001d04:	4b48      	ldr	r3, [pc, #288]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001d06:	2247      	movs	r2, #71	@ 0x47
 8001d08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0a:	4b47      	ldr	r3, [pc, #284]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001d10:	4b45      	ldr	r3, [pc, #276]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001d12:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001d16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d18:	4b43      	ldr	r3, [pc, #268]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d1e:	4b42      	ldr	r3, [pc, #264]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d24:	4b40      	ldr	r3, [pc, #256]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001d26:	2280      	movs	r2, #128	@ 0x80
 8001d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d2a:	483f      	ldr	r0, [pc, #252]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001d2c:	f002 fabe 	bl	80042ac <HAL_TIM_Base_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d36:	f7ff fc51 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d44:	4619      	mov	r1, r3
 8001d46:	4838      	ldr	r0, [pc, #224]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001d48:	f002 ff78 	bl	8004c3c <HAL_TIM_ConfigClockSource>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d52:	f7ff fc43 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d56:	4834      	ldr	r0, [pc, #208]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001d58:	f002 fb68 	bl	800442c <HAL_TIM_PWM_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d62:	f7ff fc3b 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d72:	4619      	mov	r1, r3
 8001d74:	482c      	ldr	r0, [pc, #176]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001d76:	f003 fb6d 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d80:	f7ff fc2c 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d84:	2360      	movs	r3, #96	@ 0x60
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d90:	2300      	movs	r3, #0
 8001d92:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da4:	2200      	movs	r2, #0
 8001da6:	4619      	mov	r1, r3
 8001da8:	481f      	ldr	r0, [pc, #124]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001daa:	f002 fe85 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001db4:	f7ff fc12 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4819      	ldr	r0, [pc, #100]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001dc2:	f002 fe79 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001dcc:	f7ff fc06 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4813      	ldr	r0, [pc, #76]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001dda:	f002 fe6d 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001de4:	f7ff fbfa 	bl	80015dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4807      	ldr	r0, [pc, #28]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001e0c:	f003 fb9e 	bl	800554c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001e16:	f7ff fbe1 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e1a:	4803      	ldr	r0, [pc, #12]	@ (8001e28 <MX_TIM1_Init+0x168>)
 8001e1c:	f000 fbfc 	bl	8002618 <HAL_TIM_MspPostInit>

}
 8001e20:	bf00      	nop
 8001e22:	3758      	adds	r7, #88	@ 0x58
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	200001f4 	.word	0x200001f4
 8001e2c:	40010000 	.word	0x40010000

08001e30 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	@ 0x30
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	2224      	movs	r2, #36	@ 0x24
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 ffb0 	bl	8006da4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001e4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001e60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001e62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001e70:	2280      	movs	r2, #128	@ 0x80
 8001e72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e74:	2303      	movs	r3, #3
 8001e76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480d      	ldr	r0, [pc, #52]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001ea0:	f002 fbe6 	bl	8004670 <HAL_TIM_Encoder_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001eaa:	f7ff fb97 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4806      	ldr	r0, [pc, #24]	@ (8001ed4 <MX_TIM2_Init+0xa4>)
 8001ebc:	f003 faca 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ec6:	f7ff fb89 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	3730      	adds	r7, #48	@ 0x30
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000023c 	.word	0x2000023c

08001ed8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0308 	add.w	r3, r7, #8
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	463b      	mov	r3, r7
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <MX_TIM3_Init+0x90>)
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f6c <MX_TIM3_Init+0x94>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001efa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <MX_TIM3_Init+0x90>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <MX_TIM3_Init+0x90>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <MX_TIM3_Init+0x90>)
 8001f08:	22ff      	movs	r2, #255	@ 0xff
 8001f0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_TIM3_Init+0x90>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <MX_TIM3_Init+0x90>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f18:	4813      	ldr	r0, [pc, #76]	@ (8001f68 <MX_TIM3_Init+0x90>)
 8001f1a:	f002 f9c7 	bl	80042ac <HAL_TIM_Base_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001f24:	f7ff fb5a 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	4619      	mov	r1, r3
 8001f34:	480c      	ldr	r0, [pc, #48]	@ (8001f68 <MX_TIM3_Init+0x90>)
 8001f36:	f002 fe81 	bl	8004c3c <HAL_TIM_ConfigClockSource>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001f40:	f7ff fb4c 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <MX_TIM3_Init+0x90>)
 8001f52:	f003 fa7f 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001f5c:	f7ff fb3e 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f60:	bf00      	nop
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000284 	.word	0x20000284
 8001f6c:	40000400 	.word	0x40000400

08001f70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	@ 0x30
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	2224      	movs	r2, #36	@ 0x24
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 ff10 	bl	8006da4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f8c:	4b20      	ldr	r3, [pc, #128]	@ (8002010 <MX_TIM4_Init+0xa0>)
 8001f8e:	4a21      	ldr	r2, [pc, #132]	@ (8002014 <MX_TIM4_Init+0xa4>)
 8001f90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f92:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <MX_TIM4_Init+0xa0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f98:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <MX_TIM4_Init+0xa0>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <MX_TIM4_Init+0xa0>)
 8001fa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fa4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <MX_TIM4_Init+0xa0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fac:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <MX_TIM4_Init+0xa0>)
 8001fae:	2280      	movs	r2, #128	@ 0x80
 8001fb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	4619      	mov	r1, r3
 8001fdc:	480c      	ldr	r0, [pc, #48]	@ (8002010 <MX_TIM4_Init+0xa0>)
 8001fde:	f002 fb47 	bl	8004670 <HAL_TIM_Encoder_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001fe8:	f7ff faf8 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fec:	2300      	movs	r3, #0
 8001fee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4805      	ldr	r0, [pc, #20]	@ (8002010 <MX_TIM4_Init+0xa0>)
 8001ffa:	f003 fa2b 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002004:	f7ff faea 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	3730      	adds	r7, #48	@ 0x30
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200002cc 	.word	0x200002cc
 8002014:	40000800 	.word	0x40000800

08002018 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08e      	sub	sp, #56	@ 0x38
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	f107 0320 	add.w	r3, r7, #32
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
 8002044:	615a      	str	r2, [r3, #20]
 8002046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002048:	4b32      	ldr	r3, [pc, #200]	@ (8002114 <MX_TIM5_Init+0xfc>)
 800204a:	4a33      	ldr	r2, [pc, #204]	@ (8002118 <MX_TIM5_Init+0x100>)
 800204c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800204e:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <MX_TIM5_Init+0xfc>)
 8002050:	2200      	movs	r2, #0
 8002052:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002054:	4b2f      	ldr	r3, [pc, #188]	@ (8002114 <MX_TIM5_Init+0xfc>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 720-1;
 800205a:	4b2e      	ldr	r3, [pc, #184]	@ (8002114 <MX_TIM5_Init+0xfc>)
 800205c:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8002060:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002062:	4b2c      	ldr	r3, [pc, #176]	@ (8002114 <MX_TIM5_Init+0xfc>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002068:	4b2a      	ldr	r3, [pc, #168]	@ (8002114 <MX_TIM5_Init+0xfc>)
 800206a:	2280      	movs	r2, #128	@ 0x80
 800206c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800206e:	4829      	ldr	r0, [pc, #164]	@ (8002114 <MX_TIM5_Init+0xfc>)
 8002070:	f002 f91c 	bl	80042ac <HAL_TIM_Base_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800207a:	f7ff faaf 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002084:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002088:	4619      	mov	r1, r3
 800208a:	4822      	ldr	r0, [pc, #136]	@ (8002114 <MX_TIM5_Init+0xfc>)
 800208c:	f002 fdd6 	bl	8004c3c <HAL_TIM_ConfigClockSource>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002096:	f7ff faa1 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800209a:	481e      	ldr	r0, [pc, #120]	@ (8002114 <MX_TIM5_Init+0xfc>)
 800209c:	f002 f9c6 	bl	800442c <HAL_TIM_PWM_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80020a6:	f7ff fa99 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020b2:	f107 0320 	add.w	r3, r7, #32
 80020b6:	4619      	mov	r1, r3
 80020b8:	4816      	ldr	r0, [pc, #88]	@ (8002114 <MX_TIM5_Init+0xfc>)
 80020ba:	f003 f9cb 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80020c4:	f7ff fa8a 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c8:	2360      	movs	r3, #96	@ 0x60
 80020ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	2208      	movs	r2, #8
 80020dc:	4619      	mov	r1, r3
 80020de:	480d      	ldr	r0, [pc, #52]	@ (8002114 <MX_TIM5_Init+0xfc>)
 80020e0:	f002 fcea 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80020ea:	f7ff fa77 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	220c      	movs	r2, #12
 80020f2:	4619      	mov	r1, r3
 80020f4:	4807      	ldr	r0, [pc, #28]	@ (8002114 <MX_TIM5_Init+0xfc>)
 80020f6:	f002 fcdf 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002100:	f7ff fa6c 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002104:	4803      	ldr	r0, [pc, #12]	@ (8002114 <MX_TIM5_Init+0xfc>)
 8002106:	f000 fa87 	bl	8002618 <HAL_TIM_MspPostInit>

}
 800210a:	bf00      	nop
 800210c:	3738      	adds	r7, #56	@ 0x38
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000314 	.word	0x20000314
 8002118:	40000c00 	.word	0x40000c00

0800211c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002122:	463b      	mov	r3, r7
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <MX_TIM6_Init+0x64>)
 800212c:	4a15      	ldr	r2, [pc, #84]	@ (8002184 <MX_TIM6_Init+0x68>)
 800212e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 8002130:	4b13      	ldr	r3, [pc, #76]	@ (8002180 <MX_TIM6_Init+0x64>)
 8002132:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002136:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002138:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <MX_TIM6_Init+0x64>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800213e:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <MX_TIM6_Init+0x64>)
 8002140:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002144:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <MX_TIM6_Init+0x64>)
 8002148:	2280      	movs	r2, #128	@ 0x80
 800214a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800214c:	480c      	ldr	r0, [pc, #48]	@ (8002180 <MX_TIM6_Init+0x64>)
 800214e:	f002 f8ad 	bl	80042ac <HAL_TIM_Base_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002158:	f7ff fa40 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	@ (8002180 <MX_TIM6_Init+0x64>)
 800216a:	f003 f973 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002174:	f7ff fa32 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000035c 	.word	0x2000035c
 8002184:	40001000 	.word	0x40001000

08002188 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218e:	463b      	mov	r3, r7
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <MX_TIM7_Init+0x64>)
 8002198:	4a15      	ldr	r2, [pc, #84]	@ (80021f0 <MX_TIM7_Init+0x68>)
 800219a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200-1;
 800219c:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <MX_TIM7_Init+0x64>)
 800219e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80021a2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a4:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <MX_TIM7_Init+0x64>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <MX_TIM7_Init+0x64>)
 80021ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80021b0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <MX_TIM7_Init+0x64>)
 80021b4:	2280      	movs	r2, #128	@ 0x80
 80021b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80021b8:	480c      	ldr	r0, [pc, #48]	@ (80021ec <MX_TIM7_Init+0x64>)
 80021ba:	f002 f877 	bl	80042ac <HAL_TIM_Base_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80021c4:	f7ff fa0a 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c8:	2300      	movs	r3, #0
 80021ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80021d0:	463b      	mov	r3, r7
 80021d2:	4619      	mov	r1, r3
 80021d4:	4805      	ldr	r0, [pc, #20]	@ (80021ec <MX_TIM7_Init+0x64>)
 80021d6:	f003 f93d 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80021e0:	f7ff f9fc 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200003a4 	.word	0x200003a4
 80021f0:	40001400 	.word	0x40001400

080021f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b096      	sub	sp, #88	@ 0x58
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002208:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	611a      	str	r2, [r3, #16]
 8002222:	615a      	str	r2, [r3, #20]
 8002224:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	2220      	movs	r2, #32
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f004 fdb9 	bl	8006da4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002232:	4b3e      	ldr	r3, [pc, #248]	@ (800232c <MX_TIM8_Init+0x138>)
 8002234:	4a3e      	ldr	r2, [pc, #248]	@ (8002330 <MX_TIM8_Init+0x13c>)
 8002236:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002238:	4b3c      	ldr	r3, [pc, #240]	@ (800232c <MX_TIM8_Init+0x138>)
 800223a:	2200      	movs	r2, #0
 800223c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b3b      	ldr	r3, [pc, #236]	@ (800232c <MX_TIM8_Init+0x138>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 720-1;
 8002244:	4b39      	ldr	r3, [pc, #228]	@ (800232c <MX_TIM8_Init+0x138>)
 8002246:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800224a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b37      	ldr	r3, [pc, #220]	@ (800232c <MX_TIM8_Init+0x138>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002252:	4b36      	ldr	r3, [pc, #216]	@ (800232c <MX_TIM8_Init+0x138>)
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002258:	4b34      	ldr	r3, [pc, #208]	@ (800232c <MX_TIM8_Init+0x138>)
 800225a:	2280      	movs	r2, #128	@ 0x80
 800225c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800225e:	4833      	ldr	r0, [pc, #204]	@ (800232c <MX_TIM8_Init+0x138>)
 8002260:	f002 f824 	bl	80042ac <HAL_TIM_Base_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800226a:	f7ff f9b7 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002272:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002274:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002278:	4619      	mov	r1, r3
 800227a:	482c      	ldr	r0, [pc, #176]	@ (800232c <MX_TIM8_Init+0x138>)
 800227c:	f002 fcde 	bl	8004c3c <HAL_TIM_ConfigClockSource>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002286:	f7ff f9a9 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800228a:	4828      	ldr	r0, [pc, #160]	@ (800232c <MX_TIM8_Init+0x138>)
 800228c:	f002 f8ce 	bl	800442c <HAL_TIM_PWM_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002296:	f7ff f9a1 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022a6:	4619      	mov	r1, r3
 80022a8:	4820      	ldr	r0, [pc, #128]	@ (800232c <MX_TIM8_Init+0x138>)
 80022aa:	f003 f8d3 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80022b4:	f7ff f992 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022b8:	2360      	movs	r3, #96	@ 0x60
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022c4:	2300      	movs	r3, #0
 80022c6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022cc:	2300      	movs	r3, #0
 80022ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022d0:	2300      	movs	r3, #0
 80022d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022d8:	2200      	movs	r2, #0
 80022da:	4619      	mov	r1, r3
 80022dc:	4813      	ldr	r0, [pc, #76]	@ (800232c <MX_TIM8_Init+0x138>)
 80022de:	f002 fbeb 	bl	8004ab8 <HAL_TIM_PWM_ConfigChannel>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80022e8:	f7ff f978 	bl	80015dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002304:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	4619      	mov	r1, r3
 800230e:	4807      	ldr	r0, [pc, #28]	@ (800232c <MX_TIM8_Init+0x138>)
 8002310:	f003 f91c 	bl	800554c <HAL_TIMEx_ConfigBreakDeadTime>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800231a:	f7ff f95f 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800231e:	4803      	ldr	r0, [pc, #12]	@ (800232c <MX_TIM8_Init+0x138>)
 8002320:	f000 f97a 	bl	8002618 <HAL_TIM_MspPostInit>

}
 8002324:	bf00      	nop
 8002326:	3758      	adds	r7, #88	@ 0x58
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200003ec 	.word	0x200003ec
 8002330:	40010400 	.word	0x40010400

08002334 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800233a:	463b      	mov	r3, r7
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002346:	4b16      	ldr	r3, [pc, #88]	@ (80023a0 <MX_TIM9_Init+0x6c>)
 8002348:	4a16      	ldr	r2, [pc, #88]	@ (80023a4 <MX_TIM9_Init+0x70>)
 800234a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 7200-1;
 800234c:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <MX_TIM9_Init+0x6c>)
 800234e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002352:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002354:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <MX_TIM9_Init+0x6c>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 800235a:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <MX_TIM9_Init+0x6c>)
 800235c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002360:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002362:	4b0f      	ldr	r3, [pc, #60]	@ (80023a0 <MX_TIM9_Init+0x6c>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002368:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <MX_TIM9_Init+0x6c>)
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800236e:	480c      	ldr	r0, [pc, #48]	@ (80023a0 <MX_TIM9_Init+0x6c>)
 8002370:	f001 ff9c 	bl	80042ac <HAL_TIM_Base_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800237a:	f7ff f92f 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800237e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002382:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002384:	463b      	mov	r3, r7
 8002386:	4619      	mov	r1, r3
 8002388:	4805      	ldr	r0, [pc, #20]	@ (80023a0 <MX_TIM9_Init+0x6c>)
 800238a:	f002 fc57 	bl	8004c3c <HAL_TIM_ConfigClockSource>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002394:	f7ff f922 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000434 	.word	0x20000434
 80023a4:	40014000 	.word	0x40014000

080023a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	@ 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a52      	ldr	r2, [pc, #328]	@ (8002500 <HAL_TIM_Base_MspInit+0x158>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d116      	bne.n	80023e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023be:	4b51      	ldr	r3, [pc, #324]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	4a50      	ldr	r2, [pc, #320]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 3, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2103      	movs	r1, #3
 80023da:	2018      	movs	r0, #24
 80023dc:	f000 fd1f 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80023e0:	2018      	movs	r0, #24
 80023e2:	f000 fd38 	bl	8002e56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80023e6:	e086      	b.n	80024f6 <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM3)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a46      	ldr	r2, [pc, #280]	@ (8002508 <HAL_TIM_Base_MspInit+0x160>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10e      	bne.n	8002410 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
 80023f6:	4b43      	ldr	r3, [pc, #268]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	4a42      	ldr	r2, [pc, #264]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6413      	str	r3, [r2, #64]	@ 0x40
 8002402:	4b40      	ldr	r3, [pc, #256]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	623b      	str	r3, [r7, #32]
 800240c:	6a3b      	ldr	r3, [r7, #32]
}
 800240e:	e072      	b.n	80024f6 <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM5)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a3d      	ldr	r2, [pc, #244]	@ (800250c <HAL_TIM_Base_MspInit+0x164>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10e      	bne.n	8002438 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	4b39      	ldr	r3, [pc, #228]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	4a38      	ldr	r2, [pc, #224]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	6413      	str	r3, [r2, #64]	@ 0x40
 800242a:	4b36      	ldr	r3, [pc, #216]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
}
 8002436:	e05e      	b.n	80024f6 <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM6)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a34      	ldr	r2, [pc, #208]	@ (8002510 <HAL_TIM_Base_MspInit+0x168>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	4b2f      	ldr	r3, [pc, #188]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	4a2e      	ldr	r2, [pc, #184]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 800244c:	f043 0310 	orr.w	r3, r3, #16
 8002450:	6413      	str	r3, [r2, #64]	@ 0x40
 8002452:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	69bb      	ldr	r3, [r7, #24]
}
 800245e:	e04a      	b.n	80024f6 <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM7)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2b      	ldr	r2, [pc, #172]	@ (8002514 <HAL_TIM_Base_MspInit+0x16c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d116      	bne.n	8002498 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	4b25      	ldr	r3, [pc, #148]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	4a24      	ldr	r2, [pc, #144]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 8002474:	f043 0320 	orr.w	r3, r3, #32
 8002478:	6413      	str	r3, [r2, #64]	@ 0x40
 800247a:	4b22      	ldr	r3, [pc, #136]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2101      	movs	r1, #1
 800248a:	2037      	movs	r0, #55	@ 0x37
 800248c:	f000 fcc7 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002490:	2037      	movs	r0, #55	@ 0x37
 8002492:	f000 fce0 	bl	8002e56 <HAL_NVIC_EnableIRQ>
}
 8002496:	e02e      	b.n	80024f6 <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM8)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1e      	ldr	r2, [pc, #120]	@ (8002518 <HAL_TIM_Base_MspInit+0x170>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	4b17      	ldr	r3, [pc, #92]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024aa:	4a16      	ldr	r2, [pc, #88]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024b2:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]
}
 80024be:	e01a      	b.n	80024f6 <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM9)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a15      	ldr	r2, [pc, #84]	@ (800251c <HAL_TIM_Base_MspInit+0x174>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d115      	bne.n	80024f6 <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024da:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_TIM_Base_MspInit+0x15c>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 3, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2103      	movs	r1, #3
 80024ea:	2018      	movs	r0, #24
 80024ec:	f000 fc97 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80024f0:	2018      	movs	r0, #24
 80024f2:	f000 fcb0 	bl	8002e56 <HAL_NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	@ 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40010000 	.word	0x40010000
 8002504:	40023800 	.word	0x40023800
 8002508:	40000400 	.word	0x40000400
 800250c:	40000c00 	.word	0x40000c00
 8002510:	40001000 	.word	0x40001000
 8002514:	40001400 	.word	0x40001400
 8002518:	40010400 	.word	0x40010400
 800251c:	40014000 	.word	0x40014000

08002520 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002540:	d12c      	bne.n	800259c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	4a2f      	ldr	r2, [pc, #188]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xe8>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6413      	str	r3, [r2, #64]	@ 0x40
 8002552:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	4b29      	ldr	r3, [pc, #164]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	4a28      	ldr	r2, [pc, #160]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	@ 0x30
 800256e:	4b26      	ldr	r3, [pc, #152]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800257a:	2322      	movs	r3, #34	@ 0x22
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800258a:	2301      	movs	r3, #1
 800258c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	481d      	ldr	r0, [pc, #116]	@ (800260c <HAL_TIM_Encoder_MspInit+0xec>)
 8002596:	f001 f87b 	bl	8003690 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800259a:	e031      	b.n	8002600 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002610 <HAL_TIM_Encoder_MspInit+0xf0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d12c      	bne.n	8002600 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	4a16      	ldr	r2, [pc, #88]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b6:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025cc:	f043 0308 	orr.w	r3, r3, #8
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80025de:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025f0:	2302      	movs	r3, #2
 80025f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	4806      	ldr	r0, [pc, #24]	@ (8002614 <HAL_TIM_Encoder_MspInit+0xf4>)
 80025fc:	f001 f848 	bl	8003690 <HAL_GPIO_Init>
}
 8002600:	bf00      	nop
 8002602:	3730      	adds	r7, #48	@ 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	40020000 	.word	0x40020000
 8002610:	40000800 	.word	0x40000800
 8002614:	40020c00 	.word	0x40020c00

08002618 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	@ 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a36      	ldr	r2, [pc, #216]	@ (8002710 <HAL_TIM_MspPostInit+0xf8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d11f      	bne.n	800267a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	4b35      	ldr	r3, [pc, #212]	@ (8002714 <HAL_TIM_MspPostInit+0xfc>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	4a34      	ldr	r2, [pc, #208]	@ (8002714 <HAL_TIM_MspPostInit+0xfc>)
 8002644:	f043 0310 	orr.w	r3, r3, #16
 8002648:	6313      	str	r3, [r2, #48]	@ 0x30
 800264a:	4b32      	ldr	r3, [pc, #200]	@ (8002714 <HAL_TIM_MspPostInit+0xfc>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8002656:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 800265a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002668:	2301      	movs	r3, #1
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	4619      	mov	r1, r3
 8002672:	4829      	ldr	r0, [pc, #164]	@ (8002718 <HAL_TIM_MspPostInit+0x100>)
 8002674:	f001 f80c 	bl	8003690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002678:	e046      	b.n	8002708 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a27      	ldr	r2, [pc, #156]	@ (800271c <HAL_TIM_MspPostInit+0x104>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d11e      	bne.n	80026c2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	4b22      	ldr	r3, [pc, #136]	@ (8002714 <HAL_TIM_MspPostInit+0xfc>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	4a21      	ldr	r2, [pc, #132]	@ (8002714 <HAL_TIM_MspPostInit+0xfc>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6313      	str	r3, [r2, #48]	@ 0x30
 8002694:	4b1f      	ldr	r3, [pc, #124]	@ (8002714 <HAL_TIM_MspPostInit+0xfc>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026a0:	230c      	movs	r3, #12
 80026a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026b0:	2302      	movs	r3, #2
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	4819      	ldr	r0, [pc, #100]	@ (8002720 <HAL_TIM_MspPostInit+0x108>)
 80026bc:	f000 ffe8 	bl	8003690 <HAL_GPIO_Init>
}
 80026c0:	e022      	b.n	8002708 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a17      	ldr	r2, [pc, #92]	@ (8002724 <HAL_TIM_MspPostInit+0x10c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d11d      	bne.n	8002708 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <HAL_TIM_MspPostInit+0xfc>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002714 <HAL_TIM_MspPostInit+0xfc>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	6313      	str	r3, [r2, #48]	@ 0x30
 80026dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002714 <HAL_TIM_MspPostInit+0xfc>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026e8:	2340      	movs	r3, #64	@ 0x40
 80026ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026f8:	2303      	movs	r3, #3
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4619      	mov	r1, r3
 8002702:	4809      	ldr	r0, [pc, #36]	@ (8002728 <HAL_TIM_MspPostInit+0x110>)
 8002704:	f000 ffc4 	bl	8003690 <HAL_GPIO_Init>
}
 8002708:	bf00      	nop
 800270a:	3728      	adds	r7, #40	@ 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40010000 	.word	0x40010000
 8002714:	40023800 	.word	0x40023800
 8002718:	40021000 	.word	0x40021000
 800271c:	40000c00 	.word	0x40000c00
 8002720:	40020000 	.word	0x40020000
 8002724:	40010400 	.word	0x40010400
 8002728:	40020800 	.word	0x40020800

0800272c <timersInit>:
 *
 *  Created on: Jul 21, 2024
 *      Author: 25138
 */
#include "timersInit.h"
void timersInit(){
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8002730:	2108      	movs	r1, #8
 8002732:	4811      	ldr	r0, [pc, #68]	@ (8002778 <timersInit+0x4c>)
 8002734:	f001 fed4 	bl	80044e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);//开启电机PWM，最值255
 8002738:	210c      	movs	r1, #12
 800273a:	480f      	ldr	r0, [pc, #60]	@ (8002778 <timersInit+0x4c>)
 800273c:	f001 fed0 	bl	80044e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002740:	2100      	movs	r1, #0
 8002742:	480e      	ldr	r0, [pc, #56]	@ (800277c <timersInit+0x50>)
 8002744:	f001 fecc 	bl	80044e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002748:	2104      	movs	r1, #4
 800274a:	480c      	ldr	r0, [pc, #48]	@ (800277c <timersInit+0x50>)
 800274c:	f001 fec8 	bl	80044e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);//开启舵机PWM，最值1999
 8002750:	2108      	movs	r1, #8
 8002752:	480a      	ldr	r0, [pc, #40]	@ (800277c <timersInit+0x50>)
 8002754:	f001 fec4 	bl	80044e0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);//左轮编码器
 8002758:	213c      	movs	r1, #60	@ 0x3c
 800275a:	4809      	ldr	r0, [pc, #36]	@ (8002780 <timersInit+0x54>)
 800275c:	f002 f82e 	bl	80047bc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);//右轮编码器
 8002760:	213c      	movs	r1, #60	@ 0x3c
 8002762:	4808      	ldr	r0, [pc, #32]	@ (8002784 <timersInit+0x58>)
 8002764:	f002 f82a 	bl	80047bc <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim7);//中断定时器，50ms一次中断
 8002768:	4807      	ldr	r0, [pc, #28]	@ (8002788 <timersInit+0x5c>)
 800276a:	f001 fdef 	bl	800434c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);
 800276e:	4807      	ldr	r0, [pc, #28]	@ (800278c <timersInit+0x60>)
 8002770:	f001 fdec 	bl	800434c <HAL_TIM_Base_Start_IT>



}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000314 	.word	0x20000314
 800277c:	200001f4 	.word	0x200001f4
 8002780:	2000023c 	.word	0x2000023c
 8002784:	200002cc 	.word	0x200002cc
 8002788:	200003a4 	.word	0x200003a4
 800278c:	20000434 	.word	0x20000434

08002790 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <MX_UART4_Init+0x4c>)
 8002796:	4a12      	ldr	r2, [pc, #72]	@ (80027e0 <MX_UART4_Init+0x50>)
 8002798:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <MX_UART4_Init+0x4c>)
 800279c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <MX_UART4_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <MX_UART4_Init+0x4c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027ae:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <MX_UART4_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027b4:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <MX_UART4_Init+0x4c>)
 80027b6:	220c      	movs	r2, #12
 80027b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ba:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <MX_UART4_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c0:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <MX_UART4_Init+0x4c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027c6:	4805      	ldr	r0, [pc, #20]	@ (80027dc <MX_UART4_Init+0x4c>)
 80027c8:	f002 ff26 	bl	8005618 <HAL_UART_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80027d2:	f7fe ff03 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000047c 	.word	0x2000047c
 80027e0:	40004c00 	.word	0x40004c00

080027e4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80027e8:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <MX_UART5_Init+0x4c>)
 80027ea:	4a12      	ldr	r2, [pc, #72]	@ (8002834 <MX_UART5_Init+0x50>)
 80027ec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80027ee:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <MX_UART5_Init+0x4c>)
 80027f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80027f4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80027f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <MX_UART5_Init+0x4c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80027fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <MX_UART5_Init+0x4c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002802:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <MX_UART5_Init+0x4c>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <MX_UART5_Init+0x4c>)
 800280a:	220c      	movs	r2, #12
 800280c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280e:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <MX_UART5_Init+0x4c>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <MX_UART5_Init+0x4c>)
 8002816:	2200      	movs	r2, #0
 8002818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800281a:	4805      	ldr	r0, [pc, #20]	@ (8002830 <MX_UART5_Init+0x4c>)
 800281c:	f002 fefc 	bl	8005618 <HAL_UART_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002826:	f7fe fed9 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200004c4 	.word	0x200004c4
 8002834:	40005000 	.word	0x40005000

08002838 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	@ 0x30
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a4a      	ldr	r2, [pc, #296]	@ (8002980 <HAL_UART_MspInit+0x148>)
 8002856:	4293      	cmp	r3, r2
 8002858:	f040 80a0 	bne.w	800299c <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	4b48      	ldr	r3, [pc, #288]	@ (8002984 <HAL_UART_MspInit+0x14c>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	4a47      	ldr	r2, [pc, #284]	@ (8002984 <HAL_UART_MspInit+0x14c>)
 8002866:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800286a:	6413      	str	r3, [r2, #64]	@ 0x40
 800286c:	4b45      	ldr	r3, [pc, #276]	@ (8002984 <HAL_UART_MspInit+0x14c>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	4b41      	ldr	r3, [pc, #260]	@ (8002984 <HAL_UART_MspInit+0x14c>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	4a40      	ldr	r2, [pc, #256]	@ (8002984 <HAL_UART_MspInit+0x14c>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	6313      	str	r3, [r2, #48]	@ 0x30
 8002888:	4b3e      	ldr	r3, [pc, #248]	@ (8002984 <HAL_UART_MspInit+0x14c>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002894:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a2:	2303      	movs	r3, #3
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028a6:	2308      	movs	r3, #8
 80028a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	4619      	mov	r1, r3
 80028b0:	4835      	ldr	r0, [pc, #212]	@ (8002988 <HAL_UART_MspInit+0x150>)
 80028b2:	f000 feed 	bl	8003690 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80028b6:	4b35      	ldr	r3, [pc, #212]	@ (800298c <HAL_UART_MspInit+0x154>)
 80028b8:	4a35      	ldr	r2, [pc, #212]	@ (8002990 <HAL_UART_MspInit+0x158>)
 80028ba:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80028bc:	4b33      	ldr	r3, [pc, #204]	@ (800298c <HAL_UART_MspInit+0x154>)
 80028be:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028c2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028c4:	4b31      	ldr	r3, [pc, #196]	@ (800298c <HAL_UART_MspInit+0x154>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ca:	4b30      	ldr	r3, [pc, #192]	@ (800298c <HAL_UART_MspInit+0x154>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028d0:	4b2e      	ldr	r3, [pc, #184]	@ (800298c <HAL_UART_MspInit+0x154>)
 80028d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d8:	4b2c      	ldr	r3, [pc, #176]	@ (800298c <HAL_UART_MspInit+0x154>)
 80028da:	2200      	movs	r2, #0
 80028dc:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028de:	4b2b      	ldr	r3, [pc, #172]	@ (800298c <HAL_UART_MspInit+0x154>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80028e4:	4b29      	ldr	r3, [pc, #164]	@ (800298c <HAL_UART_MspInit+0x154>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ea:	4b28      	ldr	r3, [pc, #160]	@ (800298c <HAL_UART_MspInit+0x154>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f0:	4b26      	ldr	r3, [pc, #152]	@ (800298c <HAL_UART_MspInit+0x154>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80028f6:	4825      	ldr	r0, [pc, #148]	@ (800298c <HAL_UART_MspInit+0x154>)
 80028f8:	f000 fac8 	bl	8002e8c <HAL_DMA_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002902:	f7fe fe6b 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a20      	ldr	r2, [pc, #128]	@ (800298c <HAL_UART_MspInit+0x154>)
 800290a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800290c:	4a1f      	ldr	r2, [pc, #124]	@ (800298c <HAL_UART_MspInit+0x154>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 8002914:	4a20      	ldr	r2, [pc, #128]	@ (8002998 <HAL_UART_MspInit+0x160>)
 8002916:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002918:	4b1e      	ldr	r3, [pc, #120]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 800291a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800291e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002920:	4b1c      	ldr	r3, [pc, #112]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 8002922:	2240      	movs	r2, #64	@ 0x40
 8002924:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002926:	4b1b      	ldr	r3, [pc, #108]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 8002928:	2200      	movs	r2, #0
 800292a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800292c:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 800292e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002932:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002934:	4b17      	ldr	r3, [pc, #92]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 8002936:	2200      	movs	r2, #0
 8002938:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002940:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002946:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 8002948:	2200      	movs	r2, #0
 800294a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 800294e:	2200      	movs	r2, #0
 8002950:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002952:	4810      	ldr	r0, [pc, #64]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 8002954:	f000 fa9a 	bl	8002e8c <HAL_DMA_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800295e:	f7fe fe3d 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 8002966:	639a      	str	r2, [r3, #56]	@ 0x38
 8002968:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <HAL_UART_MspInit+0x15c>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2102      	movs	r1, #2
 8002972:	2034      	movs	r0, #52	@ 0x34
 8002974:	f000 fa53 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002978:	2034      	movs	r0, #52	@ 0x34
 800297a:	f000 fa6c 	bl	8002e56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800297e:	e0c2      	b.n	8002b06 <HAL_UART_MspInit+0x2ce>
 8002980:	40004c00 	.word	0x40004c00
 8002984:	40023800 	.word	0x40023800
 8002988:	40020800 	.word	0x40020800
 800298c:	2000050c 	.word	0x2000050c
 8002990:	40026040 	.word	0x40026040
 8002994:	2000056c 	.word	0x2000056c
 8002998:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5b      	ldr	r2, [pc, #364]	@ (8002b10 <HAL_UART_MspInit+0x2d8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	f040 80af 	bne.w	8002b06 <HAL_UART_MspInit+0x2ce>
    __HAL_RCC_UART5_CLK_ENABLE();
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	4b59      	ldr	r3, [pc, #356]	@ (8002b14 <HAL_UART_MspInit+0x2dc>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	4a58      	ldr	r2, [pc, #352]	@ (8002b14 <HAL_UART_MspInit+0x2dc>)
 80029b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b8:	4b56      	ldr	r3, [pc, #344]	@ (8002b14 <HAL_UART_MspInit+0x2dc>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	4b52      	ldr	r3, [pc, #328]	@ (8002b14 <HAL_UART_MspInit+0x2dc>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029cc:	4a51      	ldr	r2, [pc, #324]	@ (8002b14 <HAL_UART_MspInit+0x2dc>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b14 <HAL_UART_MspInit+0x2dc>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002b14 <HAL_UART_MspInit+0x2dc>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002b14 <HAL_UART_MspInit+0x2dc>)
 80029ea:	f043 0308 	orr.w	r3, r3, #8
 80029ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f0:	4b48      	ldr	r3, [pc, #288]	@ (8002b14 <HAL_UART_MspInit+0x2dc>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a0e:	2308      	movs	r3, #8
 8002a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a12:	f107 031c 	add.w	r3, r7, #28
 8002a16:	4619      	mov	r1, r3
 8002a18:	483f      	ldr	r0, [pc, #252]	@ (8002b18 <HAL_UART_MspInit+0x2e0>)
 8002a1a:	f000 fe39 	bl	8003690 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a2e:	2308      	movs	r3, #8
 8002a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a32:	f107 031c 	add.w	r3, r7, #28
 8002a36:	4619      	mov	r1, r3
 8002a38:	4838      	ldr	r0, [pc, #224]	@ (8002b1c <HAL_UART_MspInit+0x2e4>)
 8002a3a:	f000 fe29 	bl	8003690 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002a3e:	4b38      	ldr	r3, [pc, #224]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a40:	4a38      	ldr	r2, [pc, #224]	@ (8002b24 <HAL_UART_MspInit+0x2ec>)
 8002a42:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002a44:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a46:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a4a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a4c:	4b34      	ldr	r3, [pc, #208]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a52:	4b33      	ldr	r3, [pc, #204]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a58:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a5e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a60:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a66:	4b2e      	ldr	r3, [pc, #184]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a72:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a78:	4b29      	ldr	r3, [pc, #164]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002a7e:	4828      	ldr	r0, [pc, #160]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a80:	f000 fa04 	bl	8002e8c <HAL_DMA_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_UART_MspInit+0x256>
      Error_Handler();
 8002a8a:	f7fe fda7 	bl	80015dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a23      	ldr	r2, [pc, #140]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a94:	4a22      	ldr	r2, [pc, #136]	@ (8002b20 <HAL_UART_MspInit+0x2e8>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8002a9a:	4b23      	ldr	r3, [pc, #140]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002a9c:	4a23      	ldr	r2, [pc, #140]	@ (8002b2c <HAL_UART_MspInit+0x2f4>)
 8002a9e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002aa0:	4b21      	ldr	r3, [pc, #132]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002aa2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002aa6:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002aaa:	2240      	movs	r2, #64	@ 0x40
 8002aac:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aae:	4b1e      	ldr	r3, [pc, #120]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002ab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aba:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac2:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002ac8:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ace:	4b16      	ldr	r3, [pc, #88]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad4:	4b14      	ldr	r3, [pc, #80]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002ada:	4813      	ldr	r0, [pc, #76]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002adc:	f000 f9d6 	bl	8002e8c <HAL_DMA_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8002ae6:	f7fe fd79 	bl	80015dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a0e      	ldr	r2, [pc, #56]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002aee:	639a      	str	r2, [r3, #56]	@ 0x38
 8002af0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <HAL_UART_MspInit+0x2f0>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	2035      	movs	r0, #53	@ 0x35
 8002afc:	f000 f98f 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002b00:	2035      	movs	r0, #53	@ 0x35
 8002b02:	f000 f9a8 	bl	8002e56 <HAL_NVIC_EnableIRQ>
}
 8002b06:	bf00      	nop
 8002b08:	3730      	adds	r7, #48	@ 0x30
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40005000 	.word	0x40005000
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40020c00 	.word	0x40020c00
 8002b20:	200005cc 	.word	0x200005cc
 8002b24:	40026010 	.word	0x40026010
 8002b28:	2000062c 	.word	0x2000062c
 8002b2c:	400260b8 	.word	0x400260b8

08002b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b34:	f7ff f8b2 	bl	8001c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b38:	480c      	ldr	r0, [pc, #48]	@ (8002b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b3a:	490d      	ldr	r1, [pc, #52]	@ (8002b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b40:	e002      	b.n	8002b48 <LoopCopyDataInit>

08002b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b46:	3304      	adds	r3, #4

08002b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b4c:	d3f9      	bcc.n	8002b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b50:	4c0a      	ldr	r4, [pc, #40]	@ (8002b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b54:	e001      	b.n	8002b5a <LoopFillZerobss>

08002b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b58:	3204      	adds	r2, #4

08002b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b5c:	d3fb      	bcc.n	8002b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b5e:	f004 f92f 	bl	8006dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b62:	f7fe fc87 	bl	8001474 <main>
  bx  lr    
 8002b66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b70:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002b74:	08006e70 	.word	0x08006e70
  ldr r2, =_sbss
 8002b78:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002b7c:	200007c8 	.word	0x200007c8

08002b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b80:	e7fe      	b.n	8002b80 <ADC_IRQHandler>
	...

08002b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b88:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <HAL_Init+0x40>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc4 <HAL_Init+0x40>)
 8002b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <HAL_Init+0x40>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc4 <HAL_Init+0x40>)
 8002b9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba0:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <HAL_Init+0x40>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a07      	ldr	r2, [pc, #28]	@ (8002bc4 <HAL_Init+0x40>)
 8002ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bac:	2003      	movs	r0, #3
 8002bae:	f000 f92b 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb2:	200f      	movs	r0, #15
 8002bb4:	f000 f808 	bl	8002bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb8:	f7fe ffc4 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023c00 	.word	0x40023c00

08002bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd0:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_InitTick+0x54>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <HAL_InitTick+0x58>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f943 	bl	8002e72 <HAL_SYSTICK_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00e      	b.n	8002c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b0f      	cmp	r3, #15
 8002bfa:	d80a      	bhi.n	8002c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f000 f90b 	bl	8002e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c08:	4a06      	ldr	r2, [pc, #24]	@ (8002c24 <HAL_InitTick+0x5c>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e000      	b.n	8002c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000010 	.word	0x20000010
 8002c20:	20000018 	.word	0x20000018
 8002c24:	20000014 	.word	0x20000014

08002c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_IncTick+0x20>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <HAL_IncTick+0x24>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4413      	add	r3, r2
 8002c38:	4a04      	ldr	r2, [pc, #16]	@ (8002c4c <HAL_IncTick+0x24>)
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000018 	.word	0x20000018
 8002c4c:	2000068c 	.word	0x2000068c

08002c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return uwTick;
 8002c54:	4b03      	ldr	r3, [pc, #12]	@ (8002c64 <HAL_GetTick+0x14>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	2000068c 	.word	0x2000068c

08002c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c78:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9a:	4a04      	ldr	r2, [pc, #16]	@ (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	60d3      	str	r3, [r2, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb4:	4b04      	ldr	r3, [pc, #16]	@ (8002cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f003 0307 	and.w	r3, r3, #7
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db0b      	blt.n	8002cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4907      	ldr	r1, [pc, #28]	@ (8002d04 <__NVIC_EnableIRQ+0x38>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2001      	movs	r0, #1
 8002cee:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	490c      	ldr	r1, [pc, #48]	@ (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4908      	ldr	r1, [pc, #32]	@ (8002d58 <__NVIC_SetPriority+0x50>)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	@ 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	bf28      	it	cs
 8002d7a:	2304      	movcs	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d902      	bls.n	8002d8c <NVIC_EncodePriority+0x30>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b03      	subs	r3, #3
 8002d8a:	e000      	b.n	8002d8e <NVIC_EncodePriority+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	4313      	orrs	r3, r2
         );
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	@ 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd4:	d301      	bcc.n	8002dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00f      	b.n	8002dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dda:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <SysTick_Config+0x40>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de2:	210f      	movs	r1, #15
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f7ff ff8e 	bl	8002d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <SysTick_Config+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df2:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <SysTick_Config+0x40>)
 8002df4:	2207      	movs	r2, #7
 8002df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	e000e010 	.word	0xe000e010

08002e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff29 	bl	8002c68 <__NVIC_SetPriorityGrouping>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e30:	f7ff ff3e 	bl	8002cb0 <__NVIC_GetPriorityGrouping>
 8002e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f7ff ff8e 	bl	8002d5c <NVIC_EncodePriority>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff5d 	bl	8002d08 <__NVIC_SetPriority>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff31 	bl	8002ccc <__NVIC_EnableIRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ffa2 	bl	8002dc4 <SysTick_Config>
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff feda 	bl	8002c50 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e099      	b.n	8002fdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec8:	e00f      	b.n	8002eea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eca:	f7ff fec1 	bl	8002c50 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d908      	bls.n	8002eea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e078      	b.n	8002fdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e8      	bne.n	8002eca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4b38      	ldr	r3, [pc, #224]	@ (8002fe4 <HAL_DMA_Init+0x158>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d107      	bne.n	8002f54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f023 0307 	bic.w	r3, r3, #7
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d117      	bne.n	8002fae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb01 	bl	8003598 <DMA_CheckFifoParam>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2240      	movs	r2, #64	@ 0x40
 8002fa0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002faa:	2301      	movs	r3, #1
 8002fac:	e016      	b.n	8002fdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fab8 	bl	800352c <DMA_CalcBaseAndBitshift>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc4:	223f      	movs	r2, #63	@ 0x3f
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	f010803f 	.word	0xf010803f

08002fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_DMA_Start_IT+0x26>
 800300a:	2302      	movs	r3, #2
 800300c:	e040      	b.n	8003090 <HAL_DMA_Start_IT+0xa8>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d12f      	bne.n	8003082 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fa4a 	bl	80034d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	223f      	movs	r2, #63	@ 0x3f
 8003042:	409a      	lsls	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0216 	orr.w	r2, r2, #22
 8003056:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0208 	orr.w	r2, r2, #8
 800306e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e005      	b.n	800308e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800308a:	2302      	movs	r3, #2
 800308c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800308e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030a6:	f7ff fdd3 	bl	8002c50 <HAL_GetTick>
 80030aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d008      	beq.n	80030ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2280      	movs	r2, #128	@ 0x80
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e052      	b.n	8003170 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0216 	bic.w	r2, r2, #22
 80030d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_DMA_Abort+0x62>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0208 	bic.w	r2, r2, #8
 8003108:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800311a:	e013      	b.n	8003144 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800311c:	f7ff fd98 	bl	8002c50 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b05      	cmp	r3, #5
 8003128:	d90c      	bls.n	8003144 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2203      	movs	r2, #3
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e015      	b.n	8003170 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e4      	bne.n	800311c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003156:	223f      	movs	r2, #63	@ 0x3f
 8003158:	409a      	lsls	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d004      	beq.n	8003196 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2280      	movs	r2, #128	@ 0x80
 8003190:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e00c      	b.n	80031b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2205      	movs	r2, #5
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003404 <HAL_DMA_IRQHandler+0x248>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a8e      	ldr	r2, [pc, #568]	@ (8003408 <HAL_DMA_IRQHandler+0x24c>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0a9b      	lsrs	r3, r3, #10
 80031d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e6:	2208      	movs	r2, #8
 80031e8:	409a      	lsls	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01a      	beq.n	8003228 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0204 	bic.w	r2, r2, #4
 800320e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003214:	2208      	movs	r2, #8
 8003216:	409a      	lsls	r2, r3
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322c:	2201      	movs	r2, #1
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d012      	beq.n	800325e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324a:	2201      	movs	r2, #1
 800324c:	409a      	lsls	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	f043 0202 	orr.w	r2, r3, #2
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003262:	2204      	movs	r2, #4
 8003264:	409a      	lsls	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d012      	beq.n	8003294 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00b      	beq.n	8003294 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003280:	2204      	movs	r2, #4
 8003282:	409a      	lsls	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328c:	f043 0204 	orr.w	r2, r3, #4
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003298:	2210      	movs	r2, #16
 800329a:	409a      	lsls	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d043      	beq.n	800332c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d03c      	beq.n	800332c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b6:	2210      	movs	r2, #16
 80032b8:	409a      	lsls	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d018      	beq.n	80032fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d108      	bne.n	80032ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d024      	beq.n	800332c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
 80032ea:	e01f      	b.n	800332c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01b      	beq.n	800332c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
 80032fc:	e016      	b.n	800332c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d107      	bne.n	800331c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0208 	bic.w	r2, r2, #8
 800331a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003330:	2220      	movs	r2, #32
 8003332:	409a      	lsls	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 808f 	beq.w	800345c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8087 	beq.w	800345c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003352:	2220      	movs	r2, #32
 8003354:	409a      	lsls	r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b05      	cmp	r3, #5
 8003364:	d136      	bne.n	80033d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0216 	bic.w	r2, r2, #22
 8003374:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003384:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d103      	bne.n	8003396 <HAL_DMA_IRQHandler+0x1da>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0208 	bic.w	r2, r2, #8
 80033a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033aa:	223f      	movs	r2, #63	@ 0x3f
 80033ac:	409a      	lsls	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d07e      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
        }
        return;
 80033d2:	e079      	b.n	80034c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01d      	beq.n	800341e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10d      	bne.n	800340c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d031      	beq.n	800345c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
 8003400:	e02c      	b.n	800345c <HAL_DMA_IRQHandler+0x2a0>
 8003402:	bf00      	nop
 8003404:	20000010 	.word	0x20000010
 8003408:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d023      	beq.n	800345c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
 800341c:	e01e      	b.n	800345c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10f      	bne.n	800344c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0210 	bic.w	r2, r2, #16
 800343a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003460:	2b00      	cmp	r3, #0
 8003462:	d032      	beq.n	80034ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d022      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2205      	movs	r2, #5
 8003474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	3301      	adds	r3, #1
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	429a      	cmp	r2, r3
 8003492:	d307      	bcc.n	80034a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f2      	bne.n	8003488 <HAL_DMA_IRQHandler+0x2cc>
 80034a2:	e000      	b.n	80034a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
 80034c6:	e000      	b.n	80034ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80034c8:	bf00      	nop
    }
  }
}
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b40      	cmp	r3, #64	@ 0x40
 80034fc:	d108      	bne.n	8003510 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800350e:	e007      	b.n	8003520 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	60da      	str	r2, [r3, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3b10      	subs	r3, #16
 800353c:	4a14      	ldr	r2, [pc, #80]	@ (8003590 <DMA_CalcBaseAndBitshift+0x64>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003546:	4a13      	ldr	r2, [pc, #76]	@ (8003594 <DMA_CalcBaseAndBitshift+0x68>)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d909      	bls.n	800356e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003562:	f023 0303 	bic.w	r3, r3, #3
 8003566:	1d1a      	adds	r2, r3, #4
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	659a      	str	r2, [r3, #88]	@ 0x58
 800356c:	e007      	b.n	800357e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003576:	f023 0303 	bic.w	r3, r3, #3
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	aaaaaaab 	.word	0xaaaaaaab
 8003594:	08006e48 	.word	0x08006e48

08003598 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11f      	bne.n	80035f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d856      	bhi.n	8003666 <DMA_CheckFifoParam+0xce>
 80035b8:	a201      	add	r2, pc, #4	@ (adr r2, 80035c0 <DMA_CheckFifoParam+0x28>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035d1 	.word	0x080035d1
 80035c4:	080035e3 	.word	0x080035e3
 80035c8:	080035d1 	.word	0x080035d1
 80035cc:	08003667 	.word	0x08003667
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d046      	beq.n	800366a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e0:	e043      	b.n	800366a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035ea:	d140      	bne.n	800366e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f0:	e03d      	b.n	800366e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035fa:	d121      	bne.n	8003640 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d837      	bhi.n	8003672 <DMA_CheckFifoParam+0xda>
 8003602:	a201      	add	r2, pc, #4	@ (adr r2, 8003608 <DMA_CheckFifoParam+0x70>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	08003619 	.word	0x08003619
 800360c:	0800361f 	.word	0x0800361f
 8003610:	08003619 	.word	0x08003619
 8003614:	08003631 	.word	0x08003631
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e030      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d025      	beq.n	8003676 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362e:	e022      	b.n	8003676 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003634:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003638:	d11f      	bne.n	800367a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800363e:	e01c      	b.n	800367a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d903      	bls.n	800364e <DMA_CheckFifoParam+0xb6>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d003      	beq.n	8003654 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800364c:	e018      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
      break;
 8003652:	e015      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
      break;
 8003664:	e00b      	b.n	800367e <DMA_CheckFifoParam+0xe6>
      break;
 8003666:	bf00      	nop
 8003668:	e00a      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 800366a:	bf00      	nop
 800366c:	e008      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 800366e:	bf00      	nop
 8003670:	e006      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 8003672:	bf00      	nop
 8003674:	e004      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 8003676:	bf00      	nop
 8003678:	e002      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;   
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 800367e:	bf00      	nop
    }
  } 
  
  return status; 
 8003680:	7bfb      	ldrb	r3, [r7, #15]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop

08003690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003690:	b480      	push	{r7}
 8003692:	b089      	sub	sp, #36	@ 0x24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	e16b      	b.n	8003984 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036ac:	2201      	movs	r2, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	f040 815a 	bne.w	800397e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d005      	beq.n	80036e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d130      	bne.n	8003744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003718:	2201      	movs	r2, #1
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 0201 	and.w	r2, r3, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b03      	cmp	r3, #3
 800374e:	d017      	beq.n	8003780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	2203      	movs	r2, #3
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d123      	bne.n	80037d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	08da      	lsrs	r2, r3, #3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3208      	adds	r2, #8
 8003794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	220f      	movs	r2, #15
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	08da      	lsrs	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3208      	adds	r2, #8
 80037ce:	69b9      	ldr	r1, [r7, #24]
 80037d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	2203      	movs	r2, #3
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0203 	and.w	r2, r3, #3
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80b4 	beq.w	800397e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	4b60      	ldr	r3, [pc, #384]	@ (800399c <HAL_GPIO_Init+0x30c>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	4a5f      	ldr	r2, [pc, #380]	@ (800399c <HAL_GPIO_Init+0x30c>)
 8003820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003824:	6453      	str	r3, [r2, #68]	@ 0x44
 8003826:	4b5d      	ldr	r3, [pc, #372]	@ (800399c <HAL_GPIO_Init+0x30c>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003832:	4a5b      	ldr	r2, [pc, #364]	@ (80039a0 <HAL_GPIO_Init+0x310>)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	3302      	adds	r3, #2
 800383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	220f      	movs	r2, #15
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a52      	ldr	r2, [pc, #328]	@ (80039a4 <HAL_GPIO_Init+0x314>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02b      	beq.n	80038b6 <HAL_GPIO_Init+0x226>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a51      	ldr	r2, [pc, #324]	@ (80039a8 <HAL_GPIO_Init+0x318>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d025      	beq.n	80038b2 <HAL_GPIO_Init+0x222>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a50      	ldr	r2, [pc, #320]	@ (80039ac <HAL_GPIO_Init+0x31c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01f      	beq.n	80038ae <HAL_GPIO_Init+0x21e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a4f      	ldr	r2, [pc, #316]	@ (80039b0 <HAL_GPIO_Init+0x320>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d019      	beq.n	80038aa <HAL_GPIO_Init+0x21a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a4e      	ldr	r2, [pc, #312]	@ (80039b4 <HAL_GPIO_Init+0x324>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_GPIO_Init+0x216>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a4d      	ldr	r2, [pc, #308]	@ (80039b8 <HAL_GPIO_Init+0x328>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00d      	beq.n	80038a2 <HAL_GPIO_Init+0x212>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a4c      	ldr	r2, [pc, #304]	@ (80039bc <HAL_GPIO_Init+0x32c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <HAL_GPIO_Init+0x20e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4b      	ldr	r2, [pc, #300]	@ (80039c0 <HAL_GPIO_Init+0x330>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_GPIO_Init+0x20a>
 8003896:	2307      	movs	r3, #7
 8003898:	e00e      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 800389a:	2308      	movs	r3, #8
 800389c:	e00c      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 800389e:	2306      	movs	r3, #6
 80038a0:	e00a      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 80038a2:	2305      	movs	r3, #5
 80038a4:	e008      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 80038a6:	2304      	movs	r3, #4
 80038a8:	e006      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 80038aa:	2303      	movs	r3, #3
 80038ac:	e004      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e002      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_GPIO_Init+0x228>
 80038b6:	2300      	movs	r3, #0
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	f002 0203 	and.w	r2, r2, #3
 80038be:	0092      	lsls	r2, r2, #2
 80038c0:	4093      	lsls	r3, r2
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038c8:	4935      	ldr	r1, [pc, #212]	@ (80039a0 <HAL_GPIO_Init+0x310>)
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	3302      	adds	r3, #2
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d6:	4b3b      	ldr	r3, [pc, #236]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038fa:	4a32      	ldr	r2, [pc, #200]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003900:	4b30      	ldr	r3, [pc, #192]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003924:	4a27      	ldr	r2, [pc, #156]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800392a:	4b26      	ldr	r3, [pc, #152]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800394e:	4a1d      	ldr	r2, [pc, #116]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003954:	4b1b      	ldr	r3, [pc, #108]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003978:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <HAL_GPIO_Init+0x334>)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3301      	adds	r3, #1
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b0f      	cmp	r3, #15
 8003988:	f67f ae90 	bls.w	80036ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3724      	adds	r7, #36	@ 0x24
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	40013800 	.word	0x40013800
 80039a4:	40020000 	.word	0x40020000
 80039a8:	40020400 	.word	0x40020400
 80039ac:	40020800 	.word	0x40020800
 80039b0:	40020c00 	.word	0x40020c00
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40021400 	.word	0x40021400
 80039bc:	40021800 	.word	0x40021800
 80039c0:	40021c00 	.word	0x40021c00
 80039c4:	40013c00 	.word	0x40013c00

080039c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]
 80039d4:	4613      	mov	r3, r2
 80039d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d8:	787b      	ldrb	r3, [r7, #1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039e4:	e003      	b.n	80039ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	041a      	lsls	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	619a      	str	r2, [r3, #24]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e267      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d075      	beq.n	8003b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a1a:	4b88      	ldr	r3, [pc, #544]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d00c      	beq.n	8003a40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a26:	4b85      	ldr	r3, [pc, #532]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d112      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a32:	4b82      	ldr	r3, [pc, #520]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a3e:	d10b      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a40:	4b7e      	ldr	r3, [pc, #504]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d05b      	beq.n	8003b04 <HAL_RCC_OscConfig+0x108>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d157      	bne.n	8003b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e242      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a60:	d106      	bne.n	8003a70 <HAL_RCC_OscConfig+0x74>
 8003a62:	4b76      	ldr	r3, [pc, #472]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a75      	ldr	r2, [pc, #468]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e01d      	b.n	8003aac <HAL_RCC_OscConfig+0xb0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x98>
 8003a7a:	4b70      	ldr	r3, [pc, #448]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a6f      	ldr	r2, [pc, #444]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	4b6d      	ldr	r3, [pc, #436]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a6c      	ldr	r2, [pc, #432]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e00b      	b.n	8003aac <HAL_RCC_OscConfig+0xb0>
 8003a94:	4b69      	ldr	r3, [pc, #420]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a68      	ldr	r2, [pc, #416]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b66      	ldr	r3, [pc, #408]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a65      	ldr	r2, [pc, #404]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d013      	beq.n	8003adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7ff f8cc 	bl	8002c50 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003abc:	f7ff f8c8 	bl	8002c50 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	@ 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e207      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	4b5b      	ldr	r3, [pc, #364]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0xc0>
 8003ada:	e014      	b.n	8003b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7ff f8b8 	bl	8002c50 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7ff f8b4 	bl	8002c50 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	@ 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e1f3      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	4b51      	ldr	r3, [pc, #324]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0xe8>
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d063      	beq.n	8003bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b12:	4b4a      	ldr	r3, [pc, #296]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1e:	4b47      	ldr	r3, [pc, #284]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d11c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2a:	4b44      	ldr	r3, [pc, #272]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d116      	bne.n	8003b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b36:	4b41      	ldr	r3, [pc, #260]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_RCC_OscConfig+0x152>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d001      	beq.n	8003b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e1c7      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4937      	ldr	r1, [pc, #220]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b62:	e03a      	b.n	8003bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d020      	beq.n	8003bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b6c:	4b34      	ldr	r3, [pc, #208]	@ (8003c40 <HAL_RCC_OscConfig+0x244>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7ff f86d 	bl	8002c50 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b7a:	f7ff f869 	bl	8002c50 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e1a8      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b98:	4b28      	ldr	r3, [pc, #160]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4925      	ldr	r1, [pc, #148]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	600b      	str	r3, [r1, #0]
 8003bac:	e015      	b.n	8003bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bae:	4b24      	ldr	r3, [pc, #144]	@ (8003c40 <HAL_RCC_OscConfig+0x244>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7ff f84c 	bl	8002c50 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bbc:	f7ff f848 	bl	8002c50 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e187      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bce:	4b1b      	ldr	r3, [pc, #108]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d036      	beq.n	8003c54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d016      	beq.n	8003c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bee:	4b15      	ldr	r3, [pc, #84]	@ (8003c44 <HAL_RCC_OscConfig+0x248>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7ff f82c 	bl	8002c50 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bfc:	f7ff f828 	bl	8002c50 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e167      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <HAL_RCC_OscConfig+0x240>)
 8003c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x200>
 8003c1a:	e01b      	b.n	8003c54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c1c:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <HAL_RCC_OscConfig+0x248>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c22:	f7ff f815 	bl	8002c50 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c28:	e00e      	b.n	8003c48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c2a:	f7ff f811 	bl	8002c50 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d907      	bls.n	8003c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e150      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	42470000 	.word	0x42470000
 8003c44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c48:	4b88      	ldr	r3, [pc, #544]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1ea      	bne.n	8003c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8097 	beq.w	8003d90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c62:	2300      	movs	r3, #0
 8003c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c66:	4b81      	ldr	r3, [pc, #516]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10f      	bne.n	8003c92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	4b7d      	ldr	r3, [pc, #500]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c82:	4b7a      	ldr	r3, [pc, #488]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c92:	4b77      	ldr	r3, [pc, #476]	@ (8003e70 <HAL_RCC_OscConfig+0x474>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d118      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9e:	4b74      	ldr	r3, [pc, #464]	@ (8003e70 <HAL_RCC_OscConfig+0x474>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a73      	ldr	r2, [pc, #460]	@ (8003e70 <HAL_RCC_OscConfig+0x474>)
 8003ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003caa:	f7fe ffd1 	bl	8002c50 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb2:	f7fe ffcd 	bl	8002c50 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e10c      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8003e70 <HAL_RCC_OscConfig+0x474>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d106      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x2ea>
 8003cd8:	4b64      	ldr	r3, [pc, #400]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cdc:	4a63      	ldr	r2, [pc, #396]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce4:	e01c      	b.n	8003d20 <HAL_RCC_OscConfig+0x324>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x30c>
 8003cee:	4b5f      	ldr	r3, [pc, #380]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf2:	4a5e      	ldr	r2, [pc, #376]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cf4:	f043 0304 	orr.w	r3, r3, #4
 8003cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfe:	4a5b      	ldr	r2, [pc, #364]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d06:	e00b      	b.n	8003d20 <HAL_RCC_OscConfig+0x324>
 8003d08:	4b58      	ldr	r3, [pc, #352]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0c:	4a57      	ldr	r2, [pc, #348]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d14:	4b55      	ldr	r3, [pc, #340]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d18:	4a54      	ldr	r2, [pc, #336]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d1a:	f023 0304 	bic.w	r3, r3, #4
 8003d1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d015      	beq.n	8003d54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d28:	f7fe ff92 	bl	8002c50 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d30:	f7fe ff8e 	bl	8002c50 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e0cb      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d46:	4b49      	ldr	r3, [pc, #292]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0ee      	beq.n	8003d30 <HAL_RCC_OscConfig+0x334>
 8003d52:	e014      	b.n	8003d7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d54:	f7fe ff7c 	bl	8002c50 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5c:	f7fe ff78 	bl	8002c50 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0b5      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d72:	4b3e      	ldr	r3, [pc, #248]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1ee      	bne.n	8003d5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d105      	bne.n	8003d90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d84:	4b39      	ldr	r3, [pc, #228]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	4a38      	ldr	r2, [pc, #224]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80a1 	beq.w	8003edc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d9a:	4b34      	ldr	r3, [pc, #208]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d05c      	beq.n	8003e60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d141      	bne.n	8003e32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4b31      	ldr	r3, [pc, #196]	@ (8003e74 <HAL_RCC_OscConfig+0x478>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fe ff4c 	bl	8002c50 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fe ff48 	bl	8002c50 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e087      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	4b27      	ldr	r3, [pc, #156]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69da      	ldr	r2, [r3, #28]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	019b      	lsls	r3, r3, #6
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	3b01      	subs	r3, #1
 8003df4:	041b      	lsls	r3, r3, #16
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	491b      	ldr	r1, [pc, #108]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e04:	4b1b      	ldr	r3, [pc, #108]	@ (8003e74 <HAL_RCC_OscConfig+0x478>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7fe ff21 	bl	8002c50 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e12:	f7fe ff1d 	bl	8002c50 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e05c      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	4b11      	ldr	r3, [pc, #68]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x416>
 8003e30:	e054      	b.n	8003edc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e32:	4b10      	ldr	r3, [pc, #64]	@ (8003e74 <HAL_RCC_OscConfig+0x478>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e38:	f7fe ff0a 	bl	8002c50 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fe ff06 	bl	8002c50 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e045      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <HAL_RCC_OscConfig+0x470>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x444>
 8003e5e:	e03d      	b.n	8003edc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e038      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40007000 	.word	0x40007000
 8003e74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee8 <HAL_RCC_OscConfig+0x4ec>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d028      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d121      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d11a      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003eae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d111      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d107      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800

08003eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0cc      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f00:	4b68      	ldr	r3, [pc, #416]	@ (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d90c      	bls.n	8003f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b65      	ldr	r3, [pc, #404]	@ (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f16:	4b63      	ldr	r3, [pc, #396]	@ (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0b8      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f40:	4b59      	ldr	r3, [pc, #356]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a58      	ldr	r2, [pc, #352]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f58:	4b53      	ldr	r3, [pc, #332]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a52      	ldr	r2, [pc, #328]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f64:	4b50      	ldr	r3, [pc, #320]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	494d      	ldr	r1, [pc, #308]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d044      	beq.n	800400c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8a:	4b47      	ldr	r3, [pc, #284]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d119      	bne.n	8003fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e07f      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d107      	bne.n	8003fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003faa:	4b3f      	ldr	r3, [pc, #252]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e06f      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fba:	4b3b      	ldr	r3, [pc, #236]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e067      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fca:	4b37      	ldr	r3, [pc, #220]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f023 0203 	bic.w	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4934      	ldr	r1, [pc, #208]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fdc:	f7fe fe38 	bl	8002c50 <HAL_GetTick>
 8003fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe4:	f7fe fe34 	bl	8002c50 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e04f      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 020c 	and.w	r2, r3, #12
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	429a      	cmp	r2, r3
 800400a:	d1eb      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800400c:	4b25      	ldr	r3, [pc, #148]	@ (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d20c      	bcs.n	8004034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b22      	ldr	r3, [pc, #136]	@ (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004022:	4b20      	ldr	r3, [pc, #128]	@ (80040a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e032      	b.n	800409a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004040:	4b19      	ldr	r3, [pc, #100]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4916      	ldr	r1, [pc, #88]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800405e:	4b12      	ldr	r3, [pc, #72]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	490e      	ldr	r1, [pc, #56]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004072:	f000 f821 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 8004076:	4602      	mov	r2, r0
 8004078:	4b0b      	ldr	r3, [pc, #44]	@ (80040a8 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	490a      	ldr	r1, [pc, #40]	@ (80040ac <HAL_RCC_ClockConfig+0x1c0>)
 8004084:	5ccb      	ldrb	r3, [r1, r3]
 8004086:	fa22 f303 	lsr.w	r3, r2, r3
 800408a:	4a09      	ldr	r2, [pc, #36]	@ (80040b0 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800408e:	4b09      	ldr	r3, [pc, #36]	@ (80040b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fd98 	bl	8002bc8 <HAL_InitTick>

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40023c00 	.word	0x40023c00
 80040a8:	40023800 	.word	0x40023800
 80040ac:	08006e30 	.word	0x08006e30
 80040b0:	20000010 	.word	0x20000010
 80040b4:	20000014 	.word	0x20000014

080040b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040bc:	b090      	sub	sp, #64	@ 0x40
 80040be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040c4:	2300      	movs	r3, #0
 80040c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c8:	2300      	movs	r3, #0
 80040ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040d0:	4b59      	ldr	r3, [pc, #356]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d00d      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0x40>
 80040dc:	2b08      	cmp	r3, #8
 80040de:	f200 80a1 	bhi.w	8004224 <HAL_RCC_GetSysClockFreq+0x16c>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0x34>
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d003      	beq.n	80040f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ea:	e09b      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4b53      	ldr	r3, [pc, #332]	@ (800423c <HAL_RCC_GetSysClockFreq+0x184>)
 80040ee:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80040f0:	e09b      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040f2:	4b53      	ldr	r3, [pc, #332]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x188>)
 80040f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040f6:	e098      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x180>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004100:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004102:	4b4d      	ldr	r3, [pc, #308]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x180>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d028      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410e:	4b4a      	ldr	r3, [pc, #296]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x180>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	099b      	lsrs	r3, r3, #6
 8004114:	2200      	movs	r2, #0
 8004116:	623b      	str	r3, [r7, #32]
 8004118:	627a      	str	r2, [r7, #36]	@ 0x24
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004120:	2100      	movs	r1, #0
 8004122:	4b47      	ldr	r3, [pc, #284]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x188>)
 8004124:	fb03 f201 	mul.w	r2, r3, r1
 8004128:	2300      	movs	r3, #0
 800412a:	fb00 f303 	mul.w	r3, r0, r3
 800412e:	4413      	add	r3, r2
 8004130:	4a43      	ldr	r2, [pc, #268]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x188>)
 8004132:	fba0 1202 	umull	r1, r2, r0, r2
 8004136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004138:	460a      	mov	r2, r1
 800413a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800413c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800413e:	4413      	add	r3, r2
 8004140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004144:	2200      	movs	r2, #0
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	61fa      	str	r2, [r7, #28]
 800414a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800414e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004152:	f7fc fcc5 	bl	8000ae0 <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4613      	mov	r3, r2
 800415c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800415e:	e053      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004160:	4b35      	ldr	r3, [pc, #212]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x180>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	099b      	lsrs	r3, r3, #6
 8004166:	2200      	movs	r2, #0
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	617a      	str	r2, [r7, #20]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004172:	f04f 0b00 	mov.w	fp, #0
 8004176:	4652      	mov	r2, sl
 8004178:	465b      	mov	r3, fp
 800417a:	f04f 0000 	mov.w	r0, #0
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	0159      	lsls	r1, r3, #5
 8004184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004188:	0150      	lsls	r0, r2, #5
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	ebb2 080a 	subs.w	r8, r2, sl
 8004192:	eb63 090b 	sbc.w	r9, r3, fp
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041aa:	ebb2 0408 	subs.w	r4, r2, r8
 80041ae:	eb63 0509 	sbc.w	r5, r3, r9
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	00eb      	lsls	r3, r5, #3
 80041bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041c0:	00e2      	lsls	r2, r4, #3
 80041c2:	4614      	mov	r4, r2
 80041c4:	461d      	mov	r5, r3
 80041c6:	eb14 030a 	adds.w	r3, r4, sl
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	eb45 030b 	adc.w	r3, r5, fp
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041de:	4629      	mov	r1, r5
 80041e0:	028b      	lsls	r3, r1, #10
 80041e2:	4621      	mov	r1, r4
 80041e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041e8:	4621      	mov	r1, r4
 80041ea:	028a      	lsls	r2, r1, #10
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f2:	2200      	movs	r2, #0
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	60fa      	str	r2, [r7, #12]
 80041f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041fc:	f7fc fc70 	bl	8000ae0 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4613      	mov	r3, r2
 8004206:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004208:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x180>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	3301      	adds	r3, #1
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004218:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004222:	e002      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004224:	4b05      	ldr	r3, [pc, #20]	@ (800423c <HAL_RCC_GetSysClockFreq+0x184>)
 8004226:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800422a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800422c:	4618      	mov	r0, r3
 800422e:	3740      	adds	r7, #64	@ 0x40
 8004230:	46bd      	mov	sp, r7
 8004232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800
 800423c:	00f42400 	.word	0x00f42400
 8004240:	017d7840 	.word	0x017d7840

08004244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004248:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <HAL_RCC_GetHCLKFreq+0x14>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000010 	.word	0x20000010

0800425c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004260:	f7ff fff0 	bl	8004244 <HAL_RCC_GetHCLKFreq>
 8004264:	4602      	mov	r2, r0
 8004266:	4b05      	ldr	r3, [pc, #20]	@ (800427c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	0a9b      	lsrs	r3, r3, #10
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	4903      	ldr	r1, [pc, #12]	@ (8004280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004272:	5ccb      	ldrb	r3, [r1, r3]
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40023800 	.word	0x40023800
 8004280:	08006e40 	.word	0x08006e40

08004284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004288:	f7ff ffdc 	bl	8004244 <HAL_RCC_GetHCLKFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0b5b      	lsrs	r3, r3, #13
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4903      	ldr	r1, [pc, #12]	@ (80042a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40023800 	.word	0x40023800
 80042a8:	08006e40 	.word	0x08006e40

080042ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e041      	b.n	8004342 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fe f868 	bl	80023a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3304      	adds	r3, #4
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f000 fd96 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d001      	beq.n	8004364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e04e      	b.n	8004402 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a23      	ldr	r2, [pc, #140]	@ (8004410 <HAL_TIM_Base_Start_IT+0xc4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d022      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438e:	d01d      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1f      	ldr	r2, [pc, #124]	@ (8004414 <HAL_TIM_Base_Start_IT+0xc8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d018      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1e      	ldr	r2, [pc, #120]	@ (8004418 <HAL_TIM_Base_Start_IT+0xcc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1c      	ldr	r2, [pc, #112]	@ (800441c <HAL_TIM_Base_Start_IT+0xd0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00e      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004420 <HAL_TIM_Base_Start_IT+0xd4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d009      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a19      	ldr	r2, [pc, #100]	@ (8004424 <HAL_TIM_Base_Start_IT+0xd8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x80>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a18      	ldr	r2, [pc, #96]	@ (8004428 <HAL_TIM_Base_Start_IT+0xdc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d111      	bne.n	80043f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b06      	cmp	r3, #6
 80043dc:	d010      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ee:	e007      	b.n	8004400 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40010000 	.word	0x40010000
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800
 800441c:	40000c00 	.word	0x40000c00
 8004420:	40010400 	.word	0x40010400
 8004424:	40014000 	.word	0x40014000
 8004428:	40001800 	.word	0x40001800

0800442c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e041      	b.n	80044c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f839 	bl	80044ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f000 fcd6 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <HAL_TIM_PWM_Start+0x24>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e022      	b.n	800454a <HAL_TIM_PWM_Start+0x6a>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b04      	cmp	r3, #4
 8004508:	d109      	bne.n	800451e <HAL_TIM_PWM_Start+0x3e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e015      	b.n	800454a <HAL_TIM_PWM_Start+0x6a>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d109      	bne.n	8004538 <HAL_TIM_PWM_Start+0x58>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e008      	b.n	800454a <HAL_TIM_PWM_Start+0x6a>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	bf14      	ite	ne
 8004544:	2301      	movne	r3, #1
 8004546:	2300      	moveq	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e07c      	b.n	800464c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_TIM_PWM_Start+0x82>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004560:	e013      	b.n	800458a <HAL_TIM_PWM_Start+0xaa>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d104      	bne.n	8004572 <HAL_TIM_PWM_Start+0x92>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004570:	e00b      	b.n	800458a <HAL_TIM_PWM_Start+0xaa>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d104      	bne.n	8004582 <HAL_TIM_PWM_Start+0xa2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004580:	e003      	b.n	800458a <HAL_TIM_PWM_Start+0xaa>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2201      	movs	r2, #1
 8004590:	6839      	ldr	r1, [r7, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 ff38 	bl	8005408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a2d      	ldr	r2, [pc, #180]	@ (8004654 <HAL_TIM_PWM_Start+0x174>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d004      	beq.n	80045ac <HAL_TIM_PWM_Start+0xcc>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004658 <HAL_TIM_PWM_Start+0x178>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d101      	bne.n	80045b0 <HAL_TIM_PWM_Start+0xd0>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <HAL_TIM_PWM_Start+0xd2>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a22      	ldr	r2, [pc, #136]	@ (8004654 <HAL_TIM_PWM_Start+0x174>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d022      	beq.n	8004616 <HAL_TIM_PWM_Start+0x136>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d8:	d01d      	beq.n	8004616 <HAL_TIM_PWM_Start+0x136>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1f      	ldr	r2, [pc, #124]	@ (800465c <HAL_TIM_PWM_Start+0x17c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d018      	beq.n	8004616 <HAL_TIM_PWM_Start+0x136>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004660 <HAL_TIM_PWM_Start+0x180>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d013      	beq.n	8004616 <HAL_TIM_PWM_Start+0x136>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004664 <HAL_TIM_PWM_Start+0x184>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00e      	beq.n	8004616 <HAL_TIM_PWM_Start+0x136>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a16      	ldr	r2, [pc, #88]	@ (8004658 <HAL_TIM_PWM_Start+0x178>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_TIM_PWM_Start+0x136>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a18      	ldr	r2, [pc, #96]	@ (8004668 <HAL_TIM_PWM_Start+0x188>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_TIM_PWM_Start+0x136>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a16      	ldr	r2, [pc, #88]	@ (800466c <HAL_TIM_PWM_Start+0x18c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d111      	bne.n	800463a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b06      	cmp	r3, #6
 8004626:	d010      	beq.n	800464a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004638:	e007      	b.n	800464a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40010000 	.word	0x40010000
 8004658:	40010400 	.word	0x40010400
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40014000 	.word	0x40014000
 800466c:	40001800 	.word	0x40001800

08004670 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e097      	b.n	80047b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d106      	bne.n	800469e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7fd ff41 	bl	8002520 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046b4:	f023 0307 	bic.w	r3, r3, #7
 80046b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	4619      	mov	r1, r3
 80046c4:	4610      	mov	r0, r2
 80046c6:	f000 fba9 	bl	8004e1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f2:	f023 0303 	bic.w	r3, r3, #3
 80046f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	4313      	orrs	r3, r2
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004710:	f023 030c 	bic.w	r3, r3, #12
 8004714:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800471c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004720:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	4313      	orrs	r3, r2
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	011a      	lsls	r2, r3, #4
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	031b      	lsls	r3, r3, #12
 8004740:	4313      	orrs	r3, r2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800474e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004756:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	4313      	orrs	r3, r2
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d110      	bne.n	800480e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d102      	bne.n	80047f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80047f2:	7b7b      	ldrb	r3, [r7, #13]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d001      	beq.n	80047fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e069      	b.n	80048d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800480c:	e031      	b.n	8004872 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d110      	bne.n	8004836 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004814:	7bbb      	ldrb	r3, [r7, #14]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d102      	bne.n	8004820 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800481a:	7b3b      	ldrb	r3, [r7, #12]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d001      	beq.n	8004824 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e055      	b.n	80048d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004834:	e01d      	b.n	8004872 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d108      	bne.n	800484e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800483c:	7bbb      	ldrb	r3, [r7, #14]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d105      	bne.n	800484e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004842:	7b7b      	ldrb	r3, [r7, #13]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d102      	bne.n	800484e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004848:	7b3b      	ldrb	r3, [r7, #12]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d001      	beq.n	8004852 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e03e      	b.n	80048d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_TIM_Encoder_Start+0xc4>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b04      	cmp	r3, #4
 800487c:	d008      	beq.n	8004890 <HAL_TIM_Encoder_Start+0xd4>
 800487e:	e00f      	b.n	80048a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2201      	movs	r2, #1
 8004886:	2100      	movs	r1, #0
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fdbd 	bl	8005408 <TIM_CCxChannelCmd>
      break;
 800488e:	e016      	b.n	80048be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2201      	movs	r2, #1
 8004896:	2104      	movs	r1, #4
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fdb5 	bl	8005408 <TIM_CCxChannelCmd>
      break;
 800489e:	e00e      	b.n	80048be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2201      	movs	r2, #1
 80048a6:	2100      	movs	r1, #0
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fdad 	bl	8005408 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2201      	movs	r2, #1
 80048b4:	2104      	movs	r1, #4
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fda6 	bl	8005408 <TIM_CCxChannelCmd>
      break;
 80048bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0201 	orr.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d020      	beq.n	800493c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01b      	beq.n	800493c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0202 	mvn.w	r2, #2
 800490c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa5b 	bl	8004dde <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa4d 	bl	8004dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa5e 	bl	8004df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d020      	beq.n	8004988 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01b      	beq.n	8004988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0204 	mvn.w	r2, #4
 8004958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fa35 	bl	8004dde <HAL_TIM_IC_CaptureCallback>
 8004974:	e005      	b.n	8004982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fa27 	bl	8004dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fa38 	bl	8004df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d020      	beq.n	80049d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01b      	beq.n	80049d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0208 	mvn.w	r2, #8
 80049a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2204      	movs	r2, #4
 80049aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fa0f 	bl	8004dde <HAL_TIM_IC_CaptureCallback>
 80049c0:	e005      	b.n	80049ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fa01 	bl	8004dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fa12 	bl	8004df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d020      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0210 	mvn.w	r2, #16
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2208      	movs	r2, #8
 80049f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f9e9 	bl	8004dde <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f9db 	bl	8004dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f9ec 	bl	8004df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0201 	mvn.w	r2, #1
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc fb50 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fdce 	bl	8005604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00c      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f9bd 	bl	8004e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0220 	mvn.w	r2, #32
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fda0 	bl	80055f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e0ae      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b0c      	cmp	r3, #12
 8004ae2:	f200 809f 	bhi.w	8004c24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8004aec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004b21 	.word	0x08004b21
 8004af0:	08004c25 	.word	0x08004c25
 8004af4:	08004c25 	.word	0x08004c25
 8004af8:	08004c25 	.word	0x08004c25
 8004afc:	08004b61 	.word	0x08004b61
 8004b00:	08004c25 	.word	0x08004c25
 8004b04:	08004c25 	.word	0x08004c25
 8004b08:	08004c25 	.word	0x08004c25
 8004b0c:	08004ba3 	.word	0x08004ba3
 8004b10:	08004c25 	.word	0x08004c25
 8004b14:	08004c25 	.word	0x08004c25
 8004b18:	08004c25 	.word	0x08004c25
 8004b1c:	08004be3 	.word	0x08004be3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fa24 	bl	8004f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0208 	orr.w	r2, r2, #8
 8004b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0204 	bic.w	r2, r2, #4
 8004b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6999      	ldr	r1, [r3, #24]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	619a      	str	r2, [r3, #24]
      break;
 8004b5e:	e064      	b.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fa74 	bl	8005054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6999      	ldr	r1, [r3, #24]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	021a      	lsls	r2, r3, #8
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	619a      	str	r2, [r3, #24]
      break;
 8004ba0:	e043      	b.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fac9 	bl	8005140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0208 	orr.w	r2, r2, #8
 8004bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0204 	bic.w	r2, r2, #4
 8004bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69d9      	ldr	r1, [r3, #28]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	61da      	str	r2, [r3, #28]
      break;
 8004be0:	e023      	b.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fb1d 	bl	8005228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69d9      	ldr	r1, [r3, #28]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	021a      	lsls	r2, r3, #8
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	61da      	str	r2, [r3, #28]
      break;
 8004c22:	e002      	b.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
      break;
 8004c28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_TIM_ConfigClockSource+0x1c>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e0b4      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x186>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c90:	d03e      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0xd4>
 8004c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c96:	f200 8087 	bhi.w	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9e:	f000 8086 	beq.w	8004dae <HAL_TIM_ConfigClockSource+0x172>
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca6:	d87f      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b70      	cmp	r3, #112	@ 0x70
 8004caa:	d01a      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0xa6>
 8004cac:	2b70      	cmp	r3, #112	@ 0x70
 8004cae:	d87b      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b60      	cmp	r3, #96	@ 0x60
 8004cb2:	d050      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x11a>
 8004cb4:	2b60      	cmp	r3, #96	@ 0x60
 8004cb6:	d877      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b50      	cmp	r3, #80	@ 0x50
 8004cba:	d03c      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0xfa>
 8004cbc:	2b50      	cmp	r3, #80	@ 0x50
 8004cbe:	d873      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d058      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x13a>
 8004cc4:	2b40      	cmp	r3, #64	@ 0x40
 8004cc6:	d86f      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b30      	cmp	r3, #48	@ 0x30
 8004cca:	d064      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x15a>
 8004ccc:	2b30      	cmp	r3, #48	@ 0x30
 8004cce:	d86b      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d060      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d867      	bhi.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05c      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x15a>
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d05a      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x15a>
 8004ce0:	e062      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cf2:	f000 fb69 	bl	80053c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	609a      	str	r2, [r3, #8]
      break;
 8004d0e:	e04f      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d20:	f000 fb52 	bl	80053c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d32:	609a      	str	r2, [r3, #8]
      break;
 8004d34:	e03c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d42:	461a      	mov	r2, r3
 8004d44:	f000 fac6 	bl	80052d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2150      	movs	r1, #80	@ 0x50
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fb1f 	bl	8005392 <TIM_ITRx_SetConfig>
      break;
 8004d54:	e02c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d62:	461a      	mov	r2, r3
 8004d64:	f000 fae5 	bl	8005332 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2160      	movs	r1, #96	@ 0x60
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fb0f 	bl	8005392 <TIM_ITRx_SetConfig>
      break;
 8004d74:	e01c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d82:	461a      	mov	r2, r3
 8004d84:	f000 faa6 	bl	80052d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2140      	movs	r1, #64	@ 0x40
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 faff 	bl	8005392 <TIM_ITRx_SetConfig>
      break;
 8004d94:	e00c      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f000 faf6 	bl	8005392 <TIM_ITRx_SetConfig>
      break;
 8004da6:	e003      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dac:	e000      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a46      	ldr	r2, [pc, #280]	@ (8004f48 <TIM_Base_SetConfig+0x12c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d013      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3a:	d00f      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a43      	ldr	r2, [pc, #268]	@ (8004f4c <TIM_Base_SetConfig+0x130>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a42      	ldr	r2, [pc, #264]	@ (8004f50 <TIM_Base_SetConfig+0x134>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d007      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a41      	ldr	r2, [pc, #260]	@ (8004f54 <TIM_Base_SetConfig+0x138>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a40      	ldr	r2, [pc, #256]	@ (8004f58 <TIM_Base_SetConfig+0x13c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d108      	bne.n	8004e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a35      	ldr	r2, [pc, #212]	@ (8004f48 <TIM_Base_SetConfig+0x12c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d02b      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7c:	d027      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a32      	ldr	r2, [pc, #200]	@ (8004f4c <TIM_Base_SetConfig+0x130>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d023      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a31      	ldr	r2, [pc, #196]	@ (8004f50 <TIM_Base_SetConfig+0x134>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01f      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a30      	ldr	r2, [pc, #192]	@ (8004f54 <TIM_Base_SetConfig+0x138>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01b      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2f      	ldr	r2, [pc, #188]	@ (8004f58 <TIM_Base_SetConfig+0x13c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d017      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8004f5c <TIM_Base_SetConfig+0x140>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8004f60 <TIM_Base_SetConfig+0x144>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00f      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8004f64 <TIM_Base_SetConfig+0x148>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f68 <TIM_Base_SetConfig+0x14c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f6c <TIM_Base_SetConfig+0x150>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a29      	ldr	r2, [pc, #164]	@ (8004f70 <TIM_Base_SetConfig+0x154>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d108      	bne.n	8004ee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a10      	ldr	r2, [pc, #64]	@ (8004f48 <TIM_Base_SetConfig+0x12c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d003      	beq.n	8004f14 <TIM_Base_SetConfig+0xf8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a12      	ldr	r2, [pc, #72]	@ (8004f58 <TIM_Base_SetConfig+0x13c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d103      	bne.n	8004f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d105      	bne.n	8004f3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f023 0201 	bic.w	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	611a      	str	r2, [r3, #16]
  }
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40000c00 	.word	0x40000c00
 8004f58:	40010400 	.word	0x40010400
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40014400 	.word	0x40014400
 8004f64:	40014800 	.word	0x40014800
 8004f68:	40001800 	.word	0x40001800
 8004f6c:	40001c00 	.word	0x40001c00
 8004f70:	40002000 	.word	0x40002000

08004f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f023 0201 	bic.w	r2, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0303 	bic.w	r3, r3, #3
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f023 0302 	bic.w	r3, r3, #2
 8004fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a20      	ldr	r2, [pc, #128]	@ (800504c <TIM_OC1_SetConfig+0xd8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_OC1_SetConfig+0x64>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8005050 <TIM_OC1_SetConfig+0xdc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d10c      	bne.n	8004ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 0308 	bic.w	r3, r3, #8
 8004fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f023 0304 	bic.w	r3, r3, #4
 8004ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a15      	ldr	r2, [pc, #84]	@ (800504c <TIM_OC1_SetConfig+0xd8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d003      	beq.n	8005002 <TIM_OC1_SetConfig+0x8e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a14      	ldr	r2, [pc, #80]	@ (8005050 <TIM_OC1_SetConfig+0xdc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d111      	bne.n	8005026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40010000 	.word	0x40010000
 8005050:	40010400 	.word	0x40010400

08005054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f023 0210 	bic.w	r2, r3, #16
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800508a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0320 	bic.w	r3, r3, #32
 800509e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a22      	ldr	r2, [pc, #136]	@ (8005138 <TIM_OC2_SetConfig+0xe4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC2_SetConfig+0x68>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a21      	ldr	r2, [pc, #132]	@ (800513c <TIM_OC2_SetConfig+0xe8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10d      	bne.n	80050d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a17      	ldr	r2, [pc, #92]	@ (8005138 <TIM_OC2_SetConfig+0xe4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_OC2_SetConfig+0x94>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a16      	ldr	r2, [pc, #88]	@ (800513c <TIM_OC2_SetConfig+0xe8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d113      	bne.n	8005110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40010400 	.word	0x40010400

08005140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0303 	bic.w	r3, r3, #3
 8005176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a21      	ldr	r2, [pc, #132]	@ (8005220 <TIM_OC3_SetConfig+0xe0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_OC3_SetConfig+0x66>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a20      	ldr	r2, [pc, #128]	@ (8005224 <TIM_OC3_SetConfig+0xe4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d10d      	bne.n	80051c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a16      	ldr	r2, [pc, #88]	@ (8005220 <TIM_OC3_SetConfig+0xe0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d003      	beq.n	80051d2 <TIM_OC3_SetConfig+0x92>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a15      	ldr	r2, [pc, #84]	@ (8005224 <TIM_OC3_SetConfig+0xe4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d113      	bne.n	80051fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	621a      	str	r2, [r3, #32]
}
 8005214:	bf00      	nop
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	40010000 	.word	0x40010000
 8005224:	40010400 	.word	0x40010400

08005228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800525e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a12      	ldr	r2, [pc, #72]	@ (80052cc <TIM_OC4_SetConfig+0xa4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_OC4_SetConfig+0x68>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a11      	ldr	r2, [pc, #68]	@ (80052d0 <TIM_OC4_SetConfig+0xa8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d109      	bne.n	80052a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	019b      	lsls	r3, r3, #6
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40010400 	.word	0x40010400

080052d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f023 0201 	bic.w	r2, r3, #1
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f023 030a 	bic.w	r3, r3, #10
 8005310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	621a      	str	r2, [r3, #32]
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005332:	b480      	push	{r7}
 8005334:	b087      	sub	sp, #28
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f023 0210 	bic.w	r2, r3, #16
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800535c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	031b      	lsls	r3, r3, #12
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800536e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f043 0307 	orr.w	r3, r3, #7
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	609a      	str	r2, [r3, #8]
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	021a      	lsls	r2, r3, #8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	609a      	str	r2, [r3, #8]
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	2201      	movs	r2, #1
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1a      	ldr	r2, [r3, #32]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	43db      	mvns	r3, r3
 800542a:	401a      	ands	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a1a      	ldr	r2, [r3, #32]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	431a      	orrs	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005468:	2302      	movs	r3, #2
 800546a:	e05a      	b.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a21      	ldr	r2, [pc, #132]	@ (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d022      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b8:	d01d      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1d      	ldr	r2, [pc, #116]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d018      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1a      	ldr	r2, [pc, #104]	@ (800553c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00e      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d009      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a17      	ldr	r2, [pc, #92]	@ (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a15      	ldr	r2, [pc, #84]	@ (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d10c      	bne.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	4313      	orrs	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40010400 	.word	0x40010400
 8005544:	40014000 	.word	0x40014000
 8005548:	40001800 	.word	0x40001800

0800554c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005564:	2302      	movs	r3, #2
 8005566:	e03d      	b.n	80055e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e042      	b.n	80056b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fd f8fa 	bl	8002838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2224      	movs	r2, #36	@ 0x24
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800565a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 ff77 	bl	8006550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08c      	sub	sp, #48	@ 0x30
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	4613      	mov	r3, r2
 80056c4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d156      	bne.n	8005780 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_UART_Transmit_DMA+0x26>
 80056d8:	88fb      	ldrh	r3, [r7, #6]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e04f      	b.n	8005782 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	88fa      	ldrh	r2, [r7, #6]
 80056ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	88fa      	ldrh	r2, [r7, #6]
 80056f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2221      	movs	r2, #33	@ 0x21
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005706:	4a21      	ldr	r2, [pc, #132]	@ (800578c <HAL_UART_Transmit_DMA+0xd4>)
 8005708:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	4a20      	ldr	r2, [pc, #128]	@ (8005790 <HAL_UART_Transmit_DMA+0xd8>)
 8005710:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005716:	4a1f      	ldr	r2, [pc, #124]	@ (8005794 <HAL_UART_Transmit_DMA+0xdc>)
 8005718:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571e:	2200      	movs	r2, #0
 8005720:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005722:	f107 0308 	add.w	r3, r7, #8
 8005726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800572c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572e:	6819      	ldr	r1, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3304      	adds	r3, #4
 8005736:	461a      	mov	r2, r3
 8005738:	88fb      	ldrh	r3, [r7, #6]
 800573a:	f7fd fc55 	bl	8002fe8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005746:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3314      	adds	r3, #20
 800574e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	617b      	str	r3, [r7, #20]
   return(result);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800575e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3314      	adds	r3, #20
 8005766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005768:	627a      	str	r2, [r7, #36]	@ 0x24
 800576a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	6a39      	ldr	r1, [r7, #32]
 800576e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005770:	e841 2300 	strex	r3, r2, [r1]
 8005774:	61fb      	str	r3, [r7, #28]
   return(result);
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e5      	bne.n	8005748 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	e000      	b.n	8005782 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005780:	2302      	movs	r3, #2
  }
}
 8005782:	4618      	mov	r0, r3
 8005784:	3730      	adds	r7, #48	@ 0x30
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	08005ddd 	.word	0x08005ddd
 8005790:	08005e77 	.word	0x08005e77
 8005794:	08005ffb 	.word	0x08005ffb

08005798 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08c      	sub	sp, #48	@ 0x30
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d14a      	bne.n	8005848 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e043      	b.n	800584a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	461a      	mov	r2, r3
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 fc5b 	bl	8006090 <UART_Start_Receive_DMA>
 80057da:	4603      	mov	r3, r0
 80057dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80057e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d12c      	bne.n	8005842 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d125      	bne.n	800583c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057f0:	2300      	movs	r3, #0
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	617b      	str	r3, [r7, #20]
   return(result);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f043 0310 	orr.w	r3, r3, #16
 800581c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	330c      	adds	r3, #12
 8005824:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005826:	627a      	str	r2, [r7, #36]	@ 0x24
 8005828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6a39      	ldr	r1, [r7, #32]
 800582c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	61fb      	str	r3, [r7, #28]
   return(result);
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e5      	bne.n	8005806 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800583a:	e002      	b.n	8005842 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005842:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005846:	e000      	b.n	800584a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3730      	adds	r7, #48	@ 0x30
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b0ba      	sub	sp, #232	@ 0xe8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800587a:	2300      	movs	r3, #0
 800587c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005880:	2300      	movs	r3, #0
 8005882:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10f      	bne.n	80058ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800589a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <HAL_UART_IRQHandler+0x66>
 80058a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fd8d 	bl	80063d2 <UART_Receive_IT>
      return;
 80058b8:	e25b      	b.n	8005d72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 80de 	beq.w	8005a80 <HAL_UART_IRQHandler+0x22c>
 80058c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80d1 	beq.w	8005a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <HAL_UART_IRQHandler+0xae>
 80058ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fa:	f043 0201 	orr.w	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <HAL_UART_IRQHandler+0xd2>
 800590e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591e:	f043 0202 	orr.w	r2, r3, #2
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00b      	beq.n	800594a <HAL_UART_IRQHandler+0xf6>
 8005932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005942:	f043 0204 	orr.w	r2, r3, #4
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800594a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d011      	beq.n	800597a <HAL_UART_IRQHandler+0x126>
 8005956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d105      	bne.n	800596e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005972:	f043 0208 	orr.w	r2, r3, #8
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 81f2 	beq.w	8005d68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_UART_IRQHandler+0x14e>
 8005990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fd18 	bl	80063d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ac:	2b40      	cmp	r3, #64	@ 0x40
 80059ae:	bf0c      	ite	eq
 80059b0:	2301      	moveq	r3, #1
 80059b2:	2300      	movne	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <HAL_UART_IRQHandler+0x17a>
 80059c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d04f      	beq.n	8005a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fc20 	bl	8006214 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059de:	2b40      	cmp	r3, #64	@ 0x40
 80059e0:	d141      	bne.n	8005a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3314      	adds	r3, #20
 80059e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3314      	adds	r3, #20
 8005a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1d9      	bne.n	80059e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d013      	beq.n	8005a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005c34 <HAL_UART_IRQHandler+0x3e0>)
 8005a3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fd fb98 	bl	8003178 <HAL_DMA_Abort_IT>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d016      	beq.n	8005a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5c:	e00e      	b.n	8005a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f9b2 	bl	8005dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a64:	e00a      	b.n	8005a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f9ae 	bl	8005dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6c:	e006      	b.n	8005a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f9aa 	bl	8005dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a7a:	e175      	b.n	8005d68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	bf00      	nop
    return;
 8005a7e:	e173      	b.n	8005d68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	f040 814f 	bne.w	8005d28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 8148 	beq.w	8005d28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8141 	beq.w	8005d28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac6:	2b40      	cmp	r3, #64	@ 0x40
 8005ac8:	f040 80b6 	bne.w	8005c38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8145 	beq.w	8005d6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aea:	429a      	cmp	r2, r3
 8005aec:	f080 813e 	bcs.w	8005d6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005af6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b02:	f000 8088 	beq.w	8005c16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1d9      	bne.n	8005b06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3314      	adds	r3, #20
 8005b58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b64:	f023 0301 	bic.w	r3, r3, #1
 8005b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3314      	adds	r3, #20
 8005b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e1      	bne.n	8005b52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3314      	adds	r3, #20
 8005b94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3314      	adds	r3, #20
 8005bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e3      	bne.n	8005b8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005be6:	f023 0310 	bic.w	r3, r3, #16
 8005bea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005bf8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005bfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e3      	bne.n	8005bd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fd fa41 	bl	8003098 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7fb fac9 	bl	80011c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c32:	e09b      	b.n	8005d6c <HAL_UART_IRQHandler+0x518>
 8005c34:	080062db 	.word	0x080062db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 808e 	beq.w	8005d70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8089 	beq.w	8005d70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	330c      	adds	r3, #12
 8005c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c82:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e3      	bne.n	8005c5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3314      	adds	r3, #20
 8005cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cba:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e3      	bne.n	8005c96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0310 	bic.w	r3, r3, #16
 8005cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	330c      	adds	r3, #12
 8005cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d00:	61fa      	str	r2, [r7, #28]
 8005d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e3      	bne.n	8005cdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7fb fa4f 	bl	80011c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d26:	e023      	b.n	8005d70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <HAL_UART_IRQHandler+0x4f4>
 8005d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fade 	bl	8006302 <UART_Transmit_IT>
    return;
 8005d46:	e014      	b.n	8005d72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00e      	beq.n	8005d72 <HAL_UART_IRQHandler+0x51e>
 8005d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fb1e 	bl	80063a2 <UART_EndTransmit_IT>
    return;
 8005d66:	e004      	b.n	8005d72 <HAL_UART_IRQHandler+0x51e>
    return;
 8005d68:	bf00      	nop
 8005d6a:	e002      	b.n	8005d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d6c:	bf00      	nop
 8005d6e:	e000      	b.n	8005d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d70:	bf00      	nop
  }
}
 8005d72:	37e8      	adds	r7, #232	@ 0xe8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b090      	sub	sp, #64	@ 0x40
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d137      	bne.n	8005e68 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3314      	adds	r3, #20
 8005e04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3314      	adds	r3, #20
 8005e1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e5      	bne.n	8005dfe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e52:	61fa      	str	r2, [r7, #28]
 8005e54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	69b9      	ldr	r1, [r7, #24]
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e5      	bne.n	8005e32 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e66:	e002      	b.n	8005e6e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005e68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005e6a:	f7ff ff85 	bl	8005d78 <HAL_UART_TxCpltCallback>
}
 8005e6e:	bf00      	nop
 8005e70:	3740      	adds	r7, #64	@ 0x40
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f7ff ff81 	bl	8005d8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e8a:	bf00      	nop
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b09c      	sub	sp, #112	@ 0x70
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d172      	bne.n	8005f94 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	330c      	adds	r3, #12
 8005eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ec6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ed4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ed6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005eda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e5      	bne.n	8005eb4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3314      	adds	r3, #20
 8005eee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efa:	f023 0301 	bic.w	r3, r3, #1
 8005efe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3314      	adds	r3, #20
 8005f06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f08:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e5      	bne.n	8005ee8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3314      	adds	r3, #20
 8005f22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f32:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3314      	adds	r3, #20
 8005f3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e5      	bne.n	8005f1c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d119      	bne.n	8005f94 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330c      	adds	r3, #12
 8005f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0310 	bic.w	r3, r3, #16
 8005f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f80:	61fa      	str	r2, [r7, #28]
 8005f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	69b9      	ldr	r1, [r7, #24]
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e5      	bne.n	8005f60 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f96:	2200      	movs	r2, #0
 8005f98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d106      	bne.n	8005fb0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005faa:	f7fb f90b 	bl	80011c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fae:	e002      	b.n	8005fb6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005fb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fb2:	f7ff fef5 	bl	8005da0 <HAL_UART_RxCpltCallback>
}
 8005fb6:	bf00      	nop
 8005fb8:	3770      	adds	r7, #112	@ 0x70
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d108      	bne.n	8005fec <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fde:	085b      	lsrs	r3, r3, #1
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7fb f8ed 	bl	80011c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fea:	e002      	b.n	8005ff2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f7ff fee1 	bl	8005db4 <HAL_UART_RxHalfCpltCallback>
}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006016:	2b80      	cmp	r3, #128	@ 0x80
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b21      	cmp	r3, #33	@ 0x21
 800602c:	d108      	bne.n	8006040 <UART_DMAError+0x46>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2200      	movs	r2, #0
 8006038:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800603a:	68b8      	ldr	r0, [r7, #8]
 800603c:	f000 f8c2 	bl	80061c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604a:	2b40      	cmp	r3, #64	@ 0x40
 800604c:	bf0c      	ite	eq
 800604e:	2301      	moveq	r3, #1
 8006050:	2300      	movne	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b22      	cmp	r3, #34	@ 0x22
 8006060:	d108      	bne.n	8006074 <UART_DMAError+0x7a>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2200      	movs	r2, #0
 800606c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800606e:	68b8      	ldr	r0, [r7, #8]
 8006070:	f000 f8d0 	bl	8006214 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006078:	f043 0210 	orr.w	r2, r3, #16
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006080:	68b8      	ldr	r0, [r7, #8]
 8006082:	f7ff fea1 	bl	8005dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006086:	bf00      	nop
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b098      	sub	sp, #96	@ 0x60
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	88fa      	ldrh	r2, [r7, #6]
 80060a8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2222      	movs	r2, #34	@ 0x22
 80060b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060bc:	4a3e      	ldr	r2, [pc, #248]	@ (80061b8 <UART_Start_Receive_DMA+0x128>)
 80060be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c4:	4a3d      	ldr	r2, [pc, #244]	@ (80061bc <UART_Start_Receive_DMA+0x12c>)
 80060c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060cc:	4a3c      	ldr	r2, [pc, #240]	@ (80061c0 <UART_Start_Receive_DMA+0x130>)
 80060ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d4:	2200      	movs	r2, #0
 80060d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80060d8:	f107 0308 	add.w	r3, r7, #8
 80060dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3304      	adds	r3, #4
 80060e8:	4619      	mov	r1, r3
 80060ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	f7fc ff7a 	bl	8002fe8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	613b      	str	r3, [r7, #16]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	613b      	str	r3, [r7, #16]
 8006108:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d019      	beq.n	8006146 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006128:	65bb      	str	r3, [r7, #88]	@ 0x58
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	330c      	adds	r3, #12
 8006130:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006132:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006134:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006138:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e5      	bne.n	8006112 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3314      	adds	r3, #20
 800614c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006158:	f043 0301 	orr.w	r3, r3, #1
 800615c:	657b      	str	r3, [r7, #84]	@ 0x54
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3314      	adds	r3, #20
 8006164:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006166:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006168:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800616c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e5      	bne.n	8006146 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3314      	adds	r3, #20
 8006180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	617b      	str	r3, [r7, #20]
   return(result);
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006190:	653b      	str	r3, [r7, #80]	@ 0x50
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3314      	adds	r3, #20
 8006198:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800619a:	627a      	str	r2, [r7, #36]	@ 0x24
 800619c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6a39      	ldr	r1, [r7, #32]
 80061a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e5      	bne.n	800617a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3760      	adds	r7, #96	@ 0x60
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	08005e93 	.word	0x08005e93
 80061bc:	08005fbf 	.word	0x08005fbf
 80061c0:	08005ffb 	.word	0x08005ffb

080061c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b089      	sub	sp, #36	@ 0x24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	60bb      	str	r3, [r7, #8]
   return(result);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80061e2:	61fb      	str	r3, [r7, #28]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	330c      	adds	r3, #12
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	61ba      	str	r2, [r7, #24]
 80061ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	6979      	ldr	r1, [r7, #20]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	613b      	str	r3, [r7, #16]
   return(result);
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e5      	bne.n	80061cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006208:	bf00      	nop
 800620a:	3724      	adds	r7, #36	@ 0x24
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b095      	sub	sp, #84	@ 0x54
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800623c:	643a      	str	r2, [r7, #64]	@ 0x40
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e5      	bne.n	800621c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3314      	adds	r3, #20
 8006256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3314      	adds	r3, #20
 800626e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006270:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006272:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e5      	bne.n	8006250 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006288:	2b01      	cmp	r3, #1
 800628a:	d119      	bne.n	80062c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	60bb      	str	r3, [r7, #8]
   return(result);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f023 0310 	bic.w	r3, r3, #16
 80062a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062ac:	61ba      	str	r2, [r7, #24]
 80062ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	6979      	ldr	r1, [r7, #20]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e5      	bne.n	800628c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062ce:	bf00      	nop
 80062d0:	3754      	adds	r7, #84	@ 0x54
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff fd67 	bl	8005dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062fa:	bf00      	nop
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b21      	cmp	r3, #33	@ 0x21
 8006314:	d13e      	bne.n	8006394 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800631e:	d114      	bne.n	800634a <UART_Transmit_IT+0x48>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d110      	bne.n	800634a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800633c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	1c9a      	adds	r2, r3, #2
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	621a      	str	r2, [r3, #32]
 8006348:	e008      	b.n	800635c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	1c59      	adds	r1, r3, #1
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6211      	str	r1, [r2, #32]
 8006354:	781a      	ldrb	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29b      	uxth	r3, r3
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	4619      	mov	r1, r3
 800636a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10f      	bne.n	8006390 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800637e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800638e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	e000      	b.n	8006396 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
  }
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b082      	sub	sp, #8
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff fcd8 	bl	8005d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b08c      	sub	sp, #48	@ 0x30
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b22      	cmp	r3, #34	@ 0x22
 80063e4:	f040 80ae 	bne.w	8006544 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063f0:	d117      	bne.n	8006422 <UART_Receive_IT+0x50>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d113      	bne.n	8006422 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006402:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	b29b      	uxth	r3, r3
 800640c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006410:	b29a      	uxth	r2, r3
 8006412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006414:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641a:	1c9a      	adds	r2, r3, #2
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006420:	e026      	b.n	8006470 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006426:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006428:	2300      	movs	r3, #0
 800642a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006434:	d007      	beq.n	8006446 <UART_Receive_IT+0x74>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10a      	bne.n	8006454 <UART_Receive_IT+0x82>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	b2da      	uxtb	r2, r3
 800644e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	e008      	b.n	8006466 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006460:	b2da      	uxtb	r2, r3
 8006462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006464:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29b      	uxth	r3, r3
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	4619      	mov	r1, r3
 800647e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006480:	2b00      	cmp	r3, #0
 8006482:	d15d      	bne.n	8006540 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0220 	bic.w	r2, r2, #32
 8006492:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695a      	ldr	r2, [r3, #20]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0201 	bic.w	r2, r2, #1
 80064b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d135      	bne.n	8006536 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	613b      	str	r3, [r7, #16]
   return(result);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f023 0310 	bic.w	r3, r3, #16
 80064e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	330c      	adds	r3, #12
 80064ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f0:	623a      	str	r2, [r7, #32]
 80064f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f4:	69f9      	ldr	r1, [r7, #28]
 80064f6:	6a3a      	ldr	r2, [r7, #32]
 80064f8:	e841 2300 	strex	r3, r2, [r1]
 80064fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1e5      	bne.n	80064d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0310 	and.w	r3, r3, #16
 800650e:	2b10      	cmp	r3, #16
 8006510:	d10a      	bne.n	8006528 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fa fe48 	bl	80011c4 <HAL_UARTEx_RxEventCallback>
 8006534:	e002      	b.n	800653c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff fc32 	bl	8005da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	e002      	b.n	8006546 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	e000      	b.n	8006546 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006544:	2302      	movs	r3, #2
  }
}
 8006546:	4618      	mov	r0, r3
 8006548:	3730      	adds	r7, #48	@ 0x30
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006554:	b0c0      	sub	sp, #256	@ 0x100
 8006556:	af00      	add	r7, sp, #0
 8006558:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656c:	68d9      	ldr	r1, [r3, #12]
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	ea40 0301 	orr.w	r3, r0, r1
 8006578:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	431a      	orrs	r2, r3
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	431a      	orrs	r2, r3
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80065a8:	f021 010c 	bic.w	r1, r1, #12
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065b6:	430b      	orrs	r3, r1
 80065b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ca:	6999      	ldr	r1, [r3, #24]
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	ea40 0301 	orr.w	r3, r0, r1
 80065d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	4b8f      	ldr	r3, [pc, #572]	@ (800681c <UART_SetConfig+0x2cc>)
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d005      	beq.n	80065f0 <UART_SetConfig+0xa0>
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b8d      	ldr	r3, [pc, #564]	@ (8006820 <UART_SetConfig+0x2d0>)
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d104      	bne.n	80065fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065f0:	f7fd fe48 	bl	8004284 <HAL_RCC_GetPCLK2Freq>
 80065f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065f8:	e003      	b.n	8006602 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065fa:	f7fd fe2f 	bl	800425c <HAL_RCC_GetPCLK1Freq>
 80065fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800660c:	f040 810c 	bne.w	8006828 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006614:	2200      	movs	r2, #0
 8006616:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800661a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800661e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006622:	4622      	mov	r2, r4
 8006624:	462b      	mov	r3, r5
 8006626:	1891      	adds	r1, r2, r2
 8006628:	65b9      	str	r1, [r7, #88]	@ 0x58
 800662a:	415b      	adcs	r3, r3
 800662c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800662e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006632:	4621      	mov	r1, r4
 8006634:	eb12 0801 	adds.w	r8, r2, r1
 8006638:	4629      	mov	r1, r5
 800663a:	eb43 0901 	adc.w	r9, r3, r1
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800664a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800664e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006652:	4690      	mov	r8, r2
 8006654:	4699      	mov	r9, r3
 8006656:	4623      	mov	r3, r4
 8006658:	eb18 0303 	adds.w	r3, r8, r3
 800665c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006660:	462b      	mov	r3, r5
 8006662:	eb49 0303 	adc.w	r3, r9, r3
 8006666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800666a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006676:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800667a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800667e:	460b      	mov	r3, r1
 8006680:	18db      	adds	r3, r3, r3
 8006682:	653b      	str	r3, [r7, #80]	@ 0x50
 8006684:	4613      	mov	r3, r2
 8006686:	eb42 0303 	adc.w	r3, r2, r3
 800668a:	657b      	str	r3, [r7, #84]	@ 0x54
 800668c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006690:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006694:	f7fa fa24 	bl	8000ae0 <__aeabi_uldivmod>
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	4b61      	ldr	r3, [pc, #388]	@ (8006824 <UART_SetConfig+0x2d4>)
 800669e:	fba3 2302 	umull	r2, r3, r3, r2
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	011c      	lsls	r4, r3, #4
 80066a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80066b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80066b8:	4642      	mov	r2, r8
 80066ba:	464b      	mov	r3, r9
 80066bc:	1891      	adds	r1, r2, r2
 80066be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066c0:	415b      	adcs	r3, r3
 80066c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066c8:	4641      	mov	r1, r8
 80066ca:	eb12 0a01 	adds.w	sl, r2, r1
 80066ce:	4649      	mov	r1, r9
 80066d0:	eb43 0b01 	adc.w	fp, r3, r1
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066e8:	4692      	mov	sl, r2
 80066ea:	469b      	mov	fp, r3
 80066ec:	4643      	mov	r3, r8
 80066ee:	eb1a 0303 	adds.w	r3, sl, r3
 80066f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066f6:	464b      	mov	r3, r9
 80066f8:	eb4b 0303 	adc.w	r3, fp, r3
 80066fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800670c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006710:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006714:	460b      	mov	r3, r1
 8006716:	18db      	adds	r3, r3, r3
 8006718:	643b      	str	r3, [r7, #64]	@ 0x40
 800671a:	4613      	mov	r3, r2
 800671c:	eb42 0303 	adc.w	r3, r2, r3
 8006720:	647b      	str	r3, [r7, #68]	@ 0x44
 8006722:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006726:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800672a:	f7fa f9d9 	bl	8000ae0 <__aeabi_uldivmod>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4611      	mov	r1, r2
 8006734:	4b3b      	ldr	r3, [pc, #236]	@ (8006824 <UART_SetConfig+0x2d4>)
 8006736:	fba3 2301 	umull	r2, r3, r3, r1
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	2264      	movs	r2, #100	@ 0x64
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	1acb      	subs	r3, r1, r3
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800674a:	4b36      	ldr	r3, [pc, #216]	@ (8006824 <UART_SetConfig+0x2d4>)
 800674c:	fba3 2302 	umull	r2, r3, r3, r2
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006758:	441c      	add	r4, r3
 800675a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800675e:	2200      	movs	r2, #0
 8006760:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006764:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006768:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800676c:	4642      	mov	r2, r8
 800676e:	464b      	mov	r3, r9
 8006770:	1891      	adds	r1, r2, r2
 8006772:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006774:	415b      	adcs	r3, r3
 8006776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006778:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800677c:	4641      	mov	r1, r8
 800677e:	1851      	adds	r1, r2, r1
 8006780:	6339      	str	r1, [r7, #48]	@ 0x30
 8006782:	4649      	mov	r1, r9
 8006784:	414b      	adcs	r3, r1
 8006786:	637b      	str	r3, [r7, #52]	@ 0x34
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	f04f 0300 	mov.w	r3, #0
 8006790:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006794:	4659      	mov	r1, fp
 8006796:	00cb      	lsls	r3, r1, #3
 8006798:	4651      	mov	r1, sl
 800679a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800679e:	4651      	mov	r1, sl
 80067a0:	00ca      	lsls	r2, r1, #3
 80067a2:	4610      	mov	r0, r2
 80067a4:	4619      	mov	r1, r3
 80067a6:	4603      	mov	r3, r0
 80067a8:	4642      	mov	r2, r8
 80067aa:	189b      	adds	r3, r3, r2
 80067ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067b0:	464b      	mov	r3, r9
 80067b2:	460a      	mov	r2, r1
 80067b4:	eb42 0303 	adc.w	r3, r2, r3
 80067b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067d0:	460b      	mov	r3, r1
 80067d2:	18db      	adds	r3, r3, r3
 80067d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067d6:	4613      	mov	r3, r2
 80067d8:	eb42 0303 	adc.w	r3, r2, r3
 80067dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067e6:	f7fa f97b 	bl	8000ae0 <__aeabi_uldivmod>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006824 <UART_SetConfig+0x2d4>)
 80067f0:	fba3 1302 	umull	r1, r3, r3, r2
 80067f4:	095b      	lsrs	r3, r3, #5
 80067f6:	2164      	movs	r1, #100	@ 0x64
 80067f8:	fb01 f303 	mul.w	r3, r1, r3
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	3332      	adds	r3, #50	@ 0x32
 8006802:	4a08      	ldr	r2, [pc, #32]	@ (8006824 <UART_SetConfig+0x2d4>)
 8006804:	fba2 2303 	umull	r2, r3, r2, r3
 8006808:	095b      	lsrs	r3, r3, #5
 800680a:	f003 0207 	and.w	r2, r3, #7
 800680e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4422      	add	r2, r4
 8006816:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006818:	e106      	b.n	8006a28 <UART_SetConfig+0x4d8>
 800681a:	bf00      	nop
 800681c:	40011000 	.word	0x40011000
 8006820:	40011400 	.word	0x40011400
 8006824:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800682c:	2200      	movs	r2, #0
 800682e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006832:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006836:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800683a:	4642      	mov	r2, r8
 800683c:	464b      	mov	r3, r9
 800683e:	1891      	adds	r1, r2, r2
 8006840:	6239      	str	r1, [r7, #32]
 8006842:	415b      	adcs	r3, r3
 8006844:	627b      	str	r3, [r7, #36]	@ 0x24
 8006846:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800684a:	4641      	mov	r1, r8
 800684c:	1854      	adds	r4, r2, r1
 800684e:	4649      	mov	r1, r9
 8006850:	eb43 0501 	adc.w	r5, r3, r1
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	00eb      	lsls	r3, r5, #3
 800685e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006862:	00e2      	lsls	r2, r4, #3
 8006864:	4614      	mov	r4, r2
 8006866:	461d      	mov	r5, r3
 8006868:	4643      	mov	r3, r8
 800686a:	18e3      	adds	r3, r4, r3
 800686c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006870:	464b      	mov	r3, r9
 8006872:	eb45 0303 	adc.w	r3, r5, r3
 8006876:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800687a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006886:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800688a:	f04f 0200 	mov.w	r2, #0
 800688e:	f04f 0300 	mov.w	r3, #0
 8006892:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006896:	4629      	mov	r1, r5
 8006898:	008b      	lsls	r3, r1, #2
 800689a:	4621      	mov	r1, r4
 800689c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068a0:	4621      	mov	r1, r4
 80068a2:	008a      	lsls	r2, r1, #2
 80068a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80068a8:	f7fa f91a 	bl	8000ae0 <__aeabi_uldivmod>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4b60      	ldr	r3, [pc, #384]	@ (8006a34 <UART_SetConfig+0x4e4>)
 80068b2:	fba3 2302 	umull	r2, r3, r3, r2
 80068b6:	095b      	lsrs	r3, r3, #5
 80068b8:	011c      	lsls	r4, r3, #4
 80068ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068cc:	4642      	mov	r2, r8
 80068ce:	464b      	mov	r3, r9
 80068d0:	1891      	adds	r1, r2, r2
 80068d2:	61b9      	str	r1, [r7, #24]
 80068d4:	415b      	adcs	r3, r3
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068dc:	4641      	mov	r1, r8
 80068de:	1851      	adds	r1, r2, r1
 80068e0:	6139      	str	r1, [r7, #16]
 80068e2:	4649      	mov	r1, r9
 80068e4:	414b      	adcs	r3, r1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	f04f 0200 	mov.w	r2, #0
 80068ec:	f04f 0300 	mov.w	r3, #0
 80068f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068f4:	4659      	mov	r1, fp
 80068f6:	00cb      	lsls	r3, r1, #3
 80068f8:	4651      	mov	r1, sl
 80068fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068fe:	4651      	mov	r1, sl
 8006900:	00ca      	lsls	r2, r1, #3
 8006902:	4610      	mov	r0, r2
 8006904:	4619      	mov	r1, r3
 8006906:	4603      	mov	r3, r0
 8006908:	4642      	mov	r2, r8
 800690a:	189b      	adds	r3, r3, r2
 800690c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006910:	464b      	mov	r3, r9
 8006912:	460a      	mov	r2, r1
 8006914:	eb42 0303 	adc.w	r3, r2, r3
 8006918:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800691c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006926:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006934:	4649      	mov	r1, r9
 8006936:	008b      	lsls	r3, r1, #2
 8006938:	4641      	mov	r1, r8
 800693a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800693e:	4641      	mov	r1, r8
 8006940:	008a      	lsls	r2, r1, #2
 8006942:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006946:	f7fa f8cb 	bl	8000ae0 <__aeabi_uldivmod>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4611      	mov	r1, r2
 8006950:	4b38      	ldr	r3, [pc, #224]	@ (8006a34 <UART_SetConfig+0x4e4>)
 8006952:	fba3 2301 	umull	r2, r3, r3, r1
 8006956:	095b      	lsrs	r3, r3, #5
 8006958:	2264      	movs	r2, #100	@ 0x64
 800695a:	fb02 f303 	mul.w	r3, r2, r3
 800695e:	1acb      	subs	r3, r1, r3
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	3332      	adds	r3, #50	@ 0x32
 8006964:	4a33      	ldr	r2, [pc, #204]	@ (8006a34 <UART_SetConfig+0x4e4>)
 8006966:	fba2 2303 	umull	r2, r3, r2, r3
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006970:	441c      	add	r4, r3
 8006972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006976:	2200      	movs	r2, #0
 8006978:	673b      	str	r3, [r7, #112]	@ 0x70
 800697a:	677a      	str	r2, [r7, #116]	@ 0x74
 800697c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006980:	4642      	mov	r2, r8
 8006982:	464b      	mov	r3, r9
 8006984:	1891      	adds	r1, r2, r2
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	415b      	adcs	r3, r3
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006990:	4641      	mov	r1, r8
 8006992:	1851      	adds	r1, r2, r1
 8006994:	6039      	str	r1, [r7, #0]
 8006996:	4649      	mov	r1, r9
 8006998:	414b      	adcs	r3, r1
 800699a:	607b      	str	r3, [r7, #4]
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069a8:	4659      	mov	r1, fp
 80069aa:	00cb      	lsls	r3, r1, #3
 80069ac:	4651      	mov	r1, sl
 80069ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069b2:	4651      	mov	r1, sl
 80069b4:	00ca      	lsls	r2, r1, #3
 80069b6:	4610      	mov	r0, r2
 80069b8:	4619      	mov	r1, r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	4642      	mov	r2, r8
 80069be:	189b      	adds	r3, r3, r2
 80069c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069c2:	464b      	mov	r3, r9
 80069c4:	460a      	mov	r2, r1
 80069c6:	eb42 0303 	adc.w	r3, r2, r3
 80069ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80069d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069e4:	4649      	mov	r1, r9
 80069e6:	008b      	lsls	r3, r1, #2
 80069e8:	4641      	mov	r1, r8
 80069ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ee:	4641      	mov	r1, r8
 80069f0:	008a      	lsls	r2, r1, #2
 80069f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069f6:	f7fa f873 	bl	8000ae0 <__aeabi_uldivmod>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006a34 <UART_SetConfig+0x4e4>)
 8006a00:	fba3 1302 	umull	r1, r3, r3, r2
 8006a04:	095b      	lsrs	r3, r3, #5
 8006a06:	2164      	movs	r1, #100	@ 0x64
 8006a08:	fb01 f303 	mul.w	r3, r1, r3
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	3332      	adds	r3, #50	@ 0x32
 8006a12:	4a08      	ldr	r2, [pc, #32]	@ (8006a34 <UART_SetConfig+0x4e4>)
 8006a14:	fba2 2303 	umull	r2, r3, r2, r3
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	f003 020f 	and.w	r2, r3, #15
 8006a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4422      	add	r2, r4
 8006a26:	609a      	str	r2, [r3, #8]
}
 8006a28:	bf00      	nop
 8006a2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a34:	51eb851f 	.word	0x51eb851f

08006a38 <fmod>:
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	ed2d 8b02 	vpush	{d8}
 8006a3e:	ec57 6b10 	vmov	r6, r7, d0
 8006a42:	ec55 4b11 	vmov	r4, r5, d1
 8006a46:	f000 f8a3 	bl	8006b90 <__ieee754_fmod>
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	462b      	mov	r3, r5
 8006a4e:	4630      	mov	r0, r6
 8006a50:	4639      	mov	r1, r7
 8006a52:	eeb0 8a40 	vmov.f32	s16, s0
 8006a56:	eef0 8a60 	vmov.f32	s17, s1
 8006a5a:	f7fa f80b 	bl	8000a74 <__aeabi_dcmpun>
 8006a5e:	b990      	cbnz	r0, 8006a86 <fmod+0x4e>
 8006a60:	2200      	movs	r2, #0
 8006a62:	2300      	movs	r3, #0
 8006a64:	4620      	mov	r0, r4
 8006a66:	4629      	mov	r1, r5
 8006a68:	f7f9 ffd2 	bl	8000a10 <__aeabi_dcmpeq>
 8006a6c:	b158      	cbz	r0, 8006a86 <fmod+0x4e>
 8006a6e:	f000 f9a1 	bl	8006db4 <__errno>
 8006a72:	2321      	movs	r3, #33	@ 0x21
 8006a74:	6003      	str	r3, [r0, #0]
 8006a76:	2200      	movs	r2, #0
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	f7f9 fe89 	bl	8000794 <__aeabi_ddiv>
 8006a82:	ec41 0b18 	vmov	d8, r0, r1
 8006a86:	eeb0 0a48 	vmov.f32	s0, s16
 8006a8a:	eef0 0a68 	vmov.f32	s1, s17
 8006a8e:	ecbd 8b02 	vpop	{d8}
 8006a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a94:	0000      	movs	r0, r0
	...

08006a98 <floor>:
 8006a98:	ec51 0b10 	vmov	r0, r1, d0
 8006a9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006aa8:	2e13      	cmp	r6, #19
 8006aaa:	460c      	mov	r4, r1
 8006aac:	4605      	mov	r5, r0
 8006aae:	4680      	mov	r8, r0
 8006ab0:	dc34      	bgt.n	8006b1c <floor+0x84>
 8006ab2:	2e00      	cmp	r6, #0
 8006ab4:	da17      	bge.n	8006ae6 <floor+0x4e>
 8006ab6:	a332      	add	r3, pc, #200	@ (adr r3, 8006b80 <floor+0xe8>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fb8a 	bl	80001d4 <__adddf3>
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f7f9 ffcc 	bl	8000a60 <__aeabi_dcmpgt>
 8006ac8:	b150      	cbz	r0, 8006ae0 <floor+0x48>
 8006aca:	2c00      	cmp	r4, #0
 8006acc:	da55      	bge.n	8006b7a <floor+0xe2>
 8006ace:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006ad2:	432c      	orrs	r4, r5
 8006ad4:	2500      	movs	r5, #0
 8006ad6:	42ac      	cmp	r4, r5
 8006ad8:	4c2b      	ldr	r4, [pc, #172]	@ (8006b88 <floor+0xf0>)
 8006ada:	bf08      	it	eq
 8006adc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	e023      	b.n	8006b2e <floor+0x96>
 8006ae6:	4f29      	ldr	r7, [pc, #164]	@ (8006b8c <floor+0xf4>)
 8006ae8:	4137      	asrs	r7, r6
 8006aea:	ea01 0307 	and.w	r3, r1, r7
 8006aee:	4303      	orrs	r3, r0
 8006af0:	d01d      	beq.n	8006b2e <floor+0x96>
 8006af2:	a323      	add	r3, pc, #140	@ (adr r3, 8006b80 <floor+0xe8>)
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f7f9 fb6c 	bl	80001d4 <__adddf3>
 8006afc:	2200      	movs	r2, #0
 8006afe:	2300      	movs	r3, #0
 8006b00:	f7f9 ffae 	bl	8000a60 <__aeabi_dcmpgt>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d0eb      	beq.n	8006ae0 <floor+0x48>
 8006b08:	2c00      	cmp	r4, #0
 8006b0a:	bfbe      	ittt	lt
 8006b0c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006b10:	4133      	asrlt	r3, r6
 8006b12:	18e4      	addlt	r4, r4, r3
 8006b14:	ea24 0407 	bic.w	r4, r4, r7
 8006b18:	2500      	movs	r5, #0
 8006b1a:	e7e1      	b.n	8006ae0 <floor+0x48>
 8006b1c:	2e33      	cmp	r6, #51	@ 0x33
 8006b1e:	dd0a      	ble.n	8006b36 <floor+0x9e>
 8006b20:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006b24:	d103      	bne.n	8006b2e <floor+0x96>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	f7f9 fb53 	bl	80001d4 <__adddf3>
 8006b2e:	ec41 0b10 	vmov	d0, r0, r1
 8006b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b36:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006b3a:	f04f 37ff 	mov.w	r7, #4294967295
 8006b3e:	40df      	lsrs	r7, r3
 8006b40:	4207      	tst	r7, r0
 8006b42:	d0f4      	beq.n	8006b2e <floor+0x96>
 8006b44:	a30e      	add	r3, pc, #56	@ (adr r3, 8006b80 <floor+0xe8>)
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f7f9 fb43 	bl	80001d4 <__adddf3>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2300      	movs	r3, #0
 8006b52:	f7f9 ff85 	bl	8000a60 <__aeabi_dcmpgt>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d0c2      	beq.n	8006ae0 <floor+0x48>
 8006b5a:	2c00      	cmp	r4, #0
 8006b5c:	da0a      	bge.n	8006b74 <floor+0xdc>
 8006b5e:	2e14      	cmp	r6, #20
 8006b60:	d101      	bne.n	8006b66 <floor+0xce>
 8006b62:	3401      	adds	r4, #1
 8006b64:	e006      	b.n	8006b74 <floor+0xdc>
 8006b66:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	40b3      	lsls	r3, r6
 8006b6e:	441d      	add	r5, r3
 8006b70:	4545      	cmp	r5, r8
 8006b72:	d3f6      	bcc.n	8006b62 <floor+0xca>
 8006b74:	ea25 0507 	bic.w	r5, r5, r7
 8006b78:	e7b2      	b.n	8006ae0 <floor+0x48>
 8006b7a:	2500      	movs	r5, #0
 8006b7c:	462c      	mov	r4, r5
 8006b7e:	e7af      	b.n	8006ae0 <floor+0x48>
 8006b80:	8800759c 	.word	0x8800759c
 8006b84:	7e37e43c 	.word	0x7e37e43c
 8006b88:	bff00000 	.word	0xbff00000
 8006b8c:	000fffff 	.word	0x000fffff

08006b90 <__ieee754_fmod>:
 8006b90:	ec53 2b11 	vmov	r2, r3, d1
 8006b94:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8006b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b9c:	ea52 040c 	orrs.w	r4, r2, ip
 8006ba0:	ec51 0b10 	vmov	r0, r1, d0
 8006ba4:	461e      	mov	r6, r3
 8006ba6:	4617      	mov	r7, r2
 8006ba8:	4696      	mov	lr, r2
 8006baa:	d00c      	beq.n	8006bc6 <__ieee754_fmod+0x36>
 8006bac:	4c77      	ldr	r4, [pc, #476]	@ (8006d8c <__ieee754_fmod+0x1fc>)
 8006bae:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8006bb2:	45a0      	cmp	r8, r4
 8006bb4:	4689      	mov	r9, r1
 8006bb6:	d806      	bhi.n	8006bc6 <__ieee754_fmod+0x36>
 8006bb8:	4254      	negs	r4, r2
 8006bba:	4d75      	ldr	r5, [pc, #468]	@ (8006d90 <__ieee754_fmod+0x200>)
 8006bbc:	4314      	orrs	r4, r2
 8006bbe:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8006bc2:	42ac      	cmp	r4, r5
 8006bc4:	d909      	bls.n	8006bda <__ieee754_fmod+0x4a>
 8006bc6:	f7f9 fcbb 	bl	8000540 <__aeabi_dmul>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	f7f9 fde1 	bl	8000794 <__aeabi_ddiv>
 8006bd2:	ec41 0b10 	vmov	d0, r0, r1
 8006bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bda:	45e0      	cmp	r8, ip
 8006bdc:	4682      	mov	sl, r0
 8006bde:	4604      	mov	r4, r0
 8006be0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8006be4:	dc09      	bgt.n	8006bfa <__ieee754_fmod+0x6a>
 8006be6:	dbf4      	blt.n	8006bd2 <__ieee754_fmod+0x42>
 8006be8:	4282      	cmp	r2, r0
 8006bea:	d8f2      	bhi.n	8006bd2 <__ieee754_fmod+0x42>
 8006bec:	d105      	bne.n	8006bfa <__ieee754_fmod+0x6a>
 8006bee:	4b69      	ldr	r3, [pc, #420]	@ (8006d94 <__ieee754_fmod+0x204>)
 8006bf0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8006bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bf8:	e7eb      	b.n	8006bd2 <__ieee754_fmod+0x42>
 8006bfa:	4a65      	ldr	r2, [pc, #404]	@ (8006d90 <__ieee754_fmod+0x200>)
 8006bfc:	ea19 0f02 	tst.w	r9, r2
 8006c00:	d148      	bne.n	8006c94 <__ieee754_fmod+0x104>
 8006c02:	f1b8 0f00 	cmp.w	r8, #0
 8006c06:	d13d      	bne.n	8006c84 <__ieee754_fmod+0xf4>
 8006c08:	4963      	ldr	r1, [pc, #396]	@ (8006d98 <__ieee754_fmod+0x208>)
 8006c0a:	4653      	mov	r3, sl
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	dc36      	bgt.n	8006c7e <__ieee754_fmod+0xee>
 8006c10:	4216      	tst	r6, r2
 8006c12:	d14f      	bne.n	8006cb4 <__ieee754_fmod+0x124>
 8006c14:	f1bc 0f00 	cmp.w	ip, #0
 8006c18:	d144      	bne.n	8006ca4 <__ieee754_fmod+0x114>
 8006c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8006d98 <__ieee754_fmod+0x208>)
 8006c1c:	463b      	mov	r3, r7
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	dc3d      	bgt.n	8006c9e <__ieee754_fmod+0x10e>
 8006c22:	485e      	ldr	r0, [pc, #376]	@ (8006d9c <__ieee754_fmod+0x20c>)
 8006c24:	4281      	cmp	r1, r0
 8006c26:	db4a      	blt.n	8006cbe <__ieee754_fmod+0x12e>
 8006c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c30:	485a      	ldr	r0, [pc, #360]	@ (8006d9c <__ieee754_fmod+0x20c>)
 8006c32:	4282      	cmp	r2, r0
 8006c34:	db57      	blt.n	8006ce6 <__ieee754_fmod+0x156>
 8006c36:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8006c3a:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8006c3e:	1a89      	subs	r1, r1, r2
 8006c40:	1b98      	subs	r0, r3, r6
 8006c42:	eba4 070e 	sub.w	r7, r4, lr
 8006c46:	2900      	cmp	r1, #0
 8006c48:	d162      	bne.n	8006d10 <__ieee754_fmod+0x180>
 8006c4a:	4574      	cmp	r4, lr
 8006c4c:	bf38      	it	cc
 8006c4e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8006c52:	2800      	cmp	r0, #0
 8006c54:	bfa4      	itt	ge
 8006c56:	463c      	movge	r4, r7
 8006c58:	4603      	movge	r3, r0
 8006c5a:	ea53 0104 	orrs.w	r1, r3, r4
 8006c5e:	d0c6      	beq.n	8006bee <__ieee754_fmod+0x5e>
 8006c60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c64:	db69      	blt.n	8006d3a <__ieee754_fmod+0x1aa>
 8006c66:	494d      	ldr	r1, [pc, #308]	@ (8006d9c <__ieee754_fmod+0x20c>)
 8006c68:	428a      	cmp	r2, r1
 8006c6a:	db6c      	blt.n	8006d46 <__ieee754_fmod+0x1b6>
 8006c6c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006c70:	432b      	orrs	r3, r5
 8006c72:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8006c76:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	e7a9      	b.n	8006bd2 <__ieee754_fmod+0x42>
 8006c7e:	3901      	subs	r1, #1
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	e7c3      	b.n	8006c0c <__ieee754_fmod+0x7c>
 8006c84:	4945      	ldr	r1, [pc, #276]	@ (8006d9c <__ieee754_fmod+0x20c>)
 8006c86:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	ddc0      	ble.n	8006c10 <__ieee754_fmod+0x80>
 8006c8e:	3901      	subs	r1, #1
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	e7fa      	b.n	8006c8a <__ieee754_fmod+0xfa>
 8006c94:	ea4f 5128 	mov.w	r1, r8, asr #20
 8006c98:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006c9c:	e7b8      	b.n	8006c10 <__ieee754_fmod+0x80>
 8006c9e:	3a01      	subs	r2, #1
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	e7bc      	b.n	8006c1e <__ieee754_fmod+0x8e>
 8006ca4:	4a3d      	ldr	r2, [pc, #244]	@ (8006d9c <__ieee754_fmod+0x20c>)
 8006ca6:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	ddb9      	ble.n	8006c22 <__ieee754_fmod+0x92>
 8006cae:	3a01      	subs	r2, #1
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	e7fa      	b.n	8006caa <__ieee754_fmod+0x11a>
 8006cb4:	ea4f 522c 	mov.w	r2, ip, asr #20
 8006cb8:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006cbc:	e7b1      	b.n	8006c22 <__ieee754_fmod+0x92>
 8006cbe:	1a40      	subs	r0, r0, r1
 8006cc0:	281f      	cmp	r0, #31
 8006cc2:	dc0a      	bgt.n	8006cda <__ieee754_fmod+0x14a>
 8006cc4:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8006cc8:	fa08 f800 	lsl.w	r8, r8, r0
 8006ccc:	fa2a f303 	lsr.w	r3, sl, r3
 8006cd0:	ea43 0308 	orr.w	r3, r3, r8
 8006cd4:	fa0a f400 	lsl.w	r4, sl, r0
 8006cd8:	e7aa      	b.n	8006c30 <__ieee754_fmod+0xa0>
 8006cda:	4b31      	ldr	r3, [pc, #196]	@ (8006da0 <__ieee754_fmod+0x210>)
 8006cdc:	1a5b      	subs	r3, r3, r1
 8006cde:	fa0a f303 	lsl.w	r3, sl, r3
 8006ce2:	2400      	movs	r4, #0
 8006ce4:	e7a4      	b.n	8006c30 <__ieee754_fmod+0xa0>
 8006ce6:	1a80      	subs	r0, r0, r2
 8006ce8:	281f      	cmp	r0, #31
 8006cea:	dc0a      	bgt.n	8006d02 <__ieee754_fmod+0x172>
 8006cec:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8006cf0:	fa0c fc00 	lsl.w	ip, ip, r0
 8006cf4:	fa27 f606 	lsr.w	r6, r7, r6
 8006cf8:	ea46 060c 	orr.w	r6, r6, ip
 8006cfc:	fa07 fe00 	lsl.w	lr, r7, r0
 8006d00:	e79d      	b.n	8006c3e <__ieee754_fmod+0xae>
 8006d02:	4e27      	ldr	r6, [pc, #156]	@ (8006da0 <__ieee754_fmod+0x210>)
 8006d04:	1ab6      	subs	r6, r6, r2
 8006d06:	fa07 f606 	lsl.w	r6, r7, r6
 8006d0a:	f04f 0e00 	mov.w	lr, #0
 8006d0e:	e796      	b.n	8006c3e <__ieee754_fmod+0xae>
 8006d10:	4574      	cmp	r4, lr
 8006d12:	bf38      	it	cc
 8006d14:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	da05      	bge.n	8006d28 <__ieee754_fmod+0x198>
 8006d1c:	0fe0      	lsrs	r0, r4, #31
 8006d1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006d22:	0064      	lsls	r4, r4, #1
 8006d24:	3901      	subs	r1, #1
 8006d26:	e78b      	b.n	8006c40 <__ieee754_fmod+0xb0>
 8006d28:	ea50 0307 	orrs.w	r3, r0, r7
 8006d2c:	f43f af5f 	beq.w	8006bee <__ieee754_fmod+0x5e>
 8006d30:	0ffb      	lsrs	r3, r7, #31
 8006d32:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006d36:	007c      	lsls	r4, r7, #1
 8006d38:	e7f4      	b.n	8006d24 <__ieee754_fmod+0x194>
 8006d3a:	0fe1      	lsrs	r1, r4, #31
 8006d3c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006d40:	0064      	lsls	r4, r4, #1
 8006d42:	3a01      	subs	r2, #1
 8006d44:	e78c      	b.n	8006c60 <__ieee754_fmod+0xd0>
 8006d46:	1a89      	subs	r1, r1, r2
 8006d48:	2914      	cmp	r1, #20
 8006d4a:	dc0a      	bgt.n	8006d62 <__ieee754_fmod+0x1d2>
 8006d4c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8006d50:	fa03 f202 	lsl.w	r2, r3, r2
 8006d54:	40cc      	lsrs	r4, r1
 8006d56:	4322      	orrs	r2, r4
 8006d58:	410b      	asrs	r3, r1
 8006d5a:	ea43 0105 	orr.w	r1, r3, r5
 8006d5e:	4610      	mov	r0, r2
 8006d60:	e737      	b.n	8006bd2 <__ieee754_fmod+0x42>
 8006d62:	291f      	cmp	r1, #31
 8006d64:	dc07      	bgt.n	8006d76 <__ieee754_fmod+0x1e6>
 8006d66:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8006d6a:	40cc      	lsrs	r4, r1
 8006d6c:	fa03 f202 	lsl.w	r2, r3, r2
 8006d70:	4322      	orrs	r2, r4
 8006d72:	462b      	mov	r3, r5
 8006d74:	e7f1      	b.n	8006d5a <__ieee754_fmod+0x1ca>
 8006d76:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8006d7a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8006d7e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8006d82:	32e2      	adds	r2, #226	@ 0xe2
 8006d84:	fa43 f202 	asr.w	r2, r3, r2
 8006d88:	e7f3      	b.n	8006d72 <__ieee754_fmod+0x1e2>
 8006d8a:	bf00      	nop
 8006d8c:	7fefffff 	.word	0x7fefffff
 8006d90:	7ff00000 	.word	0x7ff00000
 8006d94:	08006e50 	.word	0x08006e50
 8006d98:	fffffbed 	.word	0xfffffbed
 8006d9c:	fffffc02 	.word	0xfffffc02
 8006da0:	fffffbe2 	.word	0xfffffbe2

08006da4 <memset>:
 8006da4:	4402      	add	r2, r0
 8006da6:	4603      	mov	r3, r0
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d100      	bne.n	8006dae <memset+0xa>
 8006dac:	4770      	bx	lr
 8006dae:	f803 1b01 	strb.w	r1, [r3], #1
 8006db2:	e7f9      	b.n	8006da8 <memset+0x4>

08006db4 <__errno>:
 8006db4:	4b01      	ldr	r3, [pc, #4]	@ (8006dbc <__errno+0x8>)
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	2000001c 	.word	0x2000001c

08006dc0 <__libc_init_array>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	4d0d      	ldr	r5, [pc, #52]	@ (8006df8 <__libc_init_array+0x38>)
 8006dc4:	4c0d      	ldr	r4, [pc, #52]	@ (8006dfc <__libc_init_array+0x3c>)
 8006dc6:	1b64      	subs	r4, r4, r5
 8006dc8:	10a4      	asrs	r4, r4, #2
 8006dca:	2600      	movs	r6, #0
 8006dcc:	42a6      	cmp	r6, r4
 8006dce:	d109      	bne.n	8006de4 <__libc_init_array+0x24>
 8006dd0:	4d0b      	ldr	r5, [pc, #44]	@ (8006e00 <__libc_init_array+0x40>)
 8006dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8006e04 <__libc_init_array+0x44>)
 8006dd4:	f000 f818 	bl	8006e08 <_init>
 8006dd8:	1b64      	subs	r4, r4, r5
 8006dda:	10a4      	asrs	r4, r4, #2
 8006ddc:	2600      	movs	r6, #0
 8006dde:	42a6      	cmp	r6, r4
 8006de0:	d105      	bne.n	8006dee <__libc_init_array+0x2e>
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
 8006de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de8:	4798      	blx	r3
 8006dea:	3601      	adds	r6, #1
 8006dec:	e7ee      	b.n	8006dcc <__libc_init_array+0xc>
 8006dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df2:	4798      	blx	r3
 8006df4:	3601      	adds	r6, #1
 8006df6:	e7f2      	b.n	8006dde <__libc_init_array+0x1e>
 8006df8:	08006e68 	.word	0x08006e68
 8006dfc:	08006e68 	.word	0x08006e68
 8006e00:	08006e68 	.word	0x08006e68
 8006e04:	08006e6c 	.word	0x08006e6c

08006e08 <_init>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr

08006e14 <_fini>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr

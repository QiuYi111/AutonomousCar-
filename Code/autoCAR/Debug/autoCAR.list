
autoCAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b88  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006d10  08006d10  00007d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d50  08006d50  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006d50  08006d50  00007d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d58  08006d58  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d58  08006d58  00007d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d5c  08006d5c  00007d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006d60  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008064  2**0
                  CONTENTS
 10 .bss          000005d4  20000064  20000064  00008064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000638  20000638  00008064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010400  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a5  00000000  00000000  00018494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  0001ac40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9d  00000000  00000000  0001b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b33  00000000  00000000  0001c485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011dd8  00000000  00000000  0003dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb436  00000000  00000000  0004fd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b1c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bac  00000000  00000000  0011b20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0011edb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000064 	.word	0x20000064
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006cf8 	.word	0x08006cf8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000068 	.word	0x20000068
 80001c4:	08006cf8 	.word	0x08006cf8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b96a 	b.w	8000dcc <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	460c      	mov	r4, r1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14e      	bne.n	8000bba <__udivmoddi4+0xaa>
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	458c      	cmp	ip, r1
 8000b20:	4686      	mov	lr, r0
 8000b22:	fab2 f282 	clz	r2, r2
 8000b26:	d962      	bls.n	8000bee <__udivmoddi4+0xde>
 8000b28:	b14a      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2a:	f1c2 0320 	rsb	r3, r2, #32
 8000b2e:	4091      	lsls	r1, r2
 8000b30:	fa20 f303 	lsr.w	r3, r0, r3
 8000b34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b38:	4319      	orrs	r1, r3
 8000b3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f f68c 	uxth.w	r6, ip
 8000b46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b56:	fb04 f106 	mul.w	r1, r4, r6
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	d90a      	bls.n	8000b74 <__udivmoddi4+0x64>
 8000b5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b62:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b66:	f080 8112 	bcs.w	8000d8e <__udivmoddi4+0x27e>
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	f240 810f 	bls.w	8000d8e <__udivmoddi4+0x27e>
 8000b70:	3c02      	subs	r4, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	1a59      	subs	r1, r3, r1
 8000b76:	fa1f f38e 	uxth.w	r3, lr
 8000b7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000b82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b86:	fb00 f606 	mul.w	r6, r0, r6
 8000b8a:	429e      	cmp	r6, r3
 8000b8c:	d90a      	bls.n	8000ba4 <__udivmoddi4+0x94>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b96:	f080 80fc 	bcs.w	8000d92 <__udivmoddi4+0x282>
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	f240 80f9 	bls.w	8000d92 <__udivmoddi4+0x282>
 8000ba0:	4463      	add	r3, ip
 8000ba2:	3802      	subs	r0, #2
 8000ba4:	1b9b      	subs	r3, r3, r6
 8000ba6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11d      	cbz	r5, 8000bb6 <__udivmoddi4+0xa6>
 8000bae:	40d3      	lsrs	r3, r2
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d905      	bls.n	8000bca <__udivmoddi4+0xba>
 8000bbe:	b10d      	cbz	r5, 8000bc4 <__udivmoddi4+0xb4>
 8000bc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	e7f5      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000bca:	fab3 f183 	clz	r1, r3
 8000bce:	2900      	cmp	r1, #0
 8000bd0:	d146      	bne.n	8000c60 <__udivmoddi4+0x150>
 8000bd2:	42a3      	cmp	r3, r4
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xcc>
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	f0c0 80f0 	bcc.w	8000dbc <__udivmoddi4+0x2ac>
 8000bdc:	1a86      	subs	r6, r0, r2
 8000bde:	eb64 0303 	sbc.w	r3, r4, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d0e6      	beq.n	8000bb6 <__udivmoddi4+0xa6>
 8000be8:	e9c5 6300 	strd	r6, r3, [r5]
 8000bec:	e7e3      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	f040 8090 	bne.w	8000d14 <__udivmoddi4+0x204>
 8000bf4:	eba1 040c 	sub.w	r4, r1, ip
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	fa1f f78c 	uxth.w	r7, ip
 8000c00:	2101      	movs	r1, #1
 8000c02:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c12:	fb07 f006 	mul.w	r0, r7, r6
 8000c16:	4298      	cmp	r0, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x11c>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x11a>
 8000c24:	4298      	cmp	r0, r3
 8000c26:	f200 80cd 	bhi.w	8000dc4 <__udivmoddi4+0x2b4>
 8000c2a:	4626      	mov	r6, r4
 8000c2c:	1a1c      	subs	r4, r3, r0
 8000c2e:	fa1f f38e 	uxth.w	r3, lr
 8000c32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c36:	fb08 4410 	mls	r4, r8, r0, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb00 f707 	mul.w	r7, r0, r7
 8000c42:	429f      	cmp	r7, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x148>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x146>
 8000c50:	429f      	cmp	r7, r3
 8000c52:	f200 80b0 	bhi.w	8000db6 <__udivmoddi4+0x2a6>
 8000c56:	4620      	mov	r0, r4
 8000c58:	1bdb      	subs	r3, r3, r7
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0x9c>
 8000c60:	f1c1 0620 	rsb	r6, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6a:	431f      	orrs	r7, r3
 8000c6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c70:	fa04 f301 	lsl.w	r3, r4, r1
 8000c74:	ea43 030c 	orr.w	r3, r3, ip
 8000c78:	40f4      	lsrs	r4, r6
 8000c7a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c7e:	0c38      	lsrs	r0, r7, #16
 8000c80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c84:	fbb4 fef0 	udiv	lr, r4, r0
 8000c88:	fa1f fc87 	uxth.w	ip, r7
 8000c8c:	fb00 441e 	mls	r4, r0, lr, r4
 8000c90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c94:	fb0e f90c 	mul.w	r9, lr, ip
 8000c98:	45a1      	cmp	r9, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	d90a      	bls.n	8000cb6 <__udivmoddi4+0x1a6>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ca6:	f080 8084 	bcs.w	8000db2 <__udivmoddi4+0x2a2>
 8000caa:	45a1      	cmp	r9, r4
 8000cac:	f240 8081 	bls.w	8000db2 <__udivmoddi4+0x2a2>
 8000cb0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb4:	443c      	add	r4, r7
 8000cb6:	eba4 0409 	sub.w	r4, r4, r9
 8000cba:	fa1f f983 	uxth.w	r9, r3
 8000cbe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cc2:	fb00 4413 	mls	r4, r0, r3, r4
 8000cc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cca:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x1d2>
 8000cd2:	193c      	adds	r4, r7, r4
 8000cd4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cd8:	d267      	bcs.n	8000daa <__udivmoddi4+0x29a>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0x29a>
 8000cde:	3b02      	subs	r3, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ce6:	fba0 9302 	umull	r9, r3, r0, r2
 8000cea:	eba4 040c 	sub.w	r4, r4, ip
 8000cee:	429c      	cmp	r4, r3
 8000cf0:	46ce      	mov	lr, r9
 8000cf2:	469c      	mov	ip, r3
 8000cf4:	d351      	bcc.n	8000d9a <__udivmoddi4+0x28a>
 8000cf6:	d04e      	beq.n	8000d96 <__udivmoddi4+0x286>
 8000cf8:	b155      	cbz	r5, 8000d10 <__udivmoddi4+0x200>
 8000cfa:	ebb8 030e 	subs.w	r3, r8, lr
 8000cfe:	eb64 040c 	sbc.w	r4, r4, ip
 8000d02:	fa04 f606 	lsl.w	r6, r4, r6
 8000d06:	40cb      	lsrs	r3, r1
 8000d08:	431e      	orrs	r6, r3
 8000d0a:	40cc      	lsrs	r4, r1
 8000d0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d10:	2100      	movs	r1, #0
 8000d12:	e750      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f103 	lsr.w	r1, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa24 f303 	lsr.w	r3, r4, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	430c      	orrs	r4, r1
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d30:	fa1f f78c 	uxth.w	r7, ip
 8000d34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d38:	fb08 3110 	mls	r1, r8, r0, r3
 8000d3c:	0c23      	lsrs	r3, r4, #16
 8000d3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d42:	fb00 f107 	mul.w	r1, r0, r7
 8000d46:	4299      	cmp	r1, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x24c>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d52:	d22c      	bcs.n	8000dae <__udivmoddi4+0x29e>
 8000d54:	4299      	cmp	r1, r3
 8000d56:	d92a      	bls.n	8000dae <__udivmoddi4+0x29e>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d64:	fb08 3311 	mls	r3, r8, r1, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb01 f307 	mul.w	r3, r1, r7
 8000d70:	42a3      	cmp	r3, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x276>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d7c:	d213      	bcs.n	8000da6 <__udivmoddi4+0x296>
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	d911      	bls.n	8000da6 <__udivmoddi4+0x296>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	1ae4      	subs	r4, r4, r3
 8000d88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d8c:	e739      	b.n	8000c02 <__udivmoddi4+0xf2>
 8000d8e:	4604      	mov	r4, r0
 8000d90:	e6f0      	b.n	8000b74 <__udivmoddi4+0x64>
 8000d92:	4608      	mov	r0, r1
 8000d94:	e706      	b.n	8000ba4 <__udivmoddi4+0x94>
 8000d96:	45c8      	cmp	r8, r9
 8000d98:	d2ae      	bcs.n	8000cf8 <__udivmoddi4+0x1e8>
 8000d9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000da2:	3801      	subs	r0, #1
 8000da4:	e7a8      	b.n	8000cf8 <__udivmoddi4+0x1e8>
 8000da6:	4631      	mov	r1, r6
 8000da8:	e7ed      	b.n	8000d86 <__udivmoddi4+0x276>
 8000daa:	4603      	mov	r3, r0
 8000dac:	e799      	b.n	8000ce2 <__udivmoddi4+0x1d2>
 8000dae:	4630      	mov	r0, r6
 8000db0:	e7d4      	b.n	8000d5c <__udivmoddi4+0x24c>
 8000db2:	46d6      	mov	lr, sl
 8000db4:	e77f      	b.n	8000cb6 <__udivmoddi4+0x1a6>
 8000db6:	4463      	add	r3, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e74d      	b.n	8000c58 <__udivmoddi4+0x148>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e70f      	b.n	8000be4 <__udivmoddi4+0xd4>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	e730      	b.n	8000c2c <__udivmoddi4+0x11c>
 8000dca:	bf00      	nop

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <float_to_uint8_arry>:
extern float rpmLeft,rpmRight;//定义在main里的，用于存放rpm数据
extern int pulseLeft,pulseRight;
 float kp=8,ki=0,kd=0; int pulseLeft=0;int pulseRight=0;
float leftError=0,rightError=0; float error_last_left = 0,error_before_left= 0;float error_last_right = 0,error_before_right = 0;

int float_to_uint8_arry(uint8_t* u8Arry, float floatdata, int precision) {//float给定精度转换为uint8_t
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ddc:	6079      	str	r1, [r7, #4]
	int points = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
	float data1 = floatdata;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	61bb      	str	r3, [r7, #24]
	for (; data1 >=1; points++) {
 8000de6:	e00a      	b.n	8000dfe <float_to_uint8_arry+0x2e>
		data1 /= 10;
 8000de8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000dec:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000df0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df4:	edc7 7a06 	vstr	s15, [r7, #24]
	for (; data1 >=1; points++) {
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0e:	daeb      	bge.n	8000de8 <float_to_uint8_arry+0x18>
	}
	for (int i = 0; i < precision; i++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	e00a      	b.n	8000e2c <float_to_uint8_arry+0x5c>
		floatdata *= 10;
 8000e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e1a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e22:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int i = 0; i < precision; i++) {
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf0      	blt.n	8000e16 <float_to_uint8_arry+0x46>
	}
	for (int i = 0; i < points + precision + 1; i++) {
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	e081      	b.n	8000f3e <float_to_uint8_arry+0x16e>
		if (i != precision) {
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d075      	beq.n	8000f2e <float_to_uint8_arry+0x15e>
			if (i == 0) {
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d13c      	bne.n	8000ec2 <float_to_uint8_arry+0xf2>
				u8Arry[points + precision - i] = (uint8_t)((floor(fmod(floatdata, 10) + 0.5)) + '0');
 8000e48:	68b8      	ldr	r0, [r7, #8]
 8000e4a:	f7ff fb21 	bl	8000490 <__aeabi_f2d>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	ed9f 1b43 	vldr	d1, [pc, #268]	@ 8000f60 <float_to_uint8_arry+0x190>
 8000e56:	ec43 2b10 	vmov	d0, r2, r3
 8000e5a:	f005 fd65 	bl	8006928 <fmod>
 8000e5e:	ec51 0b10 	vmov	r0, r1, d0
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	4b40      	ldr	r3, [pc, #256]	@ (8000f68 <float_to_uint8_arry+0x198>)
 8000e68:	f7ff f9b4 	bl	80001d4 <__adddf3>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	ec43 2b17 	vmov	d7, r2, r3
 8000e74:	eeb0 0a47 	vmov.f32	s0, s14
 8000e78:	eef0 0a67 	vmov.f32	s1, s15
 8000e7c:	f005 fd84 	bl	8006988 <floor>
 8000e80:	ec51 0b10 	vmov	r0, r1, d0
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	4b38      	ldr	r3, [pc, #224]	@ (8000f6c <float_to_uint8_arry+0x19c>)
 8000e8a:	f7ff f9a3 	bl	80001d4 <__adddf3>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	441a      	add	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	189c      	adds	r4, r3, r2
 8000ea6:	f7ff fdfb 	bl	8000aa0 <__aeabi_d2uiz>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	7023      	strb	r3, [r4, #0]
				floatdata /= 10;
 8000eb0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000eb4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ebc:	edc7 7a02 	vstr	s15, [r7, #8]
 8000ec0:	e03a      	b.n	8000f38 <float_to_uint8_arry+0x168>
			}
			else {
				u8Arry[points + precision - i] = (uint8_t)((floor(fmod(floatdata, 10))) + '0');
 8000ec2:	68b8      	ldr	r0, [r7, #8]
 8000ec4:	f7ff fae4 	bl	8000490 <__aeabi_f2d>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 8000f60 <float_to_uint8_arry+0x190>
 8000ed0:	ec43 2b10 	vmov	d0, r2, r3
 8000ed4:	f005 fd28 	bl	8006928 <fmod>
 8000ed8:	eeb0 7a40 	vmov.f32	s14, s0
 8000edc:	eef0 7a60 	vmov.f32	s15, s1
 8000ee0:	eeb0 0a47 	vmov.f32	s0, s14
 8000ee4:	eef0 0a67 	vmov.f32	s1, s15
 8000ee8:	f005 fd4e 	bl	8006988 <floor>
 8000eec:	ec51 0b10 	vmov	r0, r1, d0
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <float_to_uint8_arry+0x19c>)
 8000ef6:	f7ff f96d 	bl	80001d4 <__adddf3>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	441a      	add	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	189c      	adds	r4, r3, r2
 8000f12:	f7ff fdc5 	bl	8000aa0 <__aeabi_d2uiz>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	7023      	strb	r3, [r4, #0]
				floatdata /= 10;
 8000f1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f20:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f28:	edc7 7a02 	vstr	s15, [r7, #8]
 8000f2c:	e004      	b.n	8000f38 <float_to_uint8_arry+0x168>
			}
		}
		else {
			u8Arry[points] = '.';
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	222e      	movs	r2, #46	@ 0x2e
 8000f36:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < points + precision + 1; i++) {
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	f77f af77 	ble.w	8000e3a <float_to_uint8_arry+0x6a>
		}
	}
	return points + precision + 1;
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	3301      	adds	r3, #1

}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3724      	adds	r7, #36	@ 0x24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	f3af 8000 	nop.w
 8000f60:	00000000 	.word	0x00000000
 8000f64:	40240000 	.word	0x40240000
 8000f68:	3fe00000 	.word	0x3fe00000
 8000f6c:	40480000 	.word	0x40480000

08000f70 <uint8_to_float>:


// Function to convert uint8_t array to float
float uint8_to_float(uint8_t* u8arry, int point_length) {
 8000f70:	b480      	push	{r7}
 8000f72:	b08b      	sub	sp, #44	@ 0x2c
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
	int points = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
	int status = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
	int num_length = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
	float number = 0;
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
	for (; num_length < 256; num_length++) {
 8000f8c:	e013      	b.n	8000fb6 <uint8_to_float+0x46>
		if (u8arry[num_length] == '.') {
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f98:	d101      	bne.n	8000f9e <uint8_to_float+0x2e>
			points = num_length;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (u8arry[num_length] == 'o') {
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b6f      	cmp	r3, #111	@ 0x6f
 8000fa8:	d102      	bne.n	8000fb0 <uint8_to_float+0x40>
			status = num_length;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	623b      	str	r3, [r7, #32]
			break;
 8000fae:	e005      	b.n	8000fbc <uint8_to_float+0x4c>
	for (; num_length < 256; num_length++) {
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	2bff      	cmp	r3, #255	@ 0xff
 8000fba:	dde8      	ble.n	8000f8e <uint8_to_float+0x1e>
		}
	}
	if (status == 0) {
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <uint8_to_float+0x56>
		return -1;
 8000fc2:	4b47      	ldr	r3, [pc, #284]	@ (80010e0 <uint8_to_float+0x170>)
 8000fc4:	e083      	b.n	80010ce <uint8_to_float+0x15e>
	}
	else {
		float tens = 1;
 8000fc6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fca:	617b      	str	r3, [r7, #20]

		if (points == 0) {
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d121      	bne.n	8001016 <uint8_to_float+0xa6>
			for (size_t i= 0; i < num_length; i++) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e019      	b.n	800100c <uint8_to_float+0x9c>
			number += (float)(u8arry[i] - '0');
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	3b30      	subs	r3, #48	@ 0x30
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fea:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff2:	edc7 7a06 	vstr	s15, [r7, #24]
			number *= 10;
 8000ff6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ffa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001002:	edc7 7a06 	vstr	s15, [r7, #24]
			for (size_t i= 0; i < num_length; i++) {
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	3301      	adds	r3, #1
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3e1      	bcc.n	8000fd8 <uint8_to_float+0x68>
 8001014:	e04f      	b.n	80010b6 <uint8_to_float+0x146>
		}
			}
			else {
				for (int i = 0; i <= points + point_length; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e046      	b.n	80010aa <uint8_to_float+0x13a>
				if (i < points) {
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001020:	429a      	cmp	r2, r3
 8001022:	da17      	bge.n	8001054 <uint8_to_float+0xe4>
					number += (float)(u8arry[i] - '0');
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	3b30      	subs	r3, #48	@ 0x30
 800102e:	ee07 3a90 	vmov	s15, r3
 8001032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001036:	ed97 7a06 	vldr	s14, [r7, #24]
 800103a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103e:	edc7 7a06 	vstr	s15, [r7, #24]
					number *= 10;
 8001042:	edd7 7a06 	vldr	s15, [r7, #24]
 8001046:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800104a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800104e:	edc7 7a06 	vstr	s15, [r7, #24]
 8001052:	e027      	b.n	80010a4 <uint8_to_float+0x134>
				}
				else if (i > points) {
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001058:	429a      	cmp	r2, r3
 800105a:	dd1b      	ble.n	8001094 <uint8_to_float+0x124>
					tens /= 10;
 800105c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001060:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001068:	edc7 7a05 	vstr	s15, [r7, #20]
					number += ((float)(u8arry[i] - '0')) * tens;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	3b30      	subs	r3, #48	@ 0x30
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001086:	ed97 7a06 	vldr	s14, [r7, #24]
 800108a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108e:	edc7 7a06 	vstr	s15, [r7, #24]
 8001092:	e007      	b.n	80010a4 <uint8_to_float+0x134>
				}
				else {
					number /= 10;
 8001094:	ed97 7a06 	vldr	s14, [r7, #24]
 8001098:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800109c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a0:	edc7 7a06 	vstr	s15, [r7, #24]
				for (int i = 0; i <= points + point_length; i++) {
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	ddb2      	ble.n	800101c <uint8_to_float+0xac>
				}
				}
			}

		if (points == 0) {
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d107      	bne.n	80010cc <uint8_to_float+0x15c>
			number /= 10;
 80010bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80010c0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80010c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c8:	edc7 7a06 	vstr	s15, [r7, #24]
		}
		return number;
 80010cc:	69bb      	ldr	r3, [r7, #24]
	}

}
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	372c      	adds	r7, #44	@ 0x2c
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	bf800000 	.word	0xbf800000

080010e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	 if (htim==&htim7){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d10d      	bne.n	8001110 <HAL_TIM_PeriodElapsedCallback+0x2c>
		 setRightRpm(rpmRight);
 80010f4:	4b09      	ldr	r3, [pc, #36]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	f000 fab1 	bl	8001664 <setRightRpm>
		 setLeftRpm(rpmLeft);
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	eeb0 0a67 	vmov.f32	s0, s15
 800110c:	f000 fa82 	bl	8001614 <setLeftRpm>
	}

}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000025c 	.word	0x2000025c
 800111c:	200000a8 	.word	0x200000a8
 8001120:	200000ac 	.word	0x200000ac

08001124 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){//需要在main里启动接收函数
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
	if(huart==&huart5){
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4e      	ldr	r2, [pc, #312]	@ (800126c <HAL_UARTEx_RxEventCallback+0x148>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d16f      	bne.n	8001218 <HAL_UARTEx_RxEventCallback+0xf4>
		if (rxData[0]=='w'||rxData[0]=='s'||rxData[0]=='d'||rxData[0]=='a'){//数据形式应该是“w1000”这样的
 8001138:	4b4d      	ldr	r3, [pc, #308]	@ (8001270 <HAL_UARTEx_RxEventCallback+0x14c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b77      	cmp	r3, #119	@ 0x77
 800113e:	d00b      	beq.n	8001158 <HAL_UARTEx_RxEventCallback+0x34>
 8001140:	4b4b      	ldr	r3, [pc, #300]	@ (8001270 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b73      	cmp	r3, #115	@ 0x73
 8001146:	d007      	beq.n	8001158 <HAL_UARTEx_RxEventCallback+0x34>
 8001148:	4b49      	ldr	r3, [pc, #292]	@ (8001270 <HAL_UARTEx_RxEventCallback+0x14c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b64      	cmp	r3, #100	@ 0x64
 800114e:	d003      	beq.n	8001158 <HAL_UARTEx_RxEventCallback+0x34>
 8001150:	4b47      	ldr	r3, [pc, #284]	@ (8001270 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b61      	cmp	r3, #97	@ 0x61
 8001156:	d119      	bne.n	800118c <HAL_UARTEx_RxEventCallback+0x68>
		setDirection(rxData[0]);
 8001158:	4b45      	ldr	r3, [pc, #276]	@ (8001270 <HAL_UARTEx_RxEventCallback+0x14c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 fc99 	bl	8001a94 <setDirection>
		rpmLeft=uint8_to_float(rxData+1,0);
 8001162:	4b44      	ldr	r3, [pc, #272]	@ (8001274 <HAL_UARTEx_RxEventCallback+0x150>)
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff02 	bl	8000f70 <uint8_to_float>
 800116c:	eef0 7a40 	vmov.f32	s15, s0
 8001170:	4b41      	ldr	r3, [pc, #260]	@ (8001278 <HAL_UARTEx_RxEventCallback+0x154>)
 8001172:	edc3 7a00 	vstr	s15, [r3]
		rpmRight=uint8_to_float(rxData+1,0);
 8001176:	4b3f      	ldr	r3, [pc, #252]	@ (8001274 <HAL_UARTEx_RxEventCallback+0x150>)
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fef8 	bl	8000f70 <uint8_to_float>
 8001180:	eef0 7a40 	vmov.f32	s15, s0
 8001184:	4b3d      	ldr	r3, [pc, #244]	@ (800127c <HAL_UARTEx_RxEventCallback+0x158>)
 8001186:	edc3 7a00 	vstr	s15, [r3]
 800118a:	e038      	b.n	80011fe <HAL_UARTEx_RxEventCallback+0xda>
		}else if (rxData[0]=='P'){//数据形式应该是"p0.5"这样的
 800118c:	4b38      	ldr	r3, [pc, #224]	@ (8001270 <HAL_UARTEx_RxEventCallback+0x14c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b50      	cmp	r3, #80	@ 0x50
 8001192:	d10a      	bne.n	80011aa <HAL_UARTEx_RxEventCallback+0x86>
			kp=uint8_to_float(rxData+1,2);
 8001194:	4b37      	ldr	r3, [pc, #220]	@ (8001274 <HAL_UARTEx_RxEventCallback+0x150>)
 8001196:	2102      	movs	r1, #2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fee9 	bl	8000f70 <uint8_to_float>
 800119e:	eef0 7a40 	vmov.f32	s15, s0
 80011a2:	4b37      	ldr	r3, [pc, #220]	@ (8001280 <HAL_UARTEx_RxEventCallback+0x15c>)
 80011a4:	edc3 7a00 	vstr	s15, [r3]
 80011a8:	e029      	b.n	80011fe <HAL_UARTEx_RxEventCallback+0xda>
		}else if (rxData[0]=='I'){
 80011aa:	4b31      	ldr	r3, [pc, #196]	@ (8001270 <HAL_UARTEx_RxEventCallback+0x14c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b49      	cmp	r3, #73	@ 0x49
 80011b0:	d10a      	bne.n	80011c8 <HAL_UARTEx_RxEventCallback+0xa4>
			ki=uint8_to_float(rxData+1,2);
 80011b2:	4b30      	ldr	r3, [pc, #192]	@ (8001274 <HAL_UARTEx_RxEventCallback+0x150>)
 80011b4:	2102      	movs	r1, #2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff feda 	bl	8000f70 <uint8_to_float>
 80011bc:	eef0 7a40 	vmov.f32	s15, s0
 80011c0:	4b30      	ldr	r3, [pc, #192]	@ (8001284 <HAL_UARTEx_RxEventCallback+0x160>)
 80011c2:	edc3 7a00 	vstr	s15, [r3]
 80011c6:	e01a      	b.n	80011fe <HAL_UARTEx_RxEventCallback+0xda>
		}else if (rxData[0]=='D'){
 80011c8:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <HAL_UARTEx_RxEventCallback+0x14c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b44      	cmp	r3, #68	@ 0x44
 80011ce:	d10a      	bne.n	80011e6 <HAL_UARTEx_RxEventCallback+0xc2>
			kd=uint8_to_float(rxData+1,2);
 80011d0:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <HAL_UARTEx_RxEventCallback+0x150>)
 80011d2:	2102      	movs	r1, #2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fecb 	bl	8000f70 <uint8_to_float>
 80011da:	eef0 7a40 	vmov.f32	s15, s0
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <HAL_UARTEx_RxEventCallback+0x164>)
 80011e0:	edc3 7a00 	vstr	s15, [r3]
 80011e4:	e00b      	b.n	80011fe <HAL_UARTEx_RxEventCallback+0xda>
		}else if (rxData[0]=='q'){
 80011e6:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <HAL_UARTEx_RxEventCallback+0x14c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b71      	cmp	r3, #113	@ 0x71
 80011ec:	d107      	bne.n	80011fe <HAL_UARTEx_RxEventCallback+0xda>
			rpmLeft=0;
 80011ee:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <HAL_UARTEx_RxEventCallback+0x154>)
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
			rpmRight=0;
 80011f6:	4b21      	ldr	r3, [pc, #132]	@ (800127c <HAL_UARTEx_RxEventCallback+0x158>)
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
			/*HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);*/
		}
		uint8_t message[]="Order Received!";
 80011fe:	4b23      	ldr	r3, [pc, #140]	@ (800128c <HAL_UARTEx_RxEventCallback+0x168>)
 8001200:	f107 0408 	add.w	r4, r7, #8
 8001204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		//float_to_uint8_arry(message,pulseLeft,0);
		//float_to_uint8_arry(message+4,pulseRight,0);
		HAL_UART_Transmit_DMA(&huart5, message, sizeof message);
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	2210      	movs	r2, #16
 8001210:	4619      	mov	r1, r3
 8001212:	4816      	ldr	r0, [pc, #88]	@ (800126c <HAL_UARTEx_RxEventCallback+0x148>)
 8001214:	f004 f9c8 	bl	80055a8 <HAL_UART_Transmit_DMA>
	}
	memset(rxData,0,sizeof rxData);
 8001218:	2232      	movs	r2, #50	@ 0x32
 800121a:	2100      	movs	r1, #0
 800121c:	4814      	ldr	r0, [pc, #80]	@ (8001270 <HAL_UARTEx_RxEventCallback+0x14c>)
 800121e:	f005 fd39 	bl	8006c94 <memset>
	rxData[0]=0;
 8001222:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
	leftError=0;rightError=0;error_last_left = 0;error_before_left= 0;error_last_right = 0;error_before_right = 0;
 8001228:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <HAL_UARTEx_RxEventCallback+0x16c>)
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_UARTEx_RxEventCallback+0x170>)
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_UARTEx_RxEventCallback+0x174>)
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <HAL_UARTEx_RxEventCallback+0x178>)
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <HAL_UARTEx_RxEventCallback+0x17c>)
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_UARTEx_RxEventCallback+0x180>)
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxData, sizeof rxData);
 8001258:	2232      	movs	r2, #50	@ 0x32
 800125a:	4905      	ldr	r1, [pc, #20]	@ (8001270 <HAL_UARTEx_RxEventCallback+0x14c>)
 800125c:	4803      	ldr	r0, [pc, #12]	@ (800126c <HAL_UARTEx_RxEventCallback+0x148>)
 800125e:	f004 fa13 	bl	8005688 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001262:	bf00      	nop
 8001264:	371c      	adds	r7, #28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd90      	pop	{r4, r7, pc}
 800126a:	bf00      	nop
 800126c:	20000334 	.word	0x20000334
 8001270:	200000b0 	.word	0x200000b0
 8001274:	200000b1 	.word	0x200000b1
 8001278:	200000ac 	.word	0x200000ac
 800127c:	200000a8 	.word	0x200000a8
 8001280:	20000000 	.word	0x20000000
 8001284:	20000080 	.word	0x20000080
 8001288:	20000084 	.word	0x20000084
 800128c:	08006d10 	.word	0x08006d10
 8001290:	20000090 	.word	0x20000090
 8001294:	20000094 	.word	0x20000094
 8001298:	20000098 	.word	0x20000098
 800129c:	2000009c 	.word	0x2000009c
 80012a0:	200000a0 	.word	0x200000a0
 80012a4:	200000a4 	.word	0x200000a4

080012a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <MX_DMA_Init+0x6c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <MX_DMA_Init+0x6c>)
 80012b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <MX_DMA_Init+0x6c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	200b      	movs	r0, #11
 80012d0:	f001 fd1d 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012d4:	200b      	movs	r0, #11
 80012d6:	f001 fd36 	bl	8002d46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	200d      	movs	r0, #13
 80012e0:	f001 fd15 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012e4:	200d      	movs	r0, #13
 80012e6:	f001 fd2e 	bl	8002d46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	200f      	movs	r0, #15
 80012f0:	f001 fd0d 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80012f4:	200f      	movs	r0, #15
 80012f6:	f001 fd26 	bl	8002d46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	202f      	movs	r0, #47	@ 0x2f
 8001300:	f001 fd05 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001304:	202f      	movs	r0, #47	@ 0x2f
 8001306:	f001 fd1e 	bl	8002d46 <HAL_NVIC_EnableIRQ>

}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <MX_GPIO_Init+0xb4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a25      	ldr	r2, [pc, #148]	@ (80013cc <MX_GPIO_Init+0xb4>)
 8001338:	f043 0310 	orr.w	r3, r3, #16
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b23      	ldr	r3, [pc, #140]	@ (80013cc <MX_GPIO_Init+0xb4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <MX_GPIO_Init+0xb4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a1e      	ldr	r2, [pc, #120]	@ (80013cc <MX_GPIO_Init+0xb4>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <MX_GPIO_Init+0xb4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <MX_GPIO_Init+0xb4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <MX_GPIO_Init+0xb4>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <MX_GPIO_Init+0xb4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_GPIO_Init+0xb4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <MX_GPIO_Init+0xb4>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_GPIO_Init+0xb4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN2_Pin|IN3_Pin|IN4_Pin|IN1_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	211e      	movs	r1, #30
 80013a2:	480b      	ldr	r0, [pc, #44]	@ (80013d0 <MX_GPIO_Init+0xb8>)
 80013a4:	f002 fa88 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = IN2_Pin|IN3_Pin|IN4_Pin|IN1_Pin;
 80013a8:	231e      	movs	r3, #30
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <MX_GPIO_Init+0xb8>)
 80013c0:	f002 f8de 	bl	8003580 <HAL_GPIO_Init>

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	@ 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40021000 	.word	0x40021000

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0c2      	sub	sp, #264	@ 0x108
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013da:	f001 fb27 	bl	8002a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 f8ab 	bl	8001538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f7ff ff99 	bl	8001318 <MX_GPIO_Init>
  MX_DMA_Init();
 80013e6:	f7ff ff5f 	bl	80012a8 <MX_DMA_Init>
  MX_TIM2_Init();
 80013ea:	f000 fd25 	bl	8001e38 <MX_TIM2_Init>
  MX_TIM4_Init();
 80013ee:	f000 fdc3 	bl	8001f78 <MX_TIM4_Init>
  MX_TIM5_Init();
 80013f2:	f000 fe15 	bl	8002020 <MX_TIM5_Init>
  MX_TIM1_Init();
 80013f6:	f000 fc67 	bl	8001cc8 <MX_TIM1_Init>
  MX_UART5_Init();
 80013fa:	f001 f947 	bl	800268c <MX_UART5_Init>
  MX_UART4_Init();
 80013fe:	f001 f91b 	bl	8002638 <MX_UART4_Init>
  MX_TIM7_Init();
 8001402:	f000 fe8f 	bl	8002124 <MX_TIM7_Init>
  MX_TIM3_Init();
 8001406:	f000 fd6b 	bl	8001ee0 <MX_TIM3_Init>
  MX_TIM8_Init();
 800140a:	f000 fec1 	bl	8002190 <MX_TIM8_Init>
  	/*HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_ALL);//�???启电机PWM，最�???255
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_ALL);//�???启舵机PWM，最�???1999
  	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);//左轮编码�???
  	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);//右轮编码�???
  	HAL_TIM_Base_Start_IT(&htim7);//中断定时器，50ms�???次中�???*/
  timersInit();
 800140e:	f001 f8e5 	bl	80025dc <timersInit>
  __HAL_TIM_SET_COUNTER(&htim2,32768);
 8001412:	4b43      	ldr	r3, [pc, #268]	@ (8001520 <main+0x14c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800141a:	625a      	str	r2, [r3, #36]	@ 0x24
   __HAL_TIM_SET_COUNTER(&htim4,32768);
 800141c:	4b41      	ldr	r3, [pc, #260]	@ (8001524 <main+0x150>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001424:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxData, sizeof rxData);
 8001426:	2232      	movs	r2, #50	@ 0x32
 8001428:	493f      	ldr	r1, [pc, #252]	@ (8001528 <main+0x154>)
 800142a:	4840      	ldr	r0, [pc, #256]	@ (800152c <main+0x158>)
 800142c:	f004 f92c 	bl	8005688 <HAL_UARTEx_ReceiveToIdle_DMA>
  uint8_t cRt[256]={};
 8001430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	3304      	adds	r3, #4
 800143e:	22fc      	movs	r2, #252	@ 0xfc
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f005 fc26 	bl	8006c94 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  currentLeft=getLeftRpm(&htim2);
 8001448:	4835      	ldr	r0, [pc, #212]	@ (8001520 <main+0x14c>)
 800144a:	f000 f9f3 	bl	8001834 <getLeftRpm>
 800144e:	eef0 7a40 	vmov.f32	s15, s0
 8001452:	4b37      	ldr	r3, [pc, #220]	@ (8001530 <main+0x15c>)
 8001454:	edc3 7a00 	vstr	s15, [r3]
	  currentRight=getRightRpm(&htim4);
 8001458:	4832      	ldr	r0, [pc, #200]	@ (8001524 <main+0x150>)
 800145a:	f000 fa49 	bl	80018f0 <getRightRpm>
 800145e:	eef0 7a40 	vmov.f32	s15, s0
 8001462:	4b34      	ldr	r3, [pc, #208]	@ (8001534 <main+0x160>)
 8001464:	edc3 7a00 	vstr	s15, [r3]
	  memset(cRt,0,sizeof cRt);
 8001468:	463b      	mov	r3, r7
 800146a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f005 fc0f 	bl	8006c94 <memset>
	  cRt[0]='r';
 8001476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800147a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800147e:	2272      	movs	r2, #114	@ 0x72
 8001480:	701a      	strb	r2, [r3, #0]
	  int p= float_to_uint8_arry(cRt+1, currentRight, 2);
 8001482:	463b      	mov	r3, r7
 8001484:	3301      	adds	r3, #1
 8001486:	4a2b      	ldr	r2, [pc, #172]	@ (8001534 <main+0x160>)
 8001488:	edd2 7a00 	vldr	s15, [r2]
 800148c:	2102      	movs	r1, #2
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fc9c 	bl	8000dd0 <float_to_uint8_arry>
 8001498:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	  cRt[p+3]=' ';
 800149c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80014a0:	3303      	adds	r3, #3
 80014a2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80014a6:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014aa:	2120      	movs	r1, #32
 80014ac:	54d1      	strb	r1, [r2, r3]
	  cRt[p+4]='l';
 80014ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80014b2:	3304      	adds	r3, #4
 80014b4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80014b8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014bc:	216c      	movs	r1, #108	@ 0x6c
 80014be:	54d1      	strb	r1, [r2, r3]
	  int pm=float_to_uint8_arry(cRt+p+5, currentLeft, 2);
 80014c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80014c4:	3305      	adds	r3, #5
 80014c6:	463a      	mov	r2, r7
 80014c8:	4413      	add	r3, r2
 80014ca:	4a19      	ldr	r2, [pc, #100]	@ (8001530 <main+0x15c>)
 80014cc:	edd2 7a00 	vldr	s15, [r2]
 80014d0:	2102      	movs	r1, #2
 80014d2:	eeb0 0a67 	vmov.f32	s0, s15
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fc7a 	bl	8000dd0 <float_to_uint8_arry>
 80014dc:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
	  cRt[p+pm+9]='\n';
 80014e0:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80014e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80014e8:	4413      	add	r3, r2
 80014ea:	3309      	adds	r3, #9
 80014ec:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80014f0:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014f4:	210a      	movs	r1, #10
 80014f6:	54d1      	strb	r1, [r2, r3]
	  HAL_UART_Transmit_DMA(&huart5, cRt, sizeof rxData);
 80014f8:	463b      	mov	r3, r7
 80014fa:	2232      	movs	r2, #50	@ 0x32
 80014fc:	4619      	mov	r1, r3
 80014fe:	480b      	ldr	r0, [pc, #44]	@ (800152c <main+0x158>)
 8001500:	f004 f852 	bl	80055a8 <HAL_UART_Transmit_DMA>
	  HAL_Delay(1000);
 8001504:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001508:	f001 fb02 	bl	8002b10 <HAL_Delay>
	  memset(cRt,0,sizeof cRt);
 800150c:	463b      	mov	r3, r7
 800150e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f005 fbbd 	bl	8006c94 <memset>
  {
 800151a:	bf00      	nop
 800151c:	e794      	b.n	8001448 <main+0x74>
 800151e:	bf00      	nop
 8001520:	2000013c 	.word	0x2000013c
 8001524:	200001cc 	.word	0x200001cc
 8001528:	200000b0 	.word	0x200000b0
 800152c:	20000334 	.word	0x20000334
 8001530:	200000ec 	.word	0x200000ec
 8001534:	200000f0 	.word	0x200000f0

08001538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b094      	sub	sp, #80	@ 0x50
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	2230      	movs	r2, #48	@ 0x30
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f005 fba4 	bl	8006c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <SystemClock_Config+0xc8>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	4a26      	ldr	r2, [pc, #152]	@ (8001600 <SystemClock_Config+0xc8>)
 8001566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	@ 0x40
 800156c:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <SystemClock_Config+0xc8>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <SystemClock_Config+0xcc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a20      	ldr	r2, [pc, #128]	@ (8001604 <SystemClock_Config+0xcc>)
 8001582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <SystemClock_Config+0xcc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159c:	2310      	movs	r3, #16
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a0:	2302      	movs	r3, #2
 80015a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015a8:	2308      	movs	r3, #8
 80015aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80015ac:	2348      	movs	r3, #72	@ 0x48
 80015ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b0:	2302      	movs	r3, #2
 80015b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015b4:	2304      	movs	r3, #4
 80015b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0320 	add.w	r3, r7, #32
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 f995 	bl	80038ec <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015c8:	f000 f81e 	bl	8001608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	230f      	movs	r3, #15
 80015ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d0:	2302      	movs	r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	2102      	movs	r1, #2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 fbf7 	bl	8003ddc <HAL_RCC_ClockConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015f4:	f000 f808 	bl	8001608 <Error_Handler>
  }
}
 80015f8:	bf00      	nop
 80015fa:	3750      	adds	r7, #80	@ 0x50
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <Error_Handler+0x8>

08001614 <setLeftRpm>:
extern float leftError,rightError, error_last_left ,error_before_left, error_last_right ,error_before_right ;
uint16_t count_num_left_past=-1;
uint16_t count_num_right_past=-1;
extern int countnum_rightcircuance;
extern int countnum_leftcircuance;
void setLeftRpm(float rpm){
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	ed87 0a01 	vstr	s0, [r7, #4]
	float currentRpm=getLeftRpm(&htim2);
 800161e:	480e      	ldr	r0, [pc, #56]	@ (8001658 <setLeftRpm+0x44>)
 8001620:	f000 f908 	bl	8001834 <getLeftRpm>
 8001624:	ed87 0a03 	vstr	s0, [r7, #12]
	pulseLeft+=pidDiffLeft(rpm, currentRpm, &leftError);
 8001628:	480c      	ldr	r0, [pc, #48]	@ (800165c <setLeftRpm+0x48>)
 800162a:	edd7 0a03 	vldr	s1, [r7, #12]
 800162e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001632:	f000 f83f 	bl	80016b4 <pidDiffLeft>
 8001636:	4602      	mov	r2, r0
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <setLeftRpm+0x4c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4413      	add	r3, r2
 800163e:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <setLeftRpm+0x4c>)
 8001640:	6013      	str	r3, [r2, #0]
	setLeftPWM(pulseLeft,TIM_CHANNEL_3);
 8001642:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <setLeftRpm+0x4c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2108      	movs	r1, #8
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f9e9 	bl	8001a20 <setLeftPWM>
}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000013c 	.word	0x2000013c
 800165c:	20000090 	.word	0x20000090
 8001660:	20000088 	.word	0x20000088

08001664 <setRightRpm>:
void setRightRpm(float rpm){
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	ed87 0a01 	vstr	s0, [r7, #4]
	float currentRpm=getRightRpm(&htim4);
 800166e:	480e      	ldr	r0, [pc, #56]	@ (80016a8 <setRightRpm+0x44>)
 8001670:	f000 f93e 	bl	80018f0 <getRightRpm>
 8001674:	ed87 0a03 	vstr	s0, [r7, #12]
	pulseRight+=pidDiffRight(rpm, currentRpm, &rightError);
 8001678:	480c      	ldr	r0, [pc, #48]	@ (80016ac <setRightRpm+0x48>)
 800167a:	edd7 0a03 	vldr	s1, [r7, #12]
 800167e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001682:	f000 f877 	bl	8001774 <pidDiffRight>
 8001686:	4602      	mov	r2, r0
 8001688:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <setRightRpm+0x4c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4413      	add	r3, r2
 800168e:	4a08      	ldr	r2, [pc, #32]	@ (80016b0 <setRightRpm+0x4c>)
 8001690:	6013      	str	r3, [r2, #0]
	setRightPWM(pulseRight,TIM_CHANNEL_4);
 8001692:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <setRightRpm+0x4c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	210c      	movs	r1, #12
 8001698:	4618      	mov	r0, r3
 800169a:	f000 f987 	bl	80019ac <setRightPWM>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200001cc 	.word	0x200001cc
 80016ac:	20000094 	.word	0x20000094
 80016b0:	2000008c 	.word	0x2000008c

080016b4 <pidDiffLeft>:
void setPID(char factor,float index){
	if (factor=='p'){kp=index;}
	else if (factor=='i'){ki=index;}
	else if (factor=='d'){kd=index;};
}
int pidDiffLeft(float target,float present,float * erro){
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80016be:	edc7 0a02 	vstr	s1, [r7, #8]
 80016c2:	6078      	str	r0, [r7, #4]
	float error = target - present;
 80016c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80016c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d0:	edc7 7a05 	vstr	s15, [r7, #20]

		float pwm_pid=0;
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
		*erro = error;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	601a      	str	r2, [r3, #0]
		pwm_pid = kp*(error- error_last_left)+ki* error
 80016e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <pidDiffLeft+0xac>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80016ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <pidDiffLeft+0xb0>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <pidDiffLeft+0xb4>)
 80016fa:	edd3 6a00 	vldr	s13, [r3]
 80016fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001706:	ee37 7a27 	vadd.f32	s14, s14, s15
				+kd*( error-2* error_last_left+ error_before_left);
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <pidDiffLeft+0xac>)
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001714:	edd7 6a05 	vldr	s13, [r7, #20]
 8001718:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <pidDiffLeft+0xb8>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001726:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <pidDiffLeft+0xbc>)
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		pwm_pid = kp*(error- error_last_left)+ki* error
 8001730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001734:	edc7 7a04 	vstr	s15, [r7, #16]
		 error_before_left =  error_last_left;	  	    // 保存上上次误差
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <pidDiffLeft+0xac>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <pidDiffLeft+0xb8>)
 800173e:	6013      	str	r3, [r2, #0]
		 error_last_left =  error;	              // 保存上次偏差
 8001740:	4a07      	ldr	r2, [pc, #28]	@ (8001760 <pidDiffLeft+0xac>)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	6013      	str	r3, [r2, #0]
		 return (int)pwm_pid;
 8001746:	edd7 7a04 	vldr	s15, [r7, #16]
 800174a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174e:	ee17 3a90 	vmov	r3, s15
}
 8001752:	4618      	mov	r0, r3
 8001754:	371c      	adds	r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000098 	.word	0x20000098
 8001764:	20000000 	.word	0x20000000
 8001768:	20000080 	.word	0x20000080
 800176c:	2000009c 	.word	0x2000009c
 8001770:	20000084 	.word	0x20000084

08001774 <pidDiffRight>:
int pidDiffRight(float target,float present,float * erro){
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	ed87 0a03 	vstr	s0, [r7, #12]
 800177e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001782:	6078      	str	r0, [r7, #4]
	float error = target - present;
 8001784:	ed97 7a03 	vldr	s14, [r7, #12]
 8001788:	edd7 7a02 	vldr	s15, [r7, #8]
 800178c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001790:	edc7 7a05 	vstr	s15, [r7, #20]

		float pwm_pid=0;
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
		*erro = error;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	601a      	str	r2, [r3, #0]
		pwm_pid = kp*(error- error_last_right)+ki* error
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <pidDiffRight+0xac>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80017aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <pidDiffRight+0xb0>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <pidDiffRight+0xb4>)
 80017ba:	edd3 6a00 	vldr	s13, [r3]
 80017be:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+kd*( error-2* error_last_right+ error_before_right);
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <pidDiffRight+0xac>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017d4:	edd7 6a05 	vldr	s13, [r7, #20]
 80017d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <pidDiffRight+0xb8>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <pidDiffRight+0xbc>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
		pwm_pid = kp*(error- error_last_right)+ki* error
 80017f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f4:	edc7 7a04 	vstr	s15, [r7, #16]
		 error_before_right =  error_last_right;	  	    // 保存上上次误差
 80017f8:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <pidDiffRight+0xac>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0b      	ldr	r2, [pc, #44]	@ (800182c <pidDiffRight+0xb8>)
 80017fe:	6013      	str	r3, [r2, #0]
		 error_last_right =  error;	              // 保存上次偏差
 8001800:	4a07      	ldr	r2, [pc, #28]	@ (8001820 <pidDiffRight+0xac>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	6013      	str	r3, [r2, #0]
		 return (int)pwm_pid;
 8001806:	edd7 7a04 	vldr	s15, [r7, #16]
 800180a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800180e:	ee17 3a90 	vmov	r3, s15
}
 8001812:	4618      	mov	r0, r3
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200000a0 	.word	0x200000a0
 8001824:	20000000 	.word	0x20000000
 8001828:	20000080 	.word	0x20000080
 800182c:	200000a4 	.word	0x200000a4
 8001830:	20000084 	.word	0x20000084

08001834 <getLeftRpm>:
float getLeftRpm(TIM_HandleTypeDef * htim){
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	uint16_t countnum=0;
 800183c:	2300      	movs	r3, #0
 800183e:	82fb      	strh	r3, [r7, #22]
	if(countnum_leftcircuance!=0){
 8001840:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <getLeftRpm+0xac>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d035      	beq.n	80018b4 <getLeftRpm+0x80>
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)){
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	2b10      	cmp	r3, #16
 8001854:	d10d      	bne.n	8001872 <getLeftRpm+0x3e>
		countnum =32768-__HAL_TIM_GET_COUNTER(htim);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <getLeftRpm+0xb0>)
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	82fb      	strh	r3, [r7, #22]
		count_num_left_past=countnum;
 8001864:	4a20      	ldr	r2, [pc, #128]	@ (80018e8 <getLeftRpm+0xb4>)
 8001866:	8afb      	ldrh	r3, [r7, #22]
 8001868:	8013      	strh	r3, [r2, #0]
		countnum_leftcircuance=1;
 800186a:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <getLeftRpm+0xac>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e00c      	b.n	800188c <getLeftRpm+0x58>
	}else{
		countnum=__HAL_TIM_GET_COUNTER(htim)-32768;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	b29b      	uxth	r3, r3
 800187a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800187e:	82fb      	strh	r3, [r7, #22]
		count_num_left_past=countnum;
 8001880:	4a19      	ldr	r2, [pc, #100]	@ (80018e8 <getLeftRpm+0xb4>)
 8001882:	8afb      	ldrh	r3, [r7, #22]
 8001884:	8013      	strh	r3, [r2, #0]
		countnum_leftcircuance=1;
 8001886:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <getLeftRpm+0xac>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]
	}
	float rpm;
	rpm = (4*countnum)/3;//读取编码器数�????
 800188c:	8afb      	ldrh	r3, [r7, #22]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4a16      	ldr	r2, [pc, #88]	@ (80018ec <getLeftRpm+0xb8>)
 8001892:	fb82 1203 	smull	r1, r2, r2, r3
 8001896:	17db      	asrs	r3, r3, #31
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a2:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COUNTER(htim,32768);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018ae:	625a      	str	r2, [r3, #36]	@ 0x24
	return rpm;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	e00b      	b.n	80018cc <getLeftRpm+0x98>
	}
	else{
		float rpm=0;
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
		__HAL_TIM_SET_COUNTER(htim,32768);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018c2:	625a      	str	r2, [r3, #36]	@ 0x24
		countnum_leftcircuance=1;
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <getLeftRpm+0xac>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
		return rpm;
 80018ca:	693b      	ldr	r3, [r7, #16]
	}

}
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eeb0 0a67 	vmov.f32	s0, s15
 80018d4:	371c      	adds	r7, #28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200000e8 	.word	0x200000e8
 80018e4:	ffff8000 	.word	0xffff8000
 80018e8:	20000004 	.word	0x20000004
 80018ec:	55555556 	.word	0x55555556

080018f0 <getRightRpm>:
float getRightRpm(TIM_HandleTypeDef * htim){
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	uint16_t countnum=0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	82fb      	strh	r3, [r7, #22]
	if(countnum_rightcircuance!=0){
 80018fc:	4b27      	ldr	r3, [pc, #156]	@ (800199c <getRightRpm+0xac>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d035      	beq.n	8001970 <getRightRpm+0x80>
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)){
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	2b10      	cmp	r3, #16
 8001910:	d10d      	bne.n	800192e <getRightRpm+0x3e>
		countnum =32768-__HAL_TIM_GET_COUNTER(htim);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <getRightRpm+0xb0>)
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	82fb      	strh	r3, [r7, #22]
		count_num_right_past=countnum;
 8001920:	4a20      	ldr	r2, [pc, #128]	@ (80019a4 <getRightRpm+0xb4>)
 8001922:	8afb      	ldrh	r3, [r7, #22]
 8001924:	8013      	strh	r3, [r2, #0]
		countnum_rightcircuance=1;
 8001926:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <getRightRpm+0xac>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e00c      	b.n	8001948 <getRightRpm+0x58>
	}else{
		countnum=__HAL_TIM_GET_COUNTER(htim)-32768;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001934:	b29b      	uxth	r3, r3
 8001936:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800193a:	82fb      	strh	r3, [r7, #22]
		count_num_right_past=countnum;
 800193c:	4a19      	ldr	r2, [pc, #100]	@ (80019a4 <getRightRpm+0xb4>)
 800193e:	8afb      	ldrh	r3, [r7, #22]
 8001940:	8013      	strh	r3, [r2, #0]
		countnum_rightcircuance=1;
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <getRightRpm+0xac>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
	}
	float rpm;
	rpm = (4*countnum)/3;//读取编码器数�????
 8001948:	8afb      	ldrh	r3, [r7, #22]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4a16      	ldr	r2, [pc, #88]	@ (80019a8 <getRightRpm+0xb8>)
 800194e:	fb82 1203 	smull	r1, r2, r2, r3
 8001952:	17db      	asrs	r3, r3, #31
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195e:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COUNTER(htim,32768);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800196a:	625a      	str	r2, [r3, #36]	@ 0x24
	return rpm;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	e00b      	b.n	8001988 <getRightRpm+0x98>
	}
	else{
			float rpm=0;
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
			__HAL_TIM_SET_COUNTER(htim,32768);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800197e:	625a      	str	r2, [r3, #36]	@ 0x24
			countnum_rightcircuance=1;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <getRightRpm+0xac>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]
			return rpm;
 8001986:	693b      	ldr	r3, [r7, #16]
		}
}
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eeb0 0a67 	vmov.f32	s0, s15
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	200000e4 	.word	0x200000e4
 80019a0:	ffff8000 	.word	0xffff8000
 80019a4:	20000006 	.word	0x20000006
 80019a8:	55555556 	.word	0x55555556

080019ac <setRightPWM>:
void setRightPWM(int pulse,uint32_t channel){
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	int pwm_pulse;
	if(pulse>0){pwm_pulse=pulse;}else{pwm_pulse=0;};
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	dd02      	ble.n	80019c2 <setRightPWM+0x16>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e001      	b.n	80019c6 <setRightPWM+0x1a>
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
	if(pwm_pulse>=719){pwm_pulse=719;};
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80019cc:	4293      	cmp	r3, r2
 80019ce:	dd02      	ble.n	80019d6 <setRightPWM+0x2a>
 80019d0:	f240 23cf 	movw	r3, #719	@ 0x2cf
 80019d4:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d104      	bne.n	80019e6 <setRightPWM+0x3a>
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <setRightPWM+0x70>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80019e4:	e013      	b.n	8001a0e <setRightPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d104      	bne.n	80019f6 <setRightPWM+0x4a>
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <setRightPWM+0x70>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80019f4:	e00b      	b.n	8001a0e <setRightPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d104      	bne.n	8001a06 <setRightPWM+0x5a>
 80019fc:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <setRightPWM+0x70>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001a04:	e003      	b.n	8001a0e <setRightPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8001a06:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <setRightPWM+0x70>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000214 	.word	0x20000214

08001a20 <setLeftPWM>:
void setLeftPWM(int pulse,uint32_t channel){
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	int pwm_pulse;
	if(pulse>0){pwm_pulse=pulse;}else{pwm_pulse=0;};
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	dd02      	ble.n	8001a36 <setLeftPWM+0x16>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	e001      	b.n	8001a3a <setLeftPWM+0x1a>
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
	if(pwm_pulse>=719){pwm_pulse=719;};
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8001a40:	4293      	cmp	r3, r2
 8001a42:	dd02      	ble.n	8001a4a <setLeftPWM+0x2a>
 8001a44:	f240 23cf 	movw	r3, #719	@ 0x2cf
 8001a48:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d104      	bne.n	8001a5a <setLeftPWM+0x3a>
 8001a50:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <setLeftPWM+0x70>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a58:	e013      	b.n	8001a82 <setLeftPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d104      	bne.n	8001a6a <setLeftPWM+0x4a>
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <setLeftPWM+0x70>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001a68:	e00b      	b.n	8001a82 <setLeftPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d104      	bne.n	8001a7a <setLeftPWM+0x5a>
 8001a70:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <setLeftPWM+0x70>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001a78:	e003      	b.n	8001a82 <setLeftPWM+0x62>
	__HAL_TIM_SET_COMPARE(&htim5,channel,pwm_pulse);
 8001a7a:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <setLeftPWM+0x70>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000214 	.word	0x20000214

08001a94 <setDirection>:

void setDirection(char dir){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
	if (dir=='w'){
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b77      	cmp	r3, #119	@ 0x77
 8001aa2:	d114      	bne.n	8001ace <setDirection+0x3a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	482e      	ldr	r0, [pc, #184]	@ (8001b64 <setDirection+0xd0>)
 8001aaa:	f001 ff05 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	482c      	ldr	r0, [pc, #176]	@ (8001b64 <setDirection+0xd0>)
 8001ab4:	f001 ff00 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2108      	movs	r1, #8
 8001abc:	4829      	ldr	r0, [pc, #164]	@ (8001b64 <setDirection+0xd0>)
 8001abe:	f001 fefb 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	2110      	movs	r1, #16
 8001ac6:	4827      	ldr	r0, [pc, #156]	@ (8001b64 <setDirection+0xd0>)
 8001ac8:	f001 fef6 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
	}
}
 8001acc:	e046      	b.n	8001b5c <setDirection+0xc8>
	else if (dir=='s'){
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b73      	cmp	r3, #115	@ 0x73
 8001ad2:	d114      	bne.n	8001afe <setDirection+0x6a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	4822      	ldr	r0, [pc, #136]	@ (8001b64 <setDirection+0xd0>)
 8001ada:	f001 feed 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	4820      	ldr	r0, [pc, #128]	@ (8001b64 <setDirection+0xd0>)
 8001ae4:	f001 fee8 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2108      	movs	r1, #8
 8001aec:	481d      	ldr	r0, [pc, #116]	@ (8001b64 <setDirection+0xd0>)
 8001aee:	f001 fee3 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2110      	movs	r1, #16
 8001af6:	481b      	ldr	r0, [pc, #108]	@ (8001b64 <setDirection+0xd0>)
 8001af8:	f001 fede 	bl	80038b8 <HAL_GPIO_WritePin>
}
 8001afc:	e02e      	b.n	8001b5c <setDirection+0xc8>
	else if (dir=='a'){
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2b61      	cmp	r3, #97	@ 0x61
 8001b02:	d114      	bne.n	8001b2e <setDirection+0x9a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2102      	movs	r1, #2
 8001b08:	4816      	ldr	r0, [pc, #88]	@ (8001b64 <setDirection+0xd0>)
 8001b0a:	f001 fed5 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2104      	movs	r1, #4
 8001b12:	4814      	ldr	r0, [pc, #80]	@ (8001b64 <setDirection+0xd0>)
 8001b14:	f001 fed0 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2108      	movs	r1, #8
 8001b1c:	4811      	ldr	r0, [pc, #68]	@ (8001b64 <setDirection+0xd0>)
 8001b1e:	f001 fecb 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8001b22:	2201      	movs	r2, #1
 8001b24:	2110      	movs	r1, #16
 8001b26:	480f      	ldr	r0, [pc, #60]	@ (8001b64 <setDirection+0xd0>)
 8001b28:	f001 fec6 	bl	80038b8 <HAL_GPIO_WritePin>
}
 8001b2c:	e016      	b.n	8001b5c <setDirection+0xc8>
	else if (dir=='d'){
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b64      	cmp	r3, #100	@ 0x64
 8001b32:	d113      	bne.n	8001b5c <setDirection+0xc8>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2102      	movs	r1, #2
 8001b38:	480a      	ldr	r0, [pc, #40]	@ (8001b64 <setDirection+0xd0>)
 8001b3a:	f001 febd 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2104      	movs	r1, #4
 8001b42:	4808      	ldr	r0, [pc, #32]	@ (8001b64 <setDirection+0xd0>)
 8001b44:	f001 feb8 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2108      	movs	r1, #8
 8001b4c:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <setDirection+0xd0>)
 8001b4e:	f001 feb3 	bl	80038b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2110      	movs	r1, #16
 8001b56:	4803      	ldr	r0, [pc, #12]	@ (8001b64 <setDirection+0xd0>)
 8001b58:	f001 feae 	bl	80038b8 <HAL_GPIO_WritePin>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000

08001b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <NMI_Handler+0x4>

08001bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <HardFault_Handler+0x4>

08001bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <MemManage_Handler+0x4>

08001bd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <UsageFault_Handler+0x4>

08001be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0e:	f000 ff5f 	bl	8002ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <DMA1_Stream0_IRQHandler+0x10>)
 8001c1e:	f001 fa45 	bl	80030ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000043c 	.word	0x2000043c

08001c2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <DMA1_Stream2_IRQHandler+0x10>)
 8001c32:	f001 fa3b 	bl	80030ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000037c 	.word	0x2000037c

08001c40 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <DMA1_Stream4_IRQHandler+0x10>)
 8001c46:	f001 fa31 	bl	80030ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200003dc 	.word	0x200003dc

08001c54 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <DMA1_Stream7_IRQHandler+0x10>)
 8001c5a:	f001 fa27 	bl	80030ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000049c 	.word	0x2000049c

08001c68 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <UART4_IRQHandler+0x10>)
 8001c6e:	f003 fd69 	bl	8005744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200002ec 	.word	0x200002ec

08001c7c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001c80:	4802      	ldr	r0, [pc, #8]	@ (8001c8c <UART5_IRQHandler+0x10>)
 8001c82:	f003 fd5f 	bl	8005744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000334 	.word	0x20000334

08001c90 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c94:	4802      	ldr	r0, [pc, #8]	@ (8001ca0 <TIM7_IRQHandler+0x10>)
 8001c96:	f002 fd97 	bl	80047c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000025c 	.word	0x2000025c

08001ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <SystemInit+0x20>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cae:	4a05      	ldr	r2, [pc, #20]	@ (8001cc4 <SystemInit+0x20>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b096      	sub	sp, #88	@ 0x58
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	615a      	str	r2, [r3, #20]
 8001cf8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 ffc7 	bl	8006c94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d06:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001d08:	4a4a      	ldr	r2, [pc, #296]	@ (8001e34 <MX_TIM1_Init+0x16c>)
 8001d0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001d0c:	4b48      	ldr	r3, [pc, #288]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001d0e:	2247      	movs	r2, #71	@ 0x47
 8001d10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d12:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001d18:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001d1a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001d1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b43      	ldr	r3, [pc, #268]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d26:	4b42      	ldr	r3, [pc, #264]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d2c:	4b40      	ldr	r3, [pc, #256]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001d2e:	2280      	movs	r2, #128	@ 0x80
 8001d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d32:	483f      	ldr	r0, [pc, #252]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001d34:	f002 fa32 	bl	800419c <HAL_TIM_Base_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d3e:	f7ff fc63 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d46:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d48:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4838      	ldr	r0, [pc, #224]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001d50:	f002 feec 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d5a:	f7ff fc55 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d5e:	4834      	ldr	r0, [pc, #208]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001d60:	f002 fadc 	bl	800431c <HAL_TIM_PWM_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d6a:	f7ff fc4d 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d76:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	482c      	ldr	r0, [pc, #176]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001d7e:	f003 fae1 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d88:	f7ff fc3e 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d8c:	2360      	movs	r3, #96	@ 0x60
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dac:	2200      	movs	r2, #0
 8001dae:	4619      	mov	r1, r3
 8001db0:	481f      	ldr	r0, [pc, #124]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001db2:	f002 fdf9 	bl	80049a8 <HAL_TIM_PWM_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001dbc:	f7ff fc24 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4819      	ldr	r0, [pc, #100]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001dca:	f002 fded 	bl	80049a8 <HAL_TIM_PWM_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001dd4:	f7ff fc18 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ddc:	2208      	movs	r2, #8
 8001dde:	4619      	mov	r1, r3
 8001de0:	4813      	ldr	r0, [pc, #76]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001de2:	f002 fde1 	bl	80049a8 <HAL_TIM_PWM_ConfigChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001dec:	f7ff fc0c 	bl	8001608 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4807      	ldr	r0, [pc, #28]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001e14:	f003 fb12 	bl	800543c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001e1e:	f7ff fbf3 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e22:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <MX_TIM1_Init+0x168>)
 8001e24:	f000 fb50 	bl	80024c8 <HAL_TIM_MspPostInit>

}
 8001e28:	bf00      	nop
 8001e2a:	3758      	adds	r7, #88	@ 0x58
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200000f4 	.word	0x200000f4
 8001e34:	40010000 	.word	0x40010000

08001e38 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08c      	sub	sp, #48	@ 0x30
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	2224      	movs	r2, #36	@ 0x24
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 ff24 	bl	8006c94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e54:	4b21      	ldr	r3, [pc, #132]	@ (8001edc <MX_TIM2_Init+0xa4>)
 8001e56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <MX_TIM2_Init+0xa4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e62:	4b1e      	ldr	r3, [pc, #120]	@ (8001edc <MX_TIM2_Init+0xa4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001e68:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <MX_TIM2_Init+0xa4>)
 8001e6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <MX_TIM2_Init+0xa4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e76:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <MX_TIM2_Init+0xa4>)
 8001e78:	2280      	movs	r2, #128	@ 0x80
 8001e7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e84:	2301      	movs	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e94:	2301      	movs	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480d      	ldr	r0, [pc, #52]	@ (8001edc <MX_TIM2_Init+0xa4>)
 8001ea8:	f002 fb5a 	bl	8004560 <HAL_TIM_Encoder_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001eb2:	f7ff fba9 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4806      	ldr	r0, [pc, #24]	@ (8001edc <MX_TIM2_Init+0xa4>)
 8001ec4:	f003 fa3e 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ece:	f7ff fb9b 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	3730      	adds	r7, #48	@ 0x30
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2000013c 	.word	0x2000013c

08001ee0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001efc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <MX_TIM3_Init+0x90>)
 8001efe:	4a1d      	ldr	r2, [pc, #116]	@ (8001f74 <MX_TIM3_Init+0x94>)
 8001f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f02:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <MX_TIM3_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <MX_TIM3_Init+0x90>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001f0e:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <MX_TIM3_Init+0x90>)
 8001f10:	22ff      	movs	r2, #255	@ 0xff
 8001f12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f14:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <MX_TIM3_Init+0x90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1a:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <MX_TIM3_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f20:	4813      	ldr	r0, [pc, #76]	@ (8001f70 <MX_TIM3_Init+0x90>)
 8001f22:	f002 f93b 	bl	800419c <HAL_TIM_Base_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001f2c:	f7ff fb6c 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f36:	f107 0308 	add.w	r3, r7, #8
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480c      	ldr	r0, [pc, #48]	@ (8001f70 <MX_TIM3_Init+0x90>)
 8001f3e:	f002 fdf5 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001f48:	f7ff fb5e 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f54:	463b      	mov	r3, r7
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <MX_TIM3_Init+0x90>)
 8001f5a:	f003 f9f3 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001f64:	f7ff fb50 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000184 	.word	0x20000184
 8001f74:	40000400 	.word	0x40000400

08001f78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08c      	sub	sp, #48	@ 0x30
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	2224      	movs	r2, #36	@ 0x24
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f004 fe84 	bl	8006c94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f94:	4b20      	ldr	r3, [pc, #128]	@ (8002018 <MX_TIM4_Init+0xa0>)
 8001f96:	4a21      	ldr	r2, [pc, #132]	@ (800201c <MX_TIM4_Init+0xa4>)
 8001f98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002018 <MX_TIM4_Init+0xa0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002018 <MX_TIM4_Init+0xa0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <MX_TIM4_Init+0xa0>)
 8001fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <MX_TIM4_Init+0xa0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fb4:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <MX_TIM4_Init+0xa0>)
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480c      	ldr	r0, [pc, #48]	@ (8002018 <MX_TIM4_Init+0xa0>)
 8001fe6:	f002 fabb 	bl	8004560 <HAL_TIM_Encoder_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ff0:	f7ff fb0a 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	@ (8002018 <MX_TIM4_Init+0xa0>)
 8002002:	f003 f99f 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800200c:	f7ff fafc 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	3730      	adds	r7, #48	@ 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200001cc 	.word	0x200001cc
 800201c:	40000800 	.word	0x40000800

08002020 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08e      	sub	sp, #56	@ 0x38
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	f107 0320 	add.w	r3, r7, #32
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
 800204c:	615a      	str	r2, [r3, #20]
 800204e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002050:	4b32      	ldr	r3, [pc, #200]	@ (800211c <MX_TIM5_Init+0xfc>)
 8002052:	4a33      	ldr	r2, [pc, #204]	@ (8002120 <MX_TIM5_Init+0x100>)
 8002054:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002056:	4b31      	ldr	r3, [pc, #196]	@ (800211c <MX_TIM5_Init+0xfc>)
 8002058:	2200      	movs	r2, #0
 800205a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205c:	4b2f      	ldr	r3, [pc, #188]	@ (800211c <MX_TIM5_Init+0xfc>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 720-1;
 8002062:	4b2e      	ldr	r3, [pc, #184]	@ (800211c <MX_TIM5_Init+0xfc>)
 8002064:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8002068:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b2c      	ldr	r3, [pc, #176]	@ (800211c <MX_TIM5_Init+0xfc>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002070:	4b2a      	ldr	r3, [pc, #168]	@ (800211c <MX_TIM5_Init+0xfc>)
 8002072:	2280      	movs	r2, #128	@ 0x80
 8002074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002076:	4829      	ldr	r0, [pc, #164]	@ (800211c <MX_TIM5_Init+0xfc>)
 8002078:	f002 f890 	bl	800419c <HAL_TIM_Base_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002082:	f7ff fac1 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800208c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002090:	4619      	mov	r1, r3
 8002092:	4822      	ldr	r0, [pc, #136]	@ (800211c <MX_TIM5_Init+0xfc>)
 8002094:	f002 fd4a 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800209e:	f7ff fab3 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020a2:	481e      	ldr	r0, [pc, #120]	@ (800211c <MX_TIM5_Init+0xfc>)
 80020a4:	f002 f93a 	bl	800431c <HAL_TIM_PWM_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80020ae:	f7ff faab 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020ba:	f107 0320 	add.w	r3, r7, #32
 80020be:	4619      	mov	r1, r3
 80020c0:	4816      	ldr	r0, [pc, #88]	@ (800211c <MX_TIM5_Init+0xfc>)
 80020c2:	f003 f93f 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80020cc:	f7ff fa9c 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d0:	2360      	movs	r3, #96	@ 0x60
 80020d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	2208      	movs	r2, #8
 80020e4:	4619      	mov	r1, r3
 80020e6:	480d      	ldr	r0, [pc, #52]	@ (800211c <MX_TIM5_Init+0xfc>)
 80020e8:	f002 fc5e 	bl	80049a8 <HAL_TIM_PWM_ConfigChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80020f2:	f7ff fa89 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	220c      	movs	r2, #12
 80020fa:	4619      	mov	r1, r3
 80020fc:	4807      	ldr	r0, [pc, #28]	@ (800211c <MX_TIM5_Init+0xfc>)
 80020fe:	f002 fc53 	bl	80049a8 <HAL_TIM_PWM_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002108:	f7ff fa7e 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800210c:	4803      	ldr	r0, [pc, #12]	@ (800211c <MX_TIM5_Init+0xfc>)
 800210e:	f000 f9db 	bl	80024c8 <HAL_TIM_MspPostInit>

}
 8002112:	bf00      	nop
 8002114:	3738      	adds	r7, #56	@ 0x38
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000214 	.word	0x20000214
 8002120:	40000c00 	.word	0x40000c00

08002124 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212a:	463b      	mov	r3, r7
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <MX_TIM7_Init+0x64>)
 8002134:	4a15      	ldr	r2, [pc, #84]	@ (800218c <MX_TIM7_Init+0x68>)
 8002136:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200-1;
 8002138:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <MX_TIM7_Init+0x64>)
 800213a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800213e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <MX_TIM7_Init+0x64>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 8002146:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <MX_TIM7_Init+0x64>)
 8002148:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800214c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <MX_TIM7_Init+0x64>)
 8002150:	2280      	movs	r2, #128	@ 0x80
 8002152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002154:	480c      	ldr	r0, [pc, #48]	@ (8002188 <MX_TIM7_Init+0x64>)
 8002156:	f002 f821 	bl	800419c <HAL_TIM_Base_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002160:	f7ff fa52 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800216c:	463b      	mov	r3, r7
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	@ (8002188 <MX_TIM7_Init+0x64>)
 8002172:	f003 f8e7 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800217c:	f7ff fa44 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	2000025c 	.word	0x2000025c
 800218c:	40001400 	.word	0x40001400

08002190 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b096      	sub	sp, #88	@ 0x58
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002196:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]
 80021be:	615a      	str	r2, [r3, #20]
 80021c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2220      	movs	r2, #32
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f004 fd63 	bl	8006c94 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021ce:	4b3e      	ldr	r3, [pc, #248]	@ (80022c8 <MX_TIM8_Init+0x138>)
 80021d0:	4a3e      	ldr	r2, [pc, #248]	@ (80022cc <MX_TIM8_Init+0x13c>)
 80021d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021d4:	4b3c      	ldr	r3, [pc, #240]	@ (80022c8 <MX_TIM8_Init+0x138>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021da:	4b3b      	ldr	r3, [pc, #236]	@ (80022c8 <MX_TIM8_Init+0x138>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 720-1;
 80021e0:	4b39      	ldr	r3, [pc, #228]	@ (80022c8 <MX_TIM8_Init+0x138>)
 80021e2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80021e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e8:	4b37      	ldr	r3, [pc, #220]	@ (80022c8 <MX_TIM8_Init+0x138>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021ee:	4b36      	ldr	r3, [pc, #216]	@ (80022c8 <MX_TIM8_Init+0x138>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021f4:	4b34      	ldr	r3, [pc, #208]	@ (80022c8 <MX_TIM8_Init+0x138>)
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021fa:	4833      	ldr	r0, [pc, #204]	@ (80022c8 <MX_TIM8_Init+0x138>)
 80021fc:	f001 ffce 	bl	800419c <HAL_TIM_Base_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002206:	f7ff f9ff 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800220a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800220e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002210:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002214:	4619      	mov	r1, r3
 8002216:	482c      	ldr	r0, [pc, #176]	@ (80022c8 <MX_TIM8_Init+0x138>)
 8002218:	f002 fc88 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002222:	f7ff f9f1 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002226:	4828      	ldr	r0, [pc, #160]	@ (80022c8 <MX_TIM8_Init+0x138>)
 8002228:	f002 f878 	bl	800431c <HAL_TIM_PWM_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002232:	f7ff f9e9 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800223e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002242:	4619      	mov	r1, r3
 8002244:	4820      	ldr	r0, [pc, #128]	@ (80022c8 <MX_TIM8_Init+0x138>)
 8002246:	f003 f87d 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002250:	f7ff f9da 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002254:	2360      	movs	r3, #96	@ 0x60
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002260:	2300      	movs	r3, #0
 8002262:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002274:	2200      	movs	r2, #0
 8002276:	4619      	mov	r1, r3
 8002278:	4813      	ldr	r0, [pc, #76]	@ (80022c8 <MX_TIM8_Init+0x138>)
 800227a:	f002 fb95 	bl	80049a8 <HAL_TIM_PWM_ConfigChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002284:	f7ff f9c0 	bl	8001608 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800229c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	4619      	mov	r1, r3
 80022aa:	4807      	ldr	r0, [pc, #28]	@ (80022c8 <MX_TIM8_Init+0x138>)
 80022ac:	f003 f8c6 	bl	800543c <HAL_TIMEx_ConfigBreakDeadTime>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80022b6:	f7ff f9a7 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80022ba:	4803      	ldr	r0, [pc, #12]	@ (80022c8 <MX_TIM8_Init+0x138>)
 80022bc:	f000 f904 	bl	80024c8 <HAL_TIM_MspPostInit>

}
 80022c0:	bf00      	nop
 80022c2:	3758      	adds	r7, #88	@ 0x58
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	200002a4 	.word	0x200002a4
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a36      	ldr	r2, [pc, #216]	@ (80023b8 <HAL_TIM_Base_MspInit+0xe8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10e      	bne.n	8002300 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	4b35      	ldr	r3, [pc, #212]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	4a34      	ldr	r2, [pc, #208]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f2:	4b32      	ldr	r3, [pc, #200]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80022fe:	e056      	b.n	80023ae <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM3)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a2e      	ldr	r2, [pc, #184]	@ (80023c0 <HAL_TIM_Base_MspInit+0xf0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d10e      	bne.n	8002328 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	4a2a      	ldr	r2, [pc, #168]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	6413      	str	r3, [r2, #64]	@ 0x40
 800231a:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]
}
 8002326:	e042      	b.n	80023ae <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM5)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a25      	ldr	r2, [pc, #148]	@ (80023c4 <HAL_TIM_Base_MspInit+0xf4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	4b21      	ldr	r3, [pc, #132]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	4a20      	ldr	r2, [pc, #128]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 800233c:	f043 0308 	orr.w	r3, r3, #8
 8002340:	6413      	str	r3, [r2, #64]	@ 0x40
 8002342:	4b1e      	ldr	r3, [pc, #120]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
}
 800234e:	e02e      	b.n	80023ae <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM7)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1c      	ldr	r2, [pc, #112]	@ (80023c8 <HAL_TIM_Base_MspInit+0xf8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d116      	bne.n	8002388 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b17      	ldr	r3, [pc, #92]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	4a16      	ldr	r2, [pc, #88]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 8002364:	f043 0320 	orr.w	r3, r3, #32
 8002368:	6413      	str	r3, [r2, #64]	@ 0x40
 800236a:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f003 0320 	and.w	r3, r3, #32
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2101      	movs	r1, #1
 800237a:	2037      	movs	r0, #55	@ 0x37
 800237c:	f000 fcc7 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002380:	2037      	movs	r0, #55	@ 0x37
 8002382:	f000 fce0 	bl	8002d46 <HAL_NVIC_EnableIRQ>
}
 8002386:	e012      	b.n	80023ae <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM8)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0f      	ldr	r2, [pc, #60]	@ (80023cc <HAL_TIM_Base_MspInit+0xfc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10d      	bne.n	80023ae <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b09      	ldr	r3, [pc, #36]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	4a08      	ldr	r2, [pc, #32]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a2:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <HAL_TIM_Base_MspInit+0xec>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
}
 80023ae:	bf00      	nop
 80023b0:	3720      	adds	r7, #32
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40000400 	.word	0x40000400
 80023c4:	40000c00 	.word	0x40000c00
 80023c8:	40001400 	.word	0x40001400
 80023cc:	40010400 	.word	0x40010400

080023d0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08c      	sub	sp, #48	@ 0x30
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f0:	d12c      	bne.n	800244c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	4b30      	ldr	r3, [pc, #192]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	4a2f      	ldr	r2, [pc, #188]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6413      	str	r3, [r2, #64]	@ 0x40
 8002402:	4b2d      	ldr	r3, [pc, #180]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	4b29      	ldr	r3, [pc, #164]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	4a28      	ldr	r2, [pc, #160]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6313      	str	r3, [r2, #48]	@ 0x30
 800241e:	4b26      	ldr	r3, [pc, #152]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800242a:	2322      	movs	r3, #34	@ 0x22
 800242c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	2302      	movs	r3, #2
 8002430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800243a:	2301      	movs	r3, #1
 800243c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 031c 	add.w	r3, r7, #28
 8002442:	4619      	mov	r1, r3
 8002444:	481d      	ldr	r0, [pc, #116]	@ (80024bc <HAL_TIM_Encoder_MspInit+0xec>)
 8002446:	f001 f89b 	bl	8003580 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800244a:	e031      	b.n	80024b0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1b      	ldr	r2, [pc, #108]	@ (80024c0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d12c      	bne.n	80024b0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	4b17      	ldr	r3, [pc, #92]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	4a16      	ldr	r2, [pc, #88]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	6413      	str	r3, [r2, #64]	@ 0x40
 8002466:	4b14      	ldr	r3, [pc, #80]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	4a0f      	ldr	r2, [pc, #60]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800247c:	f043 0308 	orr.w	r3, r3, #8
 8002480:	6313      	str	r3, [r2, #48]	@ 0x30
 8002482:	4b0d      	ldr	r3, [pc, #52]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800248e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2300      	movs	r3, #0
 800249e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024a0:	2302      	movs	r3, #2
 80024a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	4806      	ldr	r0, [pc, #24]	@ (80024c4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80024ac:	f001 f868 	bl	8003580 <HAL_GPIO_Init>
}
 80024b0:	bf00      	nop
 80024b2:	3730      	adds	r7, #48	@ 0x30
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40000800 	.word	0x40000800
 80024c4:	40020c00 	.word	0x40020c00

080024c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	@ 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a36      	ldr	r2, [pc, #216]	@ (80025c0 <HAL_TIM_MspPostInit+0xf8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d11f      	bne.n	800252a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b35      	ldr	r3, [pc, #212]	@ (80025c4 <HAL_TIM_MspPostInit+0xfc>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	4a34      	ldr	r2, [pc, #208]	@ (80025c4 <HAL_TIM_MspPostInit+0xfc>)
 80024f4:	f043 0310 	orr.w	r3, r3, #16
 80024f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fa:	4b32      	ldr	r3, [pc, #200]	@ (80025c4 <HAL_TIM_MspPostInit+0xfc>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8002506:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 800250a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002518:	2301      	movs	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4619      	mov	r1, r3
 8002522:	4829      	ldr	r0, [pc, #164]	@ (80025c8 <HAL_TIM_MspPostInit+0x100>)
 8002524:	f001 f82c 	bl	8003580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002528:	e046      	b.n	80025b8 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a27      	ldr	r2, [pc, #156]	@ (80025cc <HAL_TIM_MspPostInit+0x104>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d11e      	bne.n	8002572 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	4b22      	ldr	r3, [pc, #136]	@ (80025c4 <HAL_TIM_MspPostInit+0xfc>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253c:	4a21      	ldr	r2, [pc, #132]	@ (80025c4 <HAL_TIM_MspPostInit+0xfc>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6313      	str	r3, [r2, #48]	@ 0x30
 8002544:	4b1f      	ldr	r3, [pc, #124]	@ (80025c4 <HAL_TIM_MspPostInit+0xfc>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002550:	230c      	movs	r3, #12
 8002552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002560:	2302      	movs	r3, #2
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	4619      	mov	r1, r3
 800256a:	4819      	ldr	r0, [pc, #100]	@ (80025d0 <HAL_TIM_MspPostInit+0x108>)
 800256c:	f001 f808 	bl	8003580 <HAL_GPIO_Init>
}
 8002570:	e022      	b.n	80025b8 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM8)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a17      	ldr	r2, [pc, #92]	@ (80025d4 <HAL_TIM_MspPostInit+0x10c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d11d      	bne.n	80025b8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <HAL_TIM_MspPostInit+0xfc>)
 8002582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002584:	4a0f      	ldr	r2, [pc, #60]	@ (80025c4 <HAL_TIM_MspPostInit+0xfc>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	6313      	str	r3, [r2, #48]	@ 0x30
 800258c:	4b0d      	ldr	r3, [pc, #52]	@ (80025c4 <HAL_TIM_MspPostInit+0xfc>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002598:	2340      	movs	r3, #64	@ 0x40
 800259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025a8:	2303      	movs	r3, #3
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	4809      	ldr	r0, [pc, #36]	@ (80025d8 <HAL_TIM_MspPostInit+0x110>)
 80025b4:	f000 ffe4 	bl	8003580 <HAL_GPIO_Init>
}
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	@ 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40010000 	.word	0x40010000
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40000c00 	.word	0x40000c00
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40010400 	.word	0x40010400
 80025d8:	40020800 	.word	0x40020800

080025dc <timersInit>:
 *
 *  Created on: Jul 21, 2024
 *      Author: 25138
 */
#include "timersInit.h"
void timersInit(){
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80025e0:	2108      	movs	r1, #8
 80025e2:	4810      	ldr	r0, [pc, #64]	@ (8002624 <timersInit+0x48>)
 80025e4:	f001 fef4 	bl	80043d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);//开启电机PWM，最值255
 80025e8:	210c      	movs	r1, #12
 80025ea:	480e      	ldr	r0, [pc, #56]	@ (8002624 <timersInit+0x48>)
 80025ec:	f001 fef0 	bl	80043d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80025f0:	2100      	movs	r1, #0
 80025f2:	480d      	ldr	r0, [pc, #52]	@ (8002628 <timersInit+0x4c>)
 80025f4:	f001 feec 	bl	80043d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80025f8:	2104      	movs	r1, #4
 80025fa:	480b      	ldr	r0, [pc, #44]	@ (8002628 <timersInit+0x4c>)
 80025fc:	f001 fee8 	bl	80043d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);//开启舵机PWM，最值1999
 8002600:	2108      	movs	r1, #8
 8002602:	4809      	ldr	r0, [pc, #36]	@ (8002628 <timersInit+0x4c>)
 8002604:	f001 fee4 	bl	80043d0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);//左轮编码器
 8002608:	213c      	movs	r1, #60	@ 0x3c
 800260a:	4808      	ldr	r0, [pc, #32]	@ (800262c <timersInit+0x50>)
 800260c:	f002 f84e 	bl	80046ac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);//右轮编码器
 8002610:	213c      	movs	r1, #60	@ 0x3c
 8002612:	4807      	ldr	r0, [pc, #28]	@ (8002630 <timersInit+0x54>)
 8002614:	f002 f84a 	bl	80046ac <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim7);//中断定时器，50ms一次中断
 8002618:	4806      	ldr	r0, [pc, #24]	@ (8002634 <timersInit+0x58>)
 800261a:	f001 fe0f 	bl	800423c <HAL_TIM_Base_Start_IT>




}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000214 	.word	0x20000214
 8002628:	200000f4 	.word	0x200000f4
 800262c:	2000013c 	.word	0x2000013c
 8002630:	200001cc 	.word	0x200001cc
 8002634:	2000025c 	.word	0x2000025c

08002638 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <MX_UART4_Init+0x4c>)
 800263e:	4a12      	ldr	r2, [pc, #72]	@ (8002688 <MX_UART4_Init+0x50>)
 8002640:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <MX_UART4_Init+0x4c>)
 8002644:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002648:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <MX_UART4_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <MX_UART4_Init+0x4c>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <MX_UART4_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800265c:	4b09      	ldr	r3, [pc, #36]	@ (8002684 <MX_UART4_Init+0x4c>)
 800265e:	220c      	movs	r2, #12
 8002660:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002662:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <MX_UART4_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <MX_UART4_Init+0x4c>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800266e:	4805      	ldr	r0, [pc, #20]	@ (8002684 <MX_UART4_Init+0x4c>)
 8002670:	f002 ff4a 	bl	8005508 <HAL_UART_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800267a:	f7fe ffc5 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200002ec 	.word	0x200002ec
 8002688:	40004c00 	.word	0x40004c00

0800268c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <MX_UART5_Init+0x4c>)
 8002692:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <MX_UART5_Init+0x50>)
 8002694:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <MX_UART5_Init+0x4c>)
 8002698:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800269c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800269e:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <MX_UART5_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80026a4:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <MX_UART5_Init+0x4c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <MX_UART5_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80026b0:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <MX_UART5_Init+0x4c>)
 80026b2:	220c      	movs	r2, #12
 80026b4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b6:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <MX_UART5_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80026bc:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <MX_UART5_Init+0x4c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80026c2:	4805      	ldr	r0, [pc, #20]	@ (80026d8 <MX_UART5_Init+0x4c>)
 80026c4:	f002 ff20 	bl	8005508 <HAL_UART_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80026ce:	f7fe ff9b 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000334 	.word	0x20000334
 80026dc:	40005000 	.word	0x40005000

080026e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08c      	sub	sp, #48	@ 0x30
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 031c 	add.w	r3, r7, #28
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002828 <HAL_UART_MspInit+0x148>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	f040 80a0 	bne.w	8002844 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	4b48      	ldr	r3, [pc, #288]	@ (800282c <HAL_UART_MspInit+0x14c>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	4a47      	ldr	r2, [pc, #284]	@ (800282c <HAL_UART_MspInit+0x14c>)
 800270e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002712:	6413      	str	r3, [r2, #64]	@ 0x40
 8002714:	4b45      	ldr	r3, [pc, #276]	@ (800282c <HAL_UART_MspInit+0x14c>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	4b41      	ldr	r3, [pc, #260]	@ (800282c <HAL_UART_MspInit+0x14c>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	4a40      	ldr	r2, [pc, #256]	@ (800282c <HAL_UART_MspInit+0x14c>)
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002730:	4b3e      	ldr	r3, [pc, #248]	@ (800282c <HAL_UART_MspInit+0x14c>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800273c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800274e:	2308      	movs	r3, #8
 8002750:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002752:	f107 031c 	add.w	r3, r7, #28
 8002756:	4619      	mov	r1, r3
 8002758:	4835      	ldr	r0, [pc, #212]	@ (8002830 <HAL_UART_MspInit+0x150>)
 800275a:	f000 ff11 	bl	8003580 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800275e:	4b35      	ldr	r3, [pc, #212]	@ (8002834 <HAL_UART_MspInit+0x154>)
 8002760:	4a35      	ldr	r2, [pc, #212]	@ (8002838 <HAL_UART_MspInit+0x158>)
 8002762:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002764:	4b33      	ldr	r3, [pc, #204]	@ (8002834 <HAL_UART_MspInit+0x154>)
 8002766:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800276a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800276c:	4b31      	ldr	r3, [pc, #196]	@ (8002834 <HAL_UART_MspInit+0x154>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002772:	4b30      	ldr	r3, [pc, #192]	@ (8002834 <HAL_UART_MspInit+0x154>)
 8002774:	2200      	movs	r2, #0
 8002776:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002778:	4b2e      	ldr	r3, [pc, #184]	@ (8002834 <HAL_UART_MspInit+0x154>)
 800277a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800277e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002780:	4b2c      	ldr	r3, [pc, #176]	@ (8002834 <HAL_UART_MspInit+0x154>)
 8002782:	2200      	movs	r2, #0
 8002784:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002786:	4b2b      	ldr	r3, [pc, #172]	@ (8002834 <HAL_UART_MspInit+0x154>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800278c:	4b29      	ldr	r3, [pc, #164]	@ (8002834 <HAL_UART_MspInit+0x154>)
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002792:	4b28      	ldr	r3, [pc, #160]	@ (8002834 <HAL_UART_MspInit+0x154>)
 8002794:	2200      	movs	r2, #0
 8002796:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002798:	4b26      	ldr	r3, [pc, #152]	@ (8002834 <HAL_UART_MspInit+0x154>)
 800279a:	2200      	movs	r2, #0
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800279e:	4825      	ldr	r0, [pc, #148]	@ (8002834 <HAL_UART_MspInit+0x154>)
 80027a0:	f000 faec 	bl	8002d7c <HAL_DMA_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80027aa:	f7fe ff2d 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a20      	ldr	r2, [pc, #128]	@ (8002834 <HAL_UART_MspInit+0x154>)
 80027b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002834 <HAL_UART_MspInit+0x154>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80027ba:	4b20      	ldr	r3, [pc, #128]	@ (800283c <HAL_UART_MspInit+0x15c>)
 80027bc:	4a20      	ldr	r2, [pc, #128]	@ (8002840 <HAL_UART_MspInit+0x160>)
 80027be:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80027c0:	4b1e      	ldr	r3, [pc, #120]	@ (800283c <HAL_UART_MspInit+0x15c>)
 80027c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027c6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027c8:	4b1c      	ldr	r3, [pc, #112]	@ (800283c <HAL_UART_MspInit+0x15c>)
 80027ca:	2240      	movs	r2, #64	@ 0x40
 80027cc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ce:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <HAL_UART_MspInit+0x15c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <HAL_UART_MspInit+0x15c>)
 80027d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027da:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027dc:	4b17      	ldr	r3, [pc, #92]	@ (800283c <HAL_UART_MspInit+0x15c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027e2:	4b16      	ldr	r3, [pc, #88]	@ (800283c <HAL_UART_MspInit+0x15c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80027e8:	4b14      	ldr	r3, [pc, #80]	@ (800283c <HAL_UART_MspInit+0x15c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027ee:	4b13      	ldr	r3, [pc, #76]	@ (800283c <HAL_UART_MspInit+0x15c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027f4:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_UART_MspInit+0x15c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80027fa:	4810      	ldr	r0, [pc, #64]	@ (800283c <HAL_UART_MspInit+0x15c>)
 80027fc:	f000 fabe 	bl	8002d7c <HAL_DMA_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002806:	f7fe feff 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a0b      	ldr	r2, [pc, #44]	@ (800283c <HAL_UART_MspInit+0x15c>)
 800280e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002810:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <HAL_UART_MspInit+0x15c>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2102      	movs	r1, #2
 800281a:	2034      	movs	r0, #52	@ 0x34
 800281c:	f000 fa77 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002820:	2034      	movs	r0, #52	@ 0x34
 8002822:	f000 fa90 	bl	8002d46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8002826:	e0c2      	b.n	80029ae <HAL_UART_MspInit+0x2ce>
 8002828:	40004c00 	.word	0x40004c00
 800282c:	40023800 	.word	0x40023800
 8002830:	40020800 	.word	0x40020800
 8002834:	2000037c 	.word	0x2000037c
 8002838:	40026040 	.word	0x40026040
 800283c:	200003dc 	.word	0x200003dc
 8002840:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a5b      	ldr	r2, [pc, #364]	@ (80029b8 <HAL_UART_MspInit+0x2d8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	f040 80af 	bne.w	80029ae <HAL_UART_MspInit+0x2ce>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	4b59      	ldr	r3, [pc, #356]	@ (80029bc <HAL_UART_MspInit+0x2dc>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	4a58      	ldr	r2, [pc, #352]	@ (80029bc <HAL_UART_MspInit+0x2dc>)
 800285a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800285e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002860:	4b56      	ldr	r3, [pc, #344]	@ (80029bc <HAL_UART_MspInit+0x2dc>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	4b52      	ldr	r3, [pc, #328]	@ (80029bc <HAL_UART_MspInit+0x2dc>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002874:	4a51      	ldr	r2, [pc, #324]	@ (80029bc <HAL_UART_MspInit+0x2dc>)
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	6313      	str	r3, [r2, #48]	@ 0x30
 800287c:	4b4f      	ldr	r3, [pc, #316]	@ (80029bc <HAL_UART_MspInit+0x2dc>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	4b4b      	ldr	r3, [pc, #300]	@ (80029bc <HAL_UART_MspInit+0x2dc>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	4a4a      	ldr	r2, [pc, #296]	@ (80029bc <HAL_UART_MspInit+0x2dc>)
 8002892:	f043 0308 	orr.w	r3, r3, #8
 8002896:	6313      	str	r3, [r2, #48]	@ 0x30
 8002898:	4b48      	ldr	r3, [pc, #288]	@ (80029bc <HAL_UART_MspInit+0x2dc>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b2:	2303      	movs	r3, #3
 80028b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80028b6:	2308      	movs	r3, #8
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ba:	f107 031c 	add.w	r3, r7, #28
 80028be:	4619      	mov	r1, r3
 80028c0:	483f      	ldr	r0, [pc, #252]	@ (80029c0 <HAL_UART_MspInit+0x2e0>)
 80028c2:	f000 fe5d 	bl	8003580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028c6:	2304      	movs	r3, #4
 80028c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d2:	2303      	movs	r3, #3
 80028d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80028d6:	2308      	movs	r3, #8
 80028d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	4619      	mov	r1, r3
 80028e0:	4838      	ldr	r0, [pc, #224]	@ (80029c4 <HAL_UART_MspInit+0x2e4>)
 80028e2:	f000 fe4d 	bl	8003580 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80028e6:	4b38      	ldr	r3, [pc, #224]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 80028e8:	4a38      	ldr	r2, [pc, #224]	@ (80029cc <HAL_UART_MspInit+0x2ec>)
 80028ea:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80028ec:	4b36      	ldr	r3, [pc, #216]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 80028ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028f2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028f4:	4b34      	ldr	r3, [pc, #208]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028fa:	4b33      	ldr	r3, [pc, #204]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002900:	4b31      	ldr	r3, [pc, #196]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 8002902:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002906:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002908:	4b2f      	ldr	r3, [pc, #188]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 800290a:	2200      	movs	r2, #0
 800290c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800290e:	4b2e      	ldr	r3, [pc, #184]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002914:	4b2c      	ldr	r3, [pc, #176]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800291a:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002920:	4b29      	ldr	r3, [pc, #164]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 8002922:	2200      	movs	r2, #0
 8002924:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002926:	4828      	ldr	r0, [pc, #160]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 8002928:	f000 fa28 	bl	8002d7c <HAL_DMA_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8002932:	f7fe fe69 	bl	8001608 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a23      	ldr	r2, [pc, #140]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 800293a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800293c:	4a22      	ldr	r2, [pc, #136]	@ (80029c8 <HAL_UART_MspInit+0x2e8>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8002942:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 8002944:	4a23      	ldr	r2, [pc, #140]	@ (80029d4 <HAL_UART_MspInit+0x2f4>)
 8002946:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002948:	4b21      	ldr	r3, [pc, #132]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 800294a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800294e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002950:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 8002952:	2240      	movs	r2, #64	@ 0x40
 8002954:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002956:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 8002958:	2200      	movs	r2, #0
 800295a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800295c:	4b1c      	ldr	r3, [pc, #112]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 800295e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002962:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002964:	4b1a      	ldr	r3, [pc, #104]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 8002966:	2200      	movs	r2, #0
 8002968:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800296a:	4b19      	ldr	r3, [pc, #100]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002970:	4b17      	ldr	r3, [pc, #92]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 8002972:	2200      	movs	r2, #0
 8002974:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002976:	4b16      	ldr	r3, [pc, #88]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 8002978:	2200      	movs	r2, #0
 800297a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800297c:	4b14      	ldr	r3, [pc, #80]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 800297e:	2200      	movs	r2, #0
 8002980:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002982:	4813      	ldr	r0, [pc, #76]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 8002984:	f000 f9fa 	bl	8002d7c <HAL_DMA_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 800298e:	f7fe fe3b 	bl	8001608 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a0e      	ldr	r2, [pc, #56]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 8002996:	639a      	str	r2, [r3, #56]	@ 0x38
 8002998:	4a0d      	ldr	r2, [pc, #52]	@ (80029d0 <HAL_UART_MspInit+0x2f0>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	2035      	movs	r0, #53	@ 0x35
 80029a4:	f000 f9b3 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80029a8:	2035      	movs	r0, #53	@ 0x35
 80029aa:	f000 f9cc 	bl	8002d46 <HAL_NVIC_EnableIRQ>
}
 80029ae:	bf00      	nop
 80029b0:	3730      	adds	r7, #48	@ 0x30
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40005000 	.word	0x40005000
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020800 	.word	0x40020800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	2000043c 	.word	0x2000043c
 80029cc:	40026010 	.word	0x40026010
 80029d0:	2000049c 	.word	0x2000049c
 80029d4:	400260b8 	.word	0x400260b8

080029d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80029dc:	f7ff f962 	bl	8001ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029e0:	480c      	ldr	r0, [pc, #48]	@ (8002a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029e2:	490d      	ldr	r1, [pc, #52]	@ (8002a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029e4:	4a0d      	ldr	r2, [pc, #52]	@ (8002a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e8:	e002      	b.n	80029f0 <LoopCopyDataInit>

080029ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ee:	3304      	adds	r3, #4

080029f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f4:	d3f9      	bcc.n	80029ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002a24 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029fc:	e001      	b.n	8002a02 <LoopFillZerobss>

080029fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a00:	3204      	adds	r2, #4

08002a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a04:	d3fb      	bcc.n	80029fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a06:	f004 f953 	bl	8006cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a0a:	f7fe fce3 	bl	80013d4 <main>
  bx  lr    
 8002a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a18:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002a1c:	08006d60 	.word	0x08006d60
  ldr r2, =_sbss
 8002a20:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002a24:	20000638 	.word	0x20000638

08002a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a28:	e7fe      	b.n	8002a28 <ADC_IRQHandler>
	...

08002a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a30:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <HAL_Init+0x40>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0d      	ldr	r2, [pc, #52]	@ (8002a6c <HAL_Init+0x40>)
 8002a36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <HAL_Init+0x40>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <HAL_Init+0x40>)
 8002a42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a48:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a07      	ldr	r2, [pc, #28]	@ (8002a6c <HAL_Init+0x40>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a54:	2003      	movs	r0, #3
 8002a56:	f000 f94f 	bl	8002cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a5a:	200f      	movs	r0, #15
 8002a5c:	f000 f808 	bl	8002a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a60:	f7ff f882 	bl	8001b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023c00 	.word	0x40023c00

08002a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a78:	4b12      	ldr	r3, [pc, #72]	@ (8002ac4 <HAL_InitTick+0x54>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b12      	ldr	r3, [pc, #72]	@ (8002ac8 <HAL_InitTick+0x58>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f967 	bl	8002d62 <HAL_SYSTICK_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00e      	b.n	8002abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b0f      	cmp	r3, #15
 8002aa2:	d80a      	bhi.n	8002aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f000 f92f 	bl	8002d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab0:	4a06      	ldr	r2, [pc, #24]	@ (8002acc <HAL_InitTick+0x5c>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e000      	b.n	8002abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000008 	.word	0x20000008
 8002ac8:	20000010 	.word	0x20000010
 8002acc:	2000000c 	.word	0x2000000c

08002ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_IncTick+0x20>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <HAL_IncTick+0x24>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a04      	ldr	r2, [pc, #16]	@ (8002af4 <HAL_IncTick+0x24>)
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000010 	.word	0x20000010
 8002af4:	200004fc 	.word	0x200004fc

08002af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return uwTick;
 8002afc:	4b03      	ldr	r3, [pc, #12]	@ (8002b0c <HAL_GetTick+0x14>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	200004fc 	.word	0x200004fc

08002b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b18:	f7ff ffee 	bl	8002af8 <HAL_GetTick>
 8002b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d005      	beq.n	8002b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <HAL_Delay+0x44>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b36:	bf00      	nop
 8002b38:	f7ff ffde 	bl	8002af8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d8f7      	bhi.n	8002b38 <HAL_Delay+0x28>
  {
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000010 	.word	0x20000010

08002b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b68:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8a:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	60d3      	str	r3, [r2, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba4:	4b04      	ldr	r3, [pc, #16]	@ (8002bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 0307 	and.w	r3, r3, #7
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	db0b      	blt.n	8002be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4907      	ldr	r1, [pc, #28]	@ (8002bf4 <__NVIC_EnableIRQ+0x38>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2001      	movs	r0, #1
 8002bde:	fa00 f202 	lsl.w	r2, r0, r2
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000e100 	.word	0xe000e100

08002bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	db0a      	blt.n	8002c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	490c      	ldr	r1, [pc, #48]	@ (8002c44 <__NVIC_SetPriority+0x4c>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	0112      	lsls	r2, r2, #4
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c20:	e00a      	b.n	8002c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4908      	ldr	r1, [pc, #32]	@ (8002c48 <__NVIC_SetPriority+0x50>)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	3b04      	subs	r3, #4
 8002c30:	0112      	lsls	r2, r2, #4
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	440b      	add	r3, r1
 8002c36:	761a      	strb	r2, [r3, #24]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000e100 	.word	0xe000e100
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	@ 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f1c3 0307 	rsb	r3, r3, #7
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	bf28      	it	cs
 8002c6a:	2304      	movcs	r3, #4
 8002c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d902      	bls.n	8002c7c <NVIC_EncodePriority+0x30>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3b03      	subs	r3, #3
 8002c7a:	e000      	b.n	8002c7e <NVIC_EncodePriority+0x32>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	401a      	ands	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	43d9      	mvns	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	4313      	orrs	r3, r2
         );
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3724      	adds	r7, #36	@ 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cc4:	d301      	bcc.n	8002cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00f      	b.n	8002cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cca:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf4 <SysTick_Config+0x40>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd2:	210f      	movs	r1, #15
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f7ff ff8e 	bl	8002bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <SysTick_Config+0x40>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce2:	4b04      	ldr	r3, [pc, #16]	@ (8002cf4 <SysTick_Config+0x40>)
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000e010 	.word	0xe000e010

08002cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ff29 	bl	8002b58 <__NVIC_SetPriorityGrouping>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d20:	f7ff ff3e 	bl	8002ba0 <__NVIC_GetPriorityGrouping>
 8002d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7ff ff8e 	bl	8002c4c <NVIC_EncodePriority>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff5d 	bl	8002bf8 <__NVIC_SetPriority>
}
 8002d3e:	bf00      	nop
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff31 	bl	8002bbc <__NVIC_EnableIRQ>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ffa2 	bl	8002cb4 <SysTick_Config>
 8002d70:	4603      	mov	r3, r0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff feb6 	bl	8002af8 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e099      	b.n	8002ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db8:	e00f      	b.n	8002dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dba:	f7ff fe9d 	bl	8002af8 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d908      	bls.n	8002dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e078      	b.n	8002ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e8      	bne.n	8002dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4b38      	ldr	r3, [pc, #224]	@ (8002ed4 <HAL_DMA_Init+0x158>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d107      	bne.n	8002e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 0307 	bic.w	r3, r3, #7
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d117      	bne.n	8002e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fb01 	bl	8003488 <DMA_CheckFifoParam>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2240      	movs	r2, #64	@ 0x40
 8002e90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e016      	b.n	8002ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fab8 	bl	800341c <DMA_CalcBaseAndBitshift>
 8002eac:	4603      	mov	r3, r0
 8002eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb4:	223f      	movs	r2, #63	@ 0x3f
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	f010803f 	.word	0xf010803f

08002ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_DMA_Start_IT+0x26>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e040      	b.n	8002f80 <HAL_DMA_Start_IT+0xa8>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d12f      	bne.n	8002f72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fa4a 	bl	80033c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	223f      	movs	r2, #63	@ 0x3f
 8002f32:	409a      	lsls	r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0216 	orr.w	r2, r2, #22
 8002f46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0208 	orr.w	r2, r2, #8
 8002f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	e005      	b.n	8002f7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f96:	f7ff fdaf 	bl	8002af8 <HAL_GetTick>
 8002f9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d008      	beq.n	8002fba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2280      	movs	r2, #128	@ 0x80
 8002fac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e052      	b.n	8003060 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0216 	bic.w	r2, r2, #22
 8002fc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <HAL_DMA_Abort+0x62>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0208 	bic.w	r2, r2, #8
 8002ff8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800300a:	e013      	b.n	8003034 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800300c:	f7ff fd74 	bl	8002af8 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b05      	cmp	r3, #5
 8003018:	d90c      	bls.n	8003034 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2203      	movs	r2, #3
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e015      	b.n	8003060 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e4      	bne.n	800300c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003046:	223f      	movs	r2, #63	@ 0x3f
 8003048:	409a      	lsls	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d004      	beq.n	8003086 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2280      	movs	r2, #128	@ 0x80
 8003080:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e00c      	b.n	80030a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2205      	movs	r2, #5
 800308a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030b8:	4b8e      	ldr	r3, [pc, #568]	@ (80032f4 <HAL_DMA_IRQHandler+0x248>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a8e      	ldr	r2, [pc, #568]	@ (80032f8 <HAL_DMA_IRQHandler+0x24c>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0a9b      	lsrs	r3, r3, #10
 80030c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d6:	2208      	movs	r2, #8
 80030d8:	409a      	lsls	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01a      	beq.n	8003118 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0204 	bic.w	r2, r2, #4
 80030fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003104:	2208      	movs	r2, #8
 8003106:	409a      	lsls	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	2201      	movs	r2, #1
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d012      	beq.n	800314e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313a:	2201      	movs	r2, #1
 800313c:	409a      	lsls	r2, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003146:	f043 0202 	orr.w	r2, r3, #2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003152:	2204      	movs	r2, #4
 8003154:	409a      	lsls	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d012      	beq.n	8003184 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	2204      	movs	r2, #4
 8003172:	409a      	lsls	r2, r3
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317c:	f043 0204 	orr.w	r2, r3, #4
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003188:	2210      	movs	r2, #16
 800318a:	409a      	lsls	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d043      	beq.n	800321c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d03c      	beq.n	800321c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a6:	2210      	movs	r2, #16
 80031a8:	409a      	lsls	r2, r3
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d018      	beq.n	80031ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d108      	bne.n	80031dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d024      	beq.n	800321c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	4798      	blx	r3
 80031da:	e01f      	b.n	800321c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01b      	beq.n	800321c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
 80031ec:	e016      	b.n	800321c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d107      	bne.n	800320c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0208 	bic.w	r2, r2, #8
 800320a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	2220      	movs	r2, #32
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 808f 	beq.w	800334c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 8087 	beq.w	800334c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003242:	2220      	movs	r2, #32
 8003244:	409a      	lsls	r2, r3
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b05      	cmp	r3, #5
 8003254:	d136      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0216 	bic.w	r2, r2, #22
 8003264:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003274:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_DMA_IRQHandler+0x1da>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0208 	bic.w	r2, r2, #8
 8003294:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329a:	223f      	movs	r2, #63	@ 0x3f
 800329c:	409a      	lsls	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d07e      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
        }
        return;
 80032c2:	e079      	b.n	80033b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d01d      	beq.n	800330e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10d      	bne.n	80032fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d031      	beq.n	800334c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
 80032f0:	e02c      	b.n	800334c <HAL_DMA_IRQHandler+0x2a0>
 80032f2:	bf00      	nop
 80032f4:	20000008 	.word	0x20000008
 80032f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d023      	beq.n	800334c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
 800330c:	e01e      	b.n	800334c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10f      	bne.n	800333c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0210 	bic.w	r2, r2, #16
 800332a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003350:	2b00      	cmp	r3, #0
 8003352:	d032      	beq.n	80033ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d022      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2205      	movs	r2, #5
 8003364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	3301      	adds	r3, #1
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	d307      	bcc.n	8003394 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f2      	bne.n	8003378 <HAL_DMA_IRQHandler+0x2cc>
 8003392:	e000      	b.n	8003396 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003394:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
 80033b6:	e000      	b.n	80033ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80033b8:	bf00      	nop
    }
  }
}
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b40      	cmp	r3, #64	@ 0x40
 80033ec:	d108      	bne.n	8003400 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033fe:	e007      	b.n	8003410 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	3b10      	subs	r3, #16
 800342c:	4a14      	ldr	r2, [pc, #80]	@ (8003480 <DMA_CalcBaseAndBitshift+0x64>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003436:	4a13      	ldr	r2, [pc, #76]	@ (8003484 <DMA_CalcBaseAndBitshift+0x68>)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d909      	bls.n	800345e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003452:	f023 0303 	bic.w	r3, r3, #3
 8003456:	1d1a      	adds	r2, r3, #4
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	659a      	str	r2, [r3, #88]	@ 0x58
 800345c:	e007      	b.n	800346e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	aaaaaaab 	.word	0xaaaaaaab
 8003484:	08006d38 	.word	0x08006d38

08003488 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d11f      	bne.n	80034e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d856      	bhi.n	8003556 <DMA_CheckFifoParam+0xce>
 80034a8:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <DMA_CheckFifoParam+0x28>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034c1 	.word	0x080034c1
 80034b4:	080034d3 	.word	0x080034d3
 80034b8:	080034c1 	.word	0x080034c1
 80034bc:	08003557 	.word	0x08003557
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d046      	beq.n	800355a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d0:	e043      	b.n	800355a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034da:	d140      	bne.n	800355e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e0:	e03d      	b.n	800355e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ea:	d121      	bne.n	8003530 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d837      	bhi.n	8003562 <DMA_CheckFifoParam+0xda>
 80034f2:	a201      	add	r2, pc, #4	@ (adr r2, 80034f8 <DMA_CheckFifoParam+0x70>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	08003509 	.word	0x08003509
 80034fc:	0800350f 	.word	0x0800350f
 8003500:	08003509 	.word	0x08003509
 8003504:	08003521 	.word	0x08003521
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      break;
 800350c:	e030      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003512:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d025      	beq.n	8003566 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351e:	e022      	b.n	8003566 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003524:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003528:	d11f      	bne.n	800356a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800352e:	e01c      	b.n	800356a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d903      	bls.n	800353e <DMA_CheckFifoParam+0xb6>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d003      	beq.n	8003544 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800353c:	e018      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
      break;
 8003542:	e015      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      break;
 8003554:	e00b      	b.n	800356e <DMA_CheckFifoParam+0xe6>
      break;
 8003556:	bf00      	nop
 8003558:	e00a      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      break;
 800355a:	bf00      	nop
 800355c:	e008      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      break;
 800355e:	bf00      	nop
 8003560:	e006      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      break;
 8003562:	bf00      	nop
 8003564:	e004      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      break;
 8003566:	bf00      	nop
 8003568:	e002      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      break;   
 800356a:	bf00      	nop
 800356c:	e000      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      break;
 800356e:	bf00      	nop
    }
  } 
  
  return status; 
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop

08003580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	@ 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	e16b      	b.n	8003874 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800359c:	2201      	movs	r2, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	f040 815a 	bne.w	800386e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d005      	beq.n	80035d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d130      	bne.n	8003634 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	2203      	movs	r2, #3
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003608:	2201      	movs	r2, #1
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 0201 	and.w	r2, r3, #1
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b03      	cmp	r3, #3
 800363e:	d017      	beq.n	8003670 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d123      	bne.n	80036c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	08da      	lsrs	r2, r3, #3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3208      	adds	r2, #8
 8003684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	220f      	movs	r2, #15
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	08da      	lsrs	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3208      	adds	r2, #8
 80036be:	69b9      	ldr	r1, [r7, #24]
 80036c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2203      	movs	r2, #3
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0203 	and.w	r2, r3, #3
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80b4 	beq.w	800386e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	4b60      	ldr	r3, [pc, #384]	@ (800388c <HAL_GPIO_Init+0x30c>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	4a5f      	ldr	r2, [pc, #380]	@ (800388c <HAL_GPIO_Init+0x30c>)
 8003710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003714:	6453      	str	r3, [r2, #68]	@ 0x44
 8003716:	4b5d      	ldr	r3, [pc, #372]	@ (800388c <HAL_GPIO_Init+0x30c>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003722:	4a5b      	ldr	r2, [pc, #364]	@ (8003890 <HAL_GPIO_Init+0x310>)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	3302      	adds	r3, #2
 800372a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	220f      	movs	r2, #15
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a52      	ldr	r2, [pc, #328]	@ (8003894 <HAL_GPIO_Init+0x314>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02b      	beq.n	80037a6 <HAL_GPIO_Init+0x226>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a51      	ldr	r2, [pc, #324]	@ (8003898 <HAL_GPIO_Init+0x318>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d025      	beq.n	80037a2 <HAL_GPIO_Init+0x222>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a50      	ldr	r2, [pc, #320]	@ (800389c <HAL_GPIO_Init+0x31c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01f      	beq.n	800379e <HAL_GPIO_Init+0x21e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a4f      	ldr	r2, [pc, #316]	@ (80038a0 <HAL_GPIO_Init+0x320>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d019      	beq.n	800379a <HAL_GPIO_Init+0x21a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a4e      	ldr	r2, [pc, #312]	@ (80038a4 <HAL_GPIO_Init+0x324>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d013      	beq.n	8003796 <HAL_GPIO_Init+0x216>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a4d      	ldr	r2, [pc, #308]	@ (80038a8 <HAL_GPIO_Init+0x328>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00d      	beq.n	8003792 <HAL_GPIO_Init+0x212>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a4c      	ldr	r2, [pc, #304]	@ (80038ac <HAL_GPIO_Init+0x32c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d007      	beq.n	800378e <HAL_GPIO_Init+0x20e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4b      	ldr	r2, [pc, #300]	@ (80038b0 <HAL_GPIO_Init+0x330>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <HAL_GPIO_Init+0x20a>
 8003786:	2307      	movs	r3, #7
 8003788:	e00e      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 800378a:	2308      	movs	r3, #8
 800378c:	e00c      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 800378e:	2306      	movs	r3, #6
 8003790:	e00a      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 8003792:	2305      	movs	r3, #5
 8003794:	e008      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 8003796:	2304      	movs	r3, #4
 8003798:	e006      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 800379a:	2303      	movs	r3, #3
 800379c:	e004      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 800379e:	2302      	movs	r3, #2
 80037a0:	e002      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 80037a6:	2300      	movs	r3, #0
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	f002 0203 	and.w	r2, r2, #3
 80037ae:	0092      	lsls	r2, r2, #2
 80037b0:	4093      	lsls	r3, r2
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037b8:	4935      	ldr	r1, [pc, #212]	@ (8003890 <HAL_GPIO_Init+0x310>)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	089b      	lsrs	r3, r3, #2
 80037be:	3302      	adds	r3, #2
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c6:	4b3b      	ldr	r3, [pc, #236]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ea:	4a32      	ldr	r2, [pc, #200]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f0:	4b30      	ldr	r3, [pc, #192]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003814:	4a27      	ldr	r2, [pc, #156]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800381a:	4b26      	ldr	r3, [pc, #152]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800383e:	4a1d      	ldr	r2, [pc, #116]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003844:	4b1b      	ldr	r3, [pc, #108]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003868:	4a12      	ldr	r2, [pc, #72]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3301      	adds	r3, #1
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b0f      	cmp	r3, #15
 8003878:	f67f ae90 	bls.w	800359c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800387c:	bf00      	nop
 800387e:	bf00      	nop
 8003880:	3724      	adds	r7, #36	@ 0x24
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	40013800 	.word	0x40013800
 8003894:	40020000 	.word	0x40020000
 8003898:	40020400 	.word	0x40020400
 800389c:	40020800 	.word	0x40020800
 80038a0:	40020c00 	.word	0x40020c00
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40021400 	.word	0x40021400
 80038ac:	40021800 	.word	0x40021800
 80038b0:	40021c00 	.word	0x40021c00
 80038b4:	40013c00 	.word	0x40013c00

080038b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
 80038c4:	4613      	mov	r3, r2
 80038c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038c8:	787b      	ldrb	r3, [r7, #1]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038d4:	e003      	b.n	80038de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038d6:	887b      	ldrh	r3, [r7, #2]
 80038d8:	041a      	lsls	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	619a      	str	r2, [r3, #24]
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e267      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d075      	beq.n	80039f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800390a:	4b88      	ldr	r3, [pc, #544]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b04      	cmp	r3, #4
 8003914:	d00c      	beq.n	8003930 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003916:	4b85      	ldr	r3, [pc, #532]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800391e:	2b08      	cmp	r3, #8
 8003920:	d112      	bne.n	8003948 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003922:	4b82      	ldr	r3, [pc, #520]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800392a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800392e:	d10b      	bne.n	8003948 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	4b7e      	ldr	r3, [pc, #504]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d05b      	beq.n	80039f4 <HAL_RCC_OscConfig+0x108>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d157      	bne.n	80039f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e242      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003950:	d106      	bne.n	8003960 <HAL_RCC_OscConfig+0x74>
 8003952:	4b76      	ldr	r3, [pc, #472]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a75      	ldr	r2, [pc, #468]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e01d      	b.n	800399c <HAL_RCC_OscConfig+0xb0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003968:	d10c      	bne.n	8003984 <HAL_RCC_OscConfig+0x98>
 800396a:	4b70      	ldr	r3, [pc, #448]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a6f      	ldr	r2, [pc, #444]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4b6d      	ldr	r3, [pc, #436]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a6c      	ldr	r2, [pc, #432]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e00b      	b.n	800399c <HAL_RCC_OscConfig+0xb0>
 8003984:	4b69      	ldr	r3, [pc, #420]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a68      	ldr	r2, [pc, #416]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 800398a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4b66      	ldr	r3, [pc, #408]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a65      	ldr	r2, [pc, #404]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800399a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7ff f8a8 	bl	8002af8 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ac:	f7ff f8a4 	bl	8002af8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	@ 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e207      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	4b5b      	ldr	r3, [pc, #364]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0xc0>
 80039ca:	e014      	b.n	80039f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7ff f894 	bl	8002af8 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d4:	f7ff f890 	bl	8002af8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	@ 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e1f3      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	4b51      	ldr	r3, [pc, #324]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0xe8>
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d063      	beq.n	8003aca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a02:	4b4a      	ldr	r3, [pc, #296]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0e:	4b47      	ldr	r3, [pc, #284]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d11c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1a:	4b44      	ldr	r3, [pc, #272]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d116      	bne.n	8003a54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	4b41      	ldr	r3, [pc, #260]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_RCC_OscConfig+0x152>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e1c7      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4937      	ldr	r1, [pc, #220]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	e03a      	b.n	8003aca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5c:	4b34      	ldr	r3, [pc, #208]	@ (8003b30 <HAL_RCC_OscConfig+0x244>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7ff f849 	bl	8002af8 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7ff f845 	bl	8002af8 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e1a8      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	4b28      	ldr	r3, [pc, #160]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4925      	ldr	r1, [pc, #148]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
 8003a9c:	e015      	b.n	8003aca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9e:	4b24      	ldr	r3, [pc, #144]	@ (8003b30 <HAL_RCC_OscConfig+0x244>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7ff f828 	bl	8002af8 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aac:	f7ff f824 	bl	8002af8 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e187      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	4b1b      	ldr	r3, [pc, #108]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d036      	beq.n	8003b44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d016      	beq.n	8003b0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ade:	4b15      	ldr	r3, [pc, #84]	@ (8003b34 <HAL_RCC_OscConfig+0x248>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae4:	f7ff f808 	bl	8002af8 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aec:	f7ff f804 	bl	8002af8 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e167      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x200>
 8003b0a:	e01b      	b.n	8003b44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0c:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <HAL_RCC_OscConfig+0x248>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b12:	f7fe fff1 	bl	8002af8 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	e00e      	b.n	8003b38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1a:	f7fe ffed 	bl	8002af8 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d907      	bls.n	8003b38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e150      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	42470000 	.word	0x42470000
 8003b34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	4b88      	ldr	r3, [pc, #544]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ea      	bne.n	8003b1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8097 	beq.w	8003c80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b81      	ldr	r3, [pc, #516]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	4b7d      	ldr	r3, [pc, #500]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b72:	4b7a      	ldr	r3, [pc, #488]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b77      	ldr	r3, [pc, #476]	@ (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d118      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8e:	4b74      	ldr	r3, [pc, #464]	@ (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a73      	ldr	r2, [pc, #460]	@ (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7fe ffad 	bl	8002af8 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba2:	f7fe ffa9 	bl	8002af8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e10c      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x2ea>
 8003bc8:	4b64      	ldr	r3, [pc, #400]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bcc:	4a63      	ldr	r2, [pc, #396]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd4:	e01c      	b.n	8003c10 <HAL_RCC_OscConfig+0x324>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x30c>
 8003bde:	4b5f      	ldr	r3, [pc, #380]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be2:	4a5e      	ldr	r2, [pc, #376]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003be4:	f043 0304 	orr.w	r3, r3, #4
 8003be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bea:	4b5c      	ldr	r3, [pc, #368]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bee:	4a5b      	ldr	r2, [pc, #364]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0x324>
 8003bf8:	4b58      	ldr	r3, [pc, #352]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfc:	4a57      	ldr	r2, [pc, #348]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c04:	4b55      	ldr	r3, [pc, #340]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c08:	4a54      	ldr	r2, [pc, #336]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c0a:	f023 0304 	bic.w	r3, r3, #4
 8003c0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fe ff6e 	bl	8002af8 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c20:	f7fe ff6a 	bl	8002af8 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e0cb      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	4b49      	ldr	r3, [pc, #292]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0ee      	beq.n	8003c20 <HAL_RCC_OscConfig+0x334>
 8003c42:	e014      	b.n	8003c6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c44:	f7fe ff58 	bl	8002af8 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fe ff54 	bl	8002af8 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e0b5      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c62:	4b3e      	ldr	r3, [pc, #248]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ee      	bne.n	8003c4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d105      	bne.n	8003c80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c74:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	4a38      	ldr	r2, [pc, #224]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80a1 	beq.w	8003dcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c8a:	4b34      	ldr	r3, [pc, #208]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d05c      	beq.n	8003d50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d141      	bne.n	8003d22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b31      	ldr	r3, [pc, #196]	@ (8003d64 <HAL_RCC_OscConfig+0x478>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe ff28 	bl	8002af8 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe ff24 	bl	8002af8 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e087      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	4b27      	ldr	r3, [pc, #156]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	019b      	lsls	r3, r3, #6
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	491b      	ldr	r1, [pc, #108]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d64 <HAL_RCC_OscConfig+0x478>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7fe fefd 	bl	8002af8 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d02:	f7fe fef9 	bl	8002af8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e05c      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d14:	4b11      	ldr	r3, [pc, #68]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x416>
 8003d20:	e054      	b.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	4b10      	ldr	r3, [pc, #64]	@ (8003d64 <HAL_RCC_OscConfig+0x478>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fe fee6 	bl	8002af8 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fe fee2 	bl	8002af8 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e045      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x444>
 8003d4e:	e03d      	b.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d107      	bne.n	8003d68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e038      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40007000 	.word	0x40007000
 8003d64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d68:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ec>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d028      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d121      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d11a      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d98:	4013      	ands	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d111      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dae:	085b      	lsrs	r3, r3, #1
 8003db0:	3b01      	subs	r3, #1
 8003db2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800

08003ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0cc      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df0:	4b68      	ldr	r3, [pc, #416]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d90c      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	4b65      	ldr	r3, [pc, #404]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b63      	ldr	r3, [pc, #396]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0b8      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e30:	4b59      	ldr	r3, [pc, #356]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4a58      	ldr	r2, [pc, #352]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e48:	4b53      	ldr	r3, [pc, #332]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a52      	ldr	r2, [pc, #328]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4b50      	ldr	r3, [pc, #320]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	494d      	ldr	r1, [pc, #308]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d044      	beq.n	8003efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7a:	4b47      	ldr	r3, [pc, #284]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d119      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e07f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d003      	beq.n	8003e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e06f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e067      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eba:	4b37      	ldr	r3, [pc, #220]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f023 0203 	bic.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4934      	ldr	r1, [pc, #208]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ecc:	f7fe fe14 	bl	8002af8 <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed4:	f7fe fe10 	bl	8002af8 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e04f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	4b2b      	ldr	r3, [pc, #172]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 020c 	and.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d1eb      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003efc:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d20c      	bcs.n	8003f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b22      	ldr	r3, [pc, #136]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b20      	ldr	r3, [pc, #128]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e032      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f30:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4916      	ldr	r1, [pc, #88]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f4e:	4b12      	ldr	r3, [pc, #72]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	490e      	ldr	r1, [pc, #56]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f62:	f000 f821 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f66:	4602      	mov	r2, r0
 8003f68:	4b0b      	ldr	r3, [pc, #44]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	490a      	ldr	r1, [pc, #40]	@ (8003f9c <HAL_RCC_ClockConfig+0x1c0>)
 8003f74:	5ccb      	ldrb	r3, [r1, r3]
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fd74 	bl	8002a70 <HAL_InitTick>

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40023c00 	.word	0x40023c00
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	08006d20 	.word	0x08006d20
 8003fa0:	20000008 	.word	0x20000008
 8003fa4:	2000000c 	.word	0x2000000c

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	b090      	sub	sp, #64	@ 0x40
 8003fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fb8:	2300      	movs	r3, #0
 8003fba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc0:	4b59      	ldr	r3, [pc, #356]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d00d      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	f200 80a1 	bhi.w	8004114 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x34>
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fda:	e09b      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fdc:	4b53      	ldr	r3, [pc, #332]	@ (800412c <HAL_RCC_GetSysClockFreq+0x184>)
 8003fde:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003fe0:	e09b      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fe2:	4b53      	ldr	r3, [pc, #332]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fe6:	e098      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ff0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d028      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	099b      	lsrs	r3, r3, #6
 8004004:	2200      	movs	r2, #0
 8004006:	623b      	str	r3, [r7, #32]
 8004008:	627a      	str	r2, [r7, #36]	@ 0x24
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004010:	2100      	movs	r1, #0
 8004012:	4b47      	ldr	r3, [pc, #284]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8004014:	fb03 f201 	mul.w	r2, r3, r1
 8004018:	2300      	movs	r3, #0
 800401a:	fb00 f303 	mul.w	r3, r0, r3
 800401e:	4413      	add	r3, r2
 8004020:	4a43      	ldr	r2, [pc, #268]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8004022:	fba0 1202 	umull	r1, r2, r0, r2
 8004026:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004028:	460a      	mov	r2, r1
 800402a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800402c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800402e:	4413      	add	r3, r2
 8004030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004034:	2200      	movs	r2, #0
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	61fa      	str	r2, [r7, #28]
 800403a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800403e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004042:	f7fc fd4d 	bl	8000ae0 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4613      	mov	r3, r2
 800404c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800404e:	e053      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004050:	4b35      	ldr	r3, [pc, #212]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	2200      	movs	r2, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	617a      	str	r2, [r7, #20]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004062:	f04f 0b00 	mov.w	fp, #0
 8004066:	4652      	mov	r2, sl
 8004068:	465b      	mov	r3, fp
 800406a:	f04f 0000 	mov.w	r0, #0
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	0159      	lsls	r1, r3, #5
 8004074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004078:	0150      	lsls	r0, r2, #5
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	ebb2 080a 	subs.w	r8, r2, sl
 8004082:	eb63 090b 	sbc.w	r9, r3, fp
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004092:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004096:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800409a:	ebb2 0408 	subs.w	r4, r2, r8
 800409e:	eb63 0509 	sbc.w	r5, r3, r9
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	00eb      	lsls	r3, r5, #3
 80040ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b0:	00e2      	lsls	r2, r4, #3
 80040b2:	4614      	mov	r4, r2
 80040b4:	461d      	mov	r5, r3
 80040b6:	eb14 030a 	adds.w	r3, r4, sl
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	eb45 030b 	adc.w	r3, r5, fp
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ce:	4629      	mov	r1, r5
 80040d0:	028b      	lsls	r3, r1, #10
 80040d2:	4621      	mov	r1, r4
 80040d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d8:	4621      	mov	r1, r4
 80040da:	028a      	lsls	r2, r1, #10
 80040dc:	4610      	mov	r0, r2
 80040de:	4619      	mov	r1, r3
 80040e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e2:	2200      	movs	r2, #0
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	60fa      	str	r2, [r7, #12]
 80040e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ec:	f7fc fcf8 	bl	8000ae0 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4613      	mov	r3, r2
 80040f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	3301      	adds	r3, #1
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004108:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004112:	e002      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <HAL_RCC_GetSysClockFreq+0x184>)
 8004116:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800411c:	4618      	mov	r0, r3
 800411e:	3740      	adds	r7, #64	@ 0x40
 8004120:	46bd      	mov	sp, r7
 8004122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	00f42400 	.word	0x00f42400
 8004130:	017d7840 	.word	0x017d7840

08004134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004138:	4b03      	ldr	r3, [pc, #12]	@ (8004148 <HAL_RCC_GetHCLKFreq+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000008 	.word	0x20000008

0800414c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004150:	f7ff fff0 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	@ (800416c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0a9b      	lsrs	r3, r3, #10
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	@ (8004170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	08006d30 	.word	0x08006d30

08004174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004178:	f7ff ffdc 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	0b5b      	lsrs	r3, r3, #13
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4903      	ldr	r1, [pc, #12]	@ (8004198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	08006d30 	.word	0x08006d30

0800419c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e041      	b.n	8004232 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fe f884 	bl	80022d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f000 fd96 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d001      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e04e      	b.n	80042f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a23      	ldr	r2, [pc, #140]	@ (8004300 <HAL_TIM_Base_Start_IT+0xc4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d022      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427e:	d01d      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1f      	ldr	r2, [pc, #124]	@ (8004304 <HAL_TIM_Base_Start_IT+0xc8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d018      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1e      	ldr	r2, [pc, #120]	@ (8004308 <HAL_TIM_Base_Start_IT+0xcc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1c      	ldr	r2, [pc, #112]	@ (800430c <HAL_TIM_Base_Start_IT+0xd0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00e      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004310 <HAL_TIM_Base_Start_IT+0xd4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a19      	ldr	r2, [pc, #100]	@ (8004314 <HAL_TIM_Base_Start_IT+0xd8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a18      	ldr	r2, [pc, #96]	@ (8004318 <HAL_TIM_Base_Start_IT+0xdc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d111      	bne.n	80042e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d010      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0201 	orr.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	e007      	b.n	80042f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40010400 	.word	0x40010400
 8004314:	40014000 	.word	0x40014000
 8004318:	40001800 	.word	0x40001800

0800431c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e041      	b.n	80043b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f839 	bl	80043ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f000 fcd6 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <HAL_TIM_PWM_Start+0x24>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e022      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d109      	bne.n	800440e <HAL_TIM_PWM_Start+0x3e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	e015      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d109      	bne.n	8004428 <HAL_TIM_PWM_Start+0x58>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e008      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e07c      	b.n	800453c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start+0x82>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004450:	e013      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b04      	cmp	r3, #4
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0x92>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004460:	e00b      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0xa2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004470:	e003      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2201      	movs	r2, #1
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 ff38 	bl	80052f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2d      	ldr	r2, [pc, #180]	@ (8004544 <HAL_TIM_PWM_Start+0x174>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_TIM_PWM_Start+0xcc>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2c      	ldr	r2, [pc, #176]	@ (8004548 <HAL_TIM_PWM_Start+0x178>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d101      	bne.n	80044a0 <HAL_TIM_PWM_Start+0xd0>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <HAL_TIM_PWM_Start+0xd2>
 80044a0:	2300      	movs	r3, #0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a22      	ldr	r2, [pc, #136]	@ (8004544 <HAL_TIM_PWM_Start+0x174>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d022      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c8:	d01d      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1f      	ldr	r2, [pc, #124]	@ (800454c <HAL_TIM_PWM_Start+0x17c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d018      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004550 <HAL_TIM_PWM_Start+0x180>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004554 <HAL_TIM_PWM_Start+0x184>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00e      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a16      	ldr	r2, [pc, #88]	@ (8004548 <HAL_TIM_PWM_Start+0x178>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d009      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a18      	ldr	r2, [pc, #96]	@ (8004558 <HAL_TIM_PWM_Start+0x188>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a16      	ldr	r2, [pc, #88]	@ (800455c <HAL_TIM_PWM_Start+0x18c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d111      	bne.n	800452a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b06      	cmp	r3, #6
 8004516:	d010      	beq.n	800453a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004528:	e007      	b.n	800453a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40010000 	.word	0x40010000
 8004548:	40010400 	.word	0x40010400
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40014000 	.word	0x40014000
 800455c:	40001800 	.word	0x40001800

08004560 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e097      	b.n	80046a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fd ff21 	bl	80023d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045a4:	f023 0307 	bic.w	r3, r3, #7
 80045a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f000 fba9 	bl	8004d0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045e2:	f023 0303 	bic.w	r3, r3, #3
 80045e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	4313      	orrs	r3, r2
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004600:	f023 030c 	bic.w	r3, r3, #12
 8004604:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800460c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	4313      	orrs	r3, r2
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	011a      	lsls	r2, r3, #4
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	031b      	lsls	r3, r3, #12
 8004630:	4313      	orrs	r3, r2
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	4313      	orrs	r3, r2
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d110      	bne.n	80046fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d102      	bne.n	80046e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046e2:	7b7b      	ldrb	r3, [r7, #13]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d001      	beq.n	80046ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e069      	b.n	80047c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046fc:	e031      	b.n	8004762 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d110      	bne.n	8004726 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d102      	bne.n	8004710 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800470a:	7b3b      	ldrb	r3, [r7, #12]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d001      	beq.n	8004714 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e055      	b.n	80047c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004724:	e01d      	b.n	8004762 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d108      	bne.n	800473e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800472c:	7bbb      	ldrb	r3, [r7, #14]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004732:	7b7b      	ldrb	r3, [r7, #13]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d102      	bne.n	800473e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004738:	7b3b      	ldrb	r3, [r7, #12]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d001      	beq.n	8004742 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e03e      	b.n	80047c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2202      	movs	r2, #2
 8004756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_TIM_Encoder_Start+0xc4>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d008      	beq.n	8004780 <HAL_TIM_Encoder_Start+0xd4>
 800476e:	e00f      	b.n	8004790 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2201      	movs	r2, #1
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fdbd 	bl	80052f8 <TIM_CCxChannelCmd>
      break;
 800477e:	e016      	b.n	80047ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2201      	movs	r2, #1
 8004786:	2104      	movs	r1, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fdb5 	bl	80052f8 <TIM_CCxChannelCmd>
      break;
 800478e:	e00e      	b.n	80047ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2201      	movs	r2, #1
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fdad 	bl	80052f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2201      	movs	r2, #1
 80047a4:	2104      	movs	r1, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fda6 	bl	80052f8 <TIM_CCxChannelCmd>
      break;
 80047ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0201 	orr.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d020      	beq.n	800482c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01b      	beq.n	800482c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0202 	mvn.w	r2, #2
 80047fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fa5b 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004818:	e005      	b.n	8004826 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fa4d 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fa5e 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	d020      	beq.n	8004878 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01b      	beq.n	8004878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0204 	mvn.w	r2, #4
 8004848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fa35 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004864:	e005      	b.n	8004872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa27 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fa38 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d020      	beq.n	80048c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01b      	beq.n	80048c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0208 	mvn.w	r2, #8
 8004894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2204      	movs	r2, #4
 800489a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa0f 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 80048b0:	e005      	b.n	80048be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fa01 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fa12 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d020      	beq.n	8004910 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01b      	beq.n	8004910 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0210 	mvn.w	r2, #16
 80048e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2208      	movs	r2, #8
 80048e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f9e9 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f9db 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f9ec 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00c      	beq.n	8004934 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0201 	mvn.w	r2, #1
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fc fbd8 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00c      	beq.n	8004958 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fdce 	bl	80054f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00c      	beq.n	800497c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9bd 	bl	8004cf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00c      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d007      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0220 	mvn.w	r2, #32
 8004998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fda0 	bl	80054e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e0ae      	b.n	8004b24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b0c      	cmp	r3, #12
 80049d2:	f200 809f 	bhi.w	8004b14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049d6:	a201      	add	r2, pc, #4	@ (adr r2, 80049dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004a11 	.word	0x08004a11
 80049e0:	08004b15 	.word	0x08004b15
 80049e4:	08004b15 	.word	0x08004b15
 80049e8:	08004b15 	.word	0x08004b15
 80049ec:	08004a51 	.word	0x08004a51
 80049f0:	08004b15 	.word	0x08004b15
 80049f4:	08004b15 	.word	0x08004b15
 80049f8:	08004b15 	.word	0x08004b15
 80049fc:	08004a93 	.word	0x08004a93
 8004a00:	08004b15 	.word	0x08004b15
 8004a04:	08004b15 	.word	0x08004b15
 8004a08:	08004b15 	.word	0x08004b15
 8004a0c:	08004ad3 	.word	0x08004ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fa24 	bl	8004e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0208 	orr.w	r2, r2, #8
 8004a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0204 	bic.w	r2, r2, #4
 8004a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6999      	ldr	r1, [r3, #24]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	619a      	str	r2, [r3, #24]
      break;
 8004a4e:	e064      	b.n	8004b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fa74 	bl	8004f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6999      	ldr	r1, [r3, #24]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	021a      	lsls	r2, r3, #8
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	619a      	str	r2, [r3, #24]
      break;
 8004a90:	e043      	b.n	8004b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fac9 	bl	8005030 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f042 0208 	orr.w	r2, r2, #8
 8004aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0204 	bic.w	r2, r2, #4
 8004abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69d9      	ldr	r1, [r3, #28]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	61da      	str	r2, [r3, #28]
      break;
 8004ad0:	e023      	b.n	8004b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fb1d 	bl	8005118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69d9      	ldr	r1, [r3, #28]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	021a      	lsls	r2, r3, #8
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	61da      	str	r2, [r3, #28]
      break;
 8004b12:	e002      	b.n	8004b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	75fb      	strb	r3, [r7, #23]
      break;
 8004b18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_TIM_ConfigClockSource+0x1c>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e0b4      	b.n	8004cb2 <HAL_TIM_ConfigClockSource+0x186>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b80:	d03e      	beq.n	8004c00 <HAL_TIM_ConfigClockSource+0xd4>
 8004b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b86:	f200 8087 	bhi.w	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8e:	f000 8086 	beq.w	8004c9e <HAL_TIM_ConfigClockSource+0x172>
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b96:	d87f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b70      	cmp	r3, #112	@ 0x70
 8004b9a:	d01a      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0xa6>
 8004b9c:	2b70      	cmp	r3, #112	@ 0x70
 8004b9e:	d87b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b60      	cmp	r3, #96	@ 0x60
 8004ba2:	d050      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x11a>
 8004ba4:	2b60      	cmp	r3, #96	@ 0x60
 8004ba6:	d877      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b50      	cmp	r3, #80	@ 0x50
 8004baa:	d03c      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0xfa>
 8004bac:	2b50      	cmp	r3, #80	@ 0x50
 8004bae:	d873      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b40      	cmp	r3, #64	@ 0x40
 8004bb2:	d058      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x13a>
 8004bb4:	2b40      	cmp	r3, #64	@ 0x40
 8004bb6:	d86f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b30      	cmp	r3, #48	@ 0x30
 8004bba:	d064      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bbc:	2b30      	cmp	r3, #48	@ 0x30
 8004bbe:	d86b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d060      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d867      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d05c      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d05a      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bd0:	e062      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004be2:	f000 fb69 	bl	80052b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	609a      	str	r2, [r3, #8]
      break;
 8004bfe:	e04f      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	f000 fb52 	bl	80052b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c22:	609a      	str	r2, [r3, #8]
      break;
 8004c24:	e03c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 fac6 	bl	80051c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2150      	movs	r1, #80	@ 0x50
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fb1f 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8004c44:	e02c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 fae5 	bl	8005222 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2160      	movs	r1, #96	@ 0x60
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fb0f 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8004c64:	e01c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	461a      	mov	r2, r3
 8004c74:	f000 faa6 	bl	80051c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2140      	movs	r1, #64	@ 0x40
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 faff 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8004c84:	e00c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f000 faf6 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8004c96:	e003      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9c:	e000      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a46      	ldr	r2, [pc, #280]	@ (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d2a:	d00f      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a43      	ldr	r2, [pc, #268]	@ (8004e3c <TIM_Base_SetConfig+0x130>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a42      	ldr	r2, [pc, #264]	@ (8004e40 <TIM_Base_SetConfig+0x134>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d007      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a41      	ldr	r2, [pc, #260]	@ (8004e44 <TIM_Base_SetConfig+0x138>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a40      	ldr	r2, [pc, #256]	@ (8004e48 <TIM_Base_SetConfig+0x13c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d108      	bne.n	8004d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a35      	ldr	r2, [pc, #212]	@ (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d02b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d6c:	d027      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a32      	ldr	r2, [pc, #200]	@ (8004e3c <TIM_Base_SetConfig+0x130>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d023      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a31      	ldr	r2, [pc, #196]	@ (8004e40 <TIM_Base_SetConfig+0x134>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01f      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a30      	ldr	r2, [pc, #192]	@ (8004e44 <TIM_Base_SetConfig+0x138>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2f      	ldr	r2, [pc, #188]	@ (8004e48 <TIM_Base_SetConfig+0x13c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d017      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2e      	ldr	r2, [pc, #184]	@ (8004e4c <TIM_Base_SetConfig+0x140>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a2d      	ldr	r2, [pc, #180]	@ (8004e50 <TIM_Base_SetConfig+0x144>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00f      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a2c      	ldr	r2, [pc, #176]	@ (8004e54 <TIM_Base_SetConfig+0x148>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e58 <TIM_Base_SetConfig+0x14c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e5c <TIM_Base_SetConfig+0x150>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a29      	ldr	r2, [pc, #164]	@ (8004e60 <TIM_Base_SetConfig+0x154>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a10      	ldr	r2, [pc, #64]	@ (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0xf8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a12      	ldr	r2, [pc, #72]	@ (8004e48 <TIM_Base_SetConfig+0x13c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d103      	bne.n	8004e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f023 0201 	bic.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	611a      	str	r2, [r3, #16]
  }
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40010400 	.word	0x40010400
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800
 8004e58:	40001800 	.word	0x40001800
 8004e5c:	40001c00 	.word	0x40001c00
 8004e60:	40002000 	.word	0x40002000

08004e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f023 0201 	bic.w	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 0302 	bic.w	r3, r3, #2
 8004eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a20      	ldr	r2, [pc, #128]	@ (8004f3c <TIM_OC1_SetConfig+0xd8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x64>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f40 <TIM_OC1_SetConfig+0xdc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d10c      	bne.n	8004ee2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0308 	bic.w	r3, r3, #8
 8004ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a15      	ldr	r2, [pc, #84]	@ (8004f3c <TIM_OC1_SetConfig+0xd8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d003      	beq.n	8004ef2 <TIM_OC1_SetConfig+0x8e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a14      	ldr	r2, [pc, #80]	@ (8004f40 <TIM_OC1_SetConfig+0xdc>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d111      	bne.n	8004f16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	621a      	str	r2, [r3, #32]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40010400 	.word	0x40010400

08004f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f023 0210 	bic.w	r2, r3, #16
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 0320 	bic.w	r3, r3, #32
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a22      	ldr	r2, [pc, #136]	@ (8005028 <TIM_OC2_SetConfig+0xe4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_OC2_SetConfig+0x68>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a21      	ldr	r2, [pc, #132]	@ (800502c <TIM_OC2_SetConfig+0xe8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d10d      	bne.n	8004fc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a17      	ldr	r2, [pc, #92]	@ (8005028 <TIM_OC2_SetConfig+0xe4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_OC2_SetConfig+0x94>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a16      	ldr	r2, [pc, #88]	@ (800502c <TIM_OC2_SetConfig+0xe8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d113      	bne.n	8005000 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40010000 	.word	0x40010000
 800502c:	40010400 	.word	0x40010400

08005030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800505e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	021b      	lsls	r3, r3, #8
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a21      	ldr	r2, [pc, #132]	@ (8005110 <TIM_OC3_SetConfig+0xe0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_OC3_SetConfig+0x66>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a20      	ldr	r2, [pc, #128]	@ (8005114 <TIM_OC3_SetConfig+0xe4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d10d      	bne.n	80050b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800509c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a16      	ldr	r2, [pc, #88]	@ (8005110 <TIM_OC3_SetConfig+0xe0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_OC3_SetConfig+0x92>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a15      	ldr	r2, [pc, #84]	@ (8005114 <TIM_OC3_SetConfig+0xe4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d113      	bne.n	80050ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	621a      	str	r2, [r3, #32]
}
 8005104:	bf00      	nop
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40010000 	.word	0x40010000
 8005114:	40010400 	.word	0x40010400

08005118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800514e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	031b      	lsls	r3, r3, #12
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a12      	ldr	r2, [pc, #72]	@ (80051bc <TIM_OC4_SetConfig+0xa4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_OC4_SetConfig+0x68>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a11      	ldr	r2, [pc, #68]	@ (80051c0 <TIM_OC4_SetConfig+0xa8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d109      	bne.n	8005194 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	019b      	lsls	r3, r3, #6
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	bf00      	nop
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40010400 	.word	0x40010400

080051c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f023 0201 	bic.w	r2, r3, #1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f023 030a 	bic.w	r3, r3, #10
 8005200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005222:	b480      	push	{r7}
 8005224:	b087      	sub	sp, #28
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f023 0210 	bic.w	r2, r3, #16
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800524c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	031b      	lsls	r3, r3, #12
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800525e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	f043 0307 	orr.w	r3, r3, #7
 80052a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	609a      	str	r2, [r3, #8]
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	021a      	lsls	r2, r3, #8
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	431a      	orrs	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4313      	orrs	r3, r2
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	609a      	str	r2, [r3, #8]
}
 80052ec:	bf00      	nop
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	2201      	movs	r2, #1
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1a      	ldr	r2, [r3, #32]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	43db      	mvns	r3, r3
 800531a:	401a      	ands	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1a      	ldr	r2, [r3, #32]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	fa01 f303 	lsl.w	r3, r1, r3
 8005330:	431a      	orrs	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e05a      	b.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a21      	ldr	r2, [pc, #132]	@ (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d022      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a8:	d01d      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d018      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1a      	ldr	r2, [pc, #104]	@ (800542c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a18      	ldr	r2, [pc, #96]	@ (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a17      	ldr	r2, [pc, #92]	@ (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a15      	ldr	r2, [pc, #84]	@ (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10c      	bne.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40010400 	.word	0x40010400
 8005434:	40014000 	.word	0x40014000
 8005438:	40001800 	.word	0x40001800

0800543c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005454:	2302      	movs	r3, #2
 8005456:	e03d      	b.n	80054d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e042      	b.n	80055a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fd f8d6 	bl	80026e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2224      	movs	r2, #36	@ 0x24
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800554a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 ff77 	bl	8006440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08c      	sub	sp, #48	@ 0x30
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d156      	bne.n	8005670 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_UART_Transmit_DMA+0x26>
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e04f      	b.n	8005672 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	88fa      	ldrh	r2, [r7, #6]
 80055e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2221      	movs	r2, #33	@ 0x21
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f6:	4a21      	ldr	r2, [pc, #132]	@ (800567c <HAL_UART_Transmit_DMA+0xd4>)
 80055f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fe:	4a20      	ldr	r2, [pc, #128]	@ (8005680 <HAL_UART_Transmit_DMA+0xd8>)
 8005600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005606:	4a1f      	ldr	r2, [pc, #124]	@ (8005684 <HAL_UART_Transmit_DMA+0xdc>)
 8005608:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560e:	2200      	movs	r2, #0
 8005610:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800561c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561e:	6819      	ldr	r1, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3304      	adds	r3, #4
 8005626:	461a      	mov	r2, r3
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	f7fd fc55 	bl	8002ed8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005636:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3314      	adds	r3, #20
 800563e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	617b      	str	r3, [r7, #20]
   return(result);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800564e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3314      	adds	r3, #20
 8005656:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005658:	627a      	str	r2, [r7, #36]	@ 0x24
 800565a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	6a39      	ldr	r1, [r7, #32]
 800565e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	61fb      	str	r3, [r7, #28]
   return(result);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e5      	bne.n	8005638 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	e000      	b.n	8005672 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005670:	2302      	movs	r3, #2
  }
}
 8005672:	4618      	mov	r0, r3
 8005674:	3730      	adds	r7, #48	@ 0x30
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	08005ccd 	.word	0x08005ccd
 8005680:	08005d67 	.word	0x08005d67
 8005684:	08005eeb 	.word	0x08005eeb

08005688 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	@ 0x30
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	4613      	mov	r3, r2
 8005694:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b20      	cmp	r3, #32
 80056a0:	d14a      	bne.n	8005738 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e043      	b.n	800573a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80056be:	88fb      	ldrh	r3, [r7, #6]
 80056c0:	461a      	mov	r2, r3
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 fc5b 	bl	8005f80 <UART_Start_Receive_DMA>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80056d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d12c      	bne.n	8005732 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d125      	bne.n	800572c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056e0:	2300      	movs	r3, #0
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	330c      	adds	r3, #12
 80056fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	617b      	str	r3, [r7, #20]
   return(result);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f043 0310 	orr.w	r3, r3, #16
 800570c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	330c      	adds	r3, #12
 8005714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005716:	627a      	str	r2, [r7, #36]	@ 0x24
 8005718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6a39      	ldr	r1, [r7, #32]
 800571c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	61fb      	str	r3, [r7, #28]
   return(result);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e5      	bne.n	80056f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800572a:	e002      	b.n	8005732 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005732:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005736:	e000      	b.n	800573a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	4618      	mov	r0, r3
 800573c:	3730      	adds	r7, #48	@ 0x30
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b0ba      	sub	sp, #232	@ 0xe8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800576a:	2300      	movs	r3, #0
 800576c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005770:	2300      	movs	r3, #0
 8005772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10f      	bne.n	80057aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <HAL_UART_IRQHandler+0x66>
 8005796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fd8d 	bl	80062c2 <UART_Receive_IT>
      return;
 80057a8:	e25b      	b.n	8005c62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 80de 	beq.w	8005970 <HAL_UART_IRQHandler+0x22c>
 80057b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d106      	bne.n	80057ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80d1 	beq.w	8005970 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <HAL_UART_IRQHandler+0xae>
 80057da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ea:	f043 0201 	orr.w	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <HAL_UART_IRQHandler+0xd2>
 80057fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580e:	f043 0202 	orr.w	r2, r3, #2
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <HAL_UART_IRQHandler+0xf6>
 8005822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005832:	f043 0204 	orr.w	r2, r3, #4
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800583a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d011      	beq.n	800586a <HAL_UART_IRQHandler+0x126>
 8005846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b00      	cmp	r3, #0
 8005850:	d105      	bne.n	800585e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005862:	f043 0208 	orr.w	r2, r3, #8
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 81f2 	beq.w	8005c58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_UART_IRQHandler+0x14e>
 8005880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fd18 	bl	80062c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589c:	2b40      	cmp	r3, #64	@ 0x40
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <HAL_UART_IRQHandler+0x17a>
 80058b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d04f      	beq.n	800595e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fc20 	bl	8006104 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ce:	2b40      	cmp	r3, #64	@ 0x40
 80058d0:	d141      	bne.n	8005956 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3314      	adds	r3, #20
 80058fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005902:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800590a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1d9      	bne.n	80058d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d013      	beq.n	800594e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592a:	4a7e      	ldr	r2, [pc, #504]	@ (8005b24 <HAL_UART_IRQHandler+0x3e0>)
 800592c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005932:	4618      	mov	r0, r3
 8005934:	f7fd fb98 	bl	8003068 <HAL_DMA_Abort_IT>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d016      	beq.n	800596c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005948:	4610      	mov	r0, r2
 800594a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594c:	e00e      	b.n	800596c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f9b2 	bl	8005cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005954:	e00a      	b.n	800596c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f9ae 	bl	8005cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595c:	e006      	b.n	800596c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f9aa 	bl	8005cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800596a:	e175      	b.n	8005c58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800596c:	bf00      	nop
    return;
 800596e:	e173      	b.n	8005c58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005974:	2b01      	cmp	r3, #1
 8005976:	f040 814f 	bne.w	8005c18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800597a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8148 	beq.w	8005c18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8141 	beq.w	8005c18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005996:	2300      	movs	r3, #0
 8005998:	60bb      	str	r3, [r7, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b6:	2b40      	cmp	r3, #64	@ 0x40
 80059b8:	f040 80b6 	bne.w	8005b28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8145 	beq.w	8005c5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059da:	429a      	cmp	r2, r3
 80059dc:	f080 813e 	bcs.w	8005c5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059f2:	f000 8088 	beq.w	8005b06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1d9      	bne.n	80059f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3314      	adds	r3, #20
 8005a48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a54:	f023 0301 	bic.w	r3, r3, #1
 8005a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3314      	adds	r3, #20
 8005a62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e1      	bne.n	8005a42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3314      	adds	r3, #20
 8005a84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3314      	adds	r3, #20
 8005a9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005aa2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005aa8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e3      	bne.n	8005a7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	330c      	adds	r3, #12
 8005aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ad6:	f023 0310 	bic.w	r3, r3, #16
 8005ada:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	330c      	adds	r3, #12
 8005ae4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ae8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005aea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005aee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e3      	bne.n	8005ac4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fd fa41 	bl	8002f88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7fb fb01 	bl	8001124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b22:	e09b      	b.n	8005c5c <HAL_UART_IRQHandler+0x518>
 8005b24:	080061cb 	.word	0x080061cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 808e 	beq.w	8005c60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8089 	beq.w	8005c60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	330c      	adds	r3, #12
 8005b54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b72:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e3      	bne.n	8005b4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3314      	adds	r3, #20
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	623b      	str	r3, [r7, #32]
   return(result);
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3314      	adds	r3, #20
 8005ba6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005baa:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e3      	bne.n	8005b86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0310 	bic.w	r3, r3, #16
 8005be2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	330c      	adds	r3, #12
 8005bec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005bf0:	61fa      	str	r2, [r7, #28]
 8005bf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	69b9      	ldr	r1, [r7, #24]
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	e841 2300 	strex	r3, r2, [r1]
 8005bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e3      	bne.n	8005bcc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fb fa87 	bl	8001124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c16:	e023      	b.n	8005c60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d009      	beq.n	8005c38 <HAL_UART_IRQHandler+0x4f4>
 8005c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fade 	bl	80061f2 <UART_Transmit_IT>
    return;
 8005c36:	e014      	b.n	8005c62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00e      	beq.n	8005c62 <HAL_UART_IRQHandler+0x51e>
 8005c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d008      	beq.n	8005c62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fb1e 	bl	8006292 <UART_EndTransmit_IT>
    return;
 8005c56:	e004      	b.n	8005c62 <HAL_UART_IRQHandler+0x51e>
    return;
 8005c58:	bf00      	nop
 8005c5a:	e002      	b.n	8005c62 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c5c:	bf00      	nop
 8005c5e:	e000      	b.n	8005c62 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c60:	bf00      	nop
  }
}
 8005c62:	37e8      	adds	r7, #232	@ 0xe8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b090      	sub	sp, #64	@ 0x40
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d137      	bne.n	8005d58 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cea:	2200      	movs	r2, #0
 8005cec:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3314      	adds	r3, #20
 8005cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3314      	adds	r3, #20
 8005d0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e5      	bne.n	8005cee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	330c      	adds	r3, #12
 8005d28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d42:	61fa      	str	r2, [r7, #28]
 8005d44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	69b9      	ldr	r1, [r7, #24]
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e5      	bne.n	8005d22 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d56:	e002      	b.n	8005d5e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005d58:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005d5a:	f7ff ff85 	bl	8005c68 <HAL_UART_TxCpltCallback>
}
 8005d5e:	bf00      	nop
 8005d60:	3740      	adds	r7, #64	@ 0x40
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff ff81 	bl	8005c7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d7a:	bf00      	nop
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b09c      	sub	sp, #112	@ 0x70
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d172      	bne.n	8005e84 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005da0:	2200      	movs	r2, #0
 8005da2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005da4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005dc4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005dc6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e5      	bne.n	8005da4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3314      	adds	r3, #20
 8005dde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	667b      	str	r3, [r7, #100]	@ 0x64
 8005df0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3314      	adds	r3, #20
 8005df6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005df8:	647a      	str	r2, [r7, #68]	@ 0x44
 8005dfa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e5      	bne.n	8005dd8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3314      	adds	r3, #20
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e22:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3314      	adds	r3, #20
 8005e2a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e5      	bne.n	8005e0c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d119      	bne.n	8005e84 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	330c      	adds	r3, #12
 8005e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0310 	bic.w	r3, r3, #16
 8005e66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	330c      	adds	r3, #12
 8005e6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e70:	61fa      	str	r2, [r7, #28]
 8005e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e74:	69b9      	ldr	r1, [r7, #24]
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e5      	bne.n	8005e50 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e86:	2200      	movs	r2, #0
 8005e88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d106      	bne.n	8005ea0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e96:	4619      	mov	r1, r3
 8005e98:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e9a:	f7fb f943 	bl	8001124 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e9e:	e002      	b.n	8005ea6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005ea0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005ea2:	f7ff fef5 	bl	8005c90 <HAL_UART_RxCpltCallback>
}
 8005ea6:	bf00      	nop
 8005ea8:	3770      	adds	r7, #112	@ 0x70
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d108      	bne.n	8005edc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ece:	085b      	lsrs	r3, r3, #1
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f7fb f925 	bl	8001124 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005eda:	e002      	b.n	8005ee2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7ff fee1 	bl	8005ca4 <HAL_UART_RxHalfCpltCallback>
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f06:	2b80      	cmp	r3, #128	@ 0x80
 8005f08:	bf0c      	ite	eq
 8005f0a:	2301      	moveq	r3, #1
 8005f0c:	2300      	movne	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b21      	cmp	r3, #33	@ 0x21
 8005f1c:	d108      	bne.n	8005f30 <UART_DMAError+0x46>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2200      	movs	r2, #0
 8005f28:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005f2a:	68b8      	ldr	r0, [r7, #8]
 8005f2c:	f000 f8c2 	bl	80060b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3a:	2b40      	cmp	r3, #64	@ 0x40
 8005f3c:	bf0c      	ite	eq
 8005f3e:	2301      	moveq	r3, #1
 8005f40:	2300      	movne	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b22      	cmp	r3, #34	@ 0x22
 8005f50:	d108      	bne.n	8005f64 <UART_DMAError+0x7a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005f5e:	68b8      	ldr	r0, [r7, #8]
 8005f60:	f000 f8d0 	bl	8006104 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f68:	f043 0210 	orr.w	r2, r3, #16
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f70:	68b8      	ldr	r0, [r7, #8]
 8005f72:	f7ff fea1 	bl	8005cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f76:	bf00      	nop
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b098      	sub	sp, #96	@ 0x60
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	88fa      	ldrh	r2, [r7, #6]
 8005f98:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2222      	movs	r2, #34	@ 0x22
 8005fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fac:	4a3e      	ldr	r2, [pc, #248]	@ (80060a8 <UART_Start_Receive_DMA+0x128>)
 8005fae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb4:	4a3d      	ldr	r2, [pc, #244]	@ (80060ac <UART_Start_Receive_DMA+0x12c>)
 8005fb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80060b0 <UART_Start_Receive_DMA+0x130>)
 8005fbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005fc8:	f107 0308 	add.w	r3, r7, #8
 8005fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	f7fc ff7a 	bl	8002ed8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	613b      	str	r3, [r7, #16]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	613b      	str	r3, [r7, #16]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d019      	beq.n	8006036 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006018:	65bb      	str	r3, [r7, #88]	@ 0x58
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	330c      	adds	r3, #12
 8006020:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006022:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006024:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006028:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e5      	bne.n	8006002 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3314      	adds	r3, #20
 800603c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006048:	f043 0301 	orr.w	r3, r3, #1
 800604c:	657b      	str	r3, [r7, #84]	@ 0x54
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3314      	adds	r3, #20
 8006054:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006056:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006058:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800605c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e5      	bne.n	8006036 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3314      	adds	r3, #20
 8006070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	617b      	str	r3, [r7, #20]
   return(result);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006080:	653b      	str	r3, [r7, #80]	@ 0x50
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3314      	adds	r3, #20
 8006088:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800608a:	627a      	str	r2, [r7, #36]	@ 0x24
 800608c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6a39      	ldr	r1, [r7, #32]
 8006090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	61fb      	str	r3, [r7, #28]
   return(result);
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e5      	bne.n	800606a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3760      	adds	r7, #96	@ 0x60
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	08005d83 	.word	0x08005d83
 80060ac:	08005eaf 	.word	0x08005eaf
 80060b0:	08005eeb 	.word	0x08005eeb

080060b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b089      	sub	sp, #36	@ 0x24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	330c      	adds	r3, #12
 80060c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80060d2:	61fb      	str	r3, [r7, #28]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	61ba      	str	r2, [r7, #24]
 80060de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6979      	ldr	r1, [r7, #20]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e5      	bne.n	80060bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80060f8:	bf00      	nop
 80060fa:	3724      	adds	r7, #36	@ 0x24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006104:	b480      	push	{r7}
 8006106:	b095      	sub	sp, #84	@ 0x54
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	330c      	adds	r3, #12
 800612a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800612c:	643a      	str	r2, [r7, #64]	@ 0x40
 800612e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800613a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e5      	bne.n	800610c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3314      	adds	r3, #20
 8006146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f023 0301 	bic.w	r3, r3, #1
 8006156:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3314      	adds	r3, #20
 800615e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006160:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006162:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e5      	bne.n	8006140 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006178:	2b01      	cmp	r3, #1
 800617a:	d119      	bne.n	80061b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	60bb      	str	r3, [r7, #8]
   return(result);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f023 0310 	bic.w	r3, r3, #16
 8006192:	647b      	str	r3, [r7, #68]	@ 0x44
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800619c:	61ba      	str	r2, [r7, #24]
 800619e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6979      	ldr	r1, [r7, #20]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	613b      	str	r3, [r7, #16]
   return(result);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e5      	bne.n	800617c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061be:	bf00      	nop
 80061c0:	3754      	adds	r7, #84	@ 0x54
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff fd67 	bl	8005cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b085      	sub	sp, #20
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b21      	cmp	r3, #33	@ 0x21
 8006204:	d13e      	bne.n	8006284 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800620e:	d114      	bne.n	800623a <UART_Transmit_IT+0x48>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d110      	bne.n	800623a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800622c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	1c9a      	adds	r2, r3, #2
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	621a      	str	r2, [r3, #32]
 8006238:	e008      	b.n	800624c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	1c59      	adds	r1, r3, #1
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6211      	str	r1, [r2, #32]
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29b      	uxth	r3, r3
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	4619      	mov	r1, r3
 800625a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10f      	bne.n	8006280 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800626e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800627e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	e000      	b.n	8006286 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006284:	2302      	movs	r3, #2
  }
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fcd8 	bl	8005c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b08c      	sub	sp, #48	@ 0x30
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b22      	cmp	r3, #34	@ 0x22
 80062d4:	f040 80ae 	bne.w	8006434 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e0:	d117      	bne.n	8006312 <UART_Receive_IT+0x50>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d113      	bne.n	8006312 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006300:	b29a      	uxth	r2, r3
 8006302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006304:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630a:	1c9a      	adds	r2, r3, #2
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006310:	e026      	b.n	8006360 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006316:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006324:	d007      	beq.n	8006336 <UART_Receive_IT+0x74>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <UART_Receive_IT+0x82>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	e008      	b.n	8006356 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006350:	b2da      	uxtb	r2, r3
 8006352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006354:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b01      	subs	r3, #1
 8006368:	b29b      	uxth	r3, r3
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	4619      	mov	r1, r3
 800636e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006370:	2b00      	cmp	r3, #0
 8006372:	d15d      	bne.n	8006430 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0220 	bic.w	r2, r2, #32
 8006382:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695a      	ldr	r2, [r3, #20]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d135      	bne.n	8006426 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	613b      	str	r3, [r7, #16]
   return(result);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f023 0310 	bic.w	r3, r3, #16
 80063d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e0:	623a      	str	r2, [r7, #32]
 80063e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	69f9      	ldr	r1, [r7, #28]
 80063e6:	6a3a      	ldr	r2, [r7, #32]
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e5      	bne.n	80063c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	2b10      	cmp	r3, #16
 8006400:	d10a      	bne.n	8006418 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fa fe80 	bl	8001124 <HAL_UARTEx_RxEventCallback>
 8006424:	e002      	b.n	800642c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff fc32 	bl	8005c90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e002      	b.n	8006436 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	e000      	b.n	8006436 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006434:	2302      	movs	r3, #2
  }
}
 8006436:	4618      	mov	r0, r3
 8006438:	3730      	adds	r7, #48	@ 0x30
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006444:	b0c0      	sub	sp, #256	@ 0x100
 8006446:	af00      	add	r7, sp, #0
 8006448:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800645c:	68d9      	ldr	r1, [r3, #12]
 800645e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	ea40 0301 	orr.w	r3, r0, r1
 8006468:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800646a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	431a      	orrs	r2, r3
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	431a      	orrs	r2, r3
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006498:	f021 010c 	bic.w	r1, r1, #12
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064a6:	430b      	orrs	r3, r1
 80064a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80064b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ba:	6999      	ldr	r1, [r3, #24]
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	ea40 0301 	orr.w	r3, r0, r1
 80064c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b8f      	ldr	r3, [pc, #572]	@ (800670c <UART_SetConfig+0x2cc>)
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d005      	beq.n	80064e0 <UART_SetConfig+0xa0>
 80064d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	4b8d      	ldr	r3, [pc, #564]	@ (8006710 <UART_SetConfig+0x2d0>)
 80064dc:	429a      	cmp	r2, r3
 80064de:	d104      	bne.n	80064ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064e0:	f7fd fe48 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 80064e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80064e8:	e003      	b.n	80064f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064ea:	f7fd fe2f 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 80064ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064fc:	f040 810c 	bne.w	8006718 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006504:	2200      	movs	r2, #0
 8006506:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800650a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800650e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006512:	4622      	mov	r2, r4
 8006514:	462b      	mov	r3, r5
 8006516:	1891      	adds	r1, r2, r2
 8006518:	65b9      	str	r1, [r7, #88]	@ 0x58
 800651a:	415b      	adcs	r3, r3
 800651c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800651e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006522:	4621      	mov	r1, r4
 8006524:	eb12 0801 	adds.w	r8, r2, r1
 8006528:	4629      	mov	r1, r5
 800652a:	eb43 0901 	adc.w	r9, r3, r1
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800653a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800653e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006542:	4690      	mov	r8, r2
 8006544:	4699      	mov	r9, r3
 8006546:	4623      	mov	r3, r4
 8006548:	eb18 0303 	adds.w	r3, r8, r3
 800654c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006550:	462b      	mov	r3, r5
 8006552:	eb49 0303 	adc.w	r3, r9, r3
 8006556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800655a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006566:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800656a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800656e:	460b      	mov	r3, r1
 8006570:	18db      	adds	r3, r3, r3
 8006572:	653b      	str	r3, [r7, #80]	@ 0x50
 8006574:	4613      	mov	r3, r2
 8006576:	eb42 0303 	adc.w	r3, r2, r3
 800657a:	657b      	str	r3, [r7, #84]	@ 0x54
 800657c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006580:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006584:	f7fa faac 	bl	8000ae0 <__aeabi_uldivmod>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4b61      	ldr	r3, [pc, #388]	@ (8006714 <UART_SetConfig+0x2d4>)
 800658e:	fba3 2302 	umull	r2, r3, r3, r2
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	011c      	lsls	r4, r3, #4
 8006596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800659a:	2200      	movs	r2, #0
 800659c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80065a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80065a8:	4642      	mov	r2, r8
 80065aa:	464b      	mov	r3, r9
 80065ac:	1891      	adds	r1, r2, r2
 80065ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80065b0:	415b      	adcs	r3, r3
 80065b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80065b8:	4641      	mov	r1, r8
 80065ba:	eb12 0a01 	adds.w	sl, r2, r1
 80065be:	4649      	mov	r1, r9
 80065c0:	eb43 0b01 	adc.w	fp, r3, r1
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065d8:	4692      	mov	sl, r2
 80065da:	469b      	mov	fp, r3
 80065dc:	4643      	mov	r3, r8
 80065de:	eb1a 0303 	adds.w	r3, sl, r3
 80065e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065e6:	464b      	mov	r3, r9
 80065e8:	eb4b 0303 	adc.w	r3, fp, r3
 80065ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006600:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006604:	460b      	mov	r3, r1
 8006606:	18db      	adds	r3, r3, r3
 8006608:	643b      	str	r3, [r7, #64]	@ 0x40
 800660a:	4613      	mov	r3, r2
 800660c:	eb42 0303 	adc.w	r3, r2, r3
 8006610:	647b      	str	r3, [r7, #68]	@ 0x44
 8006612:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006616:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800661a:	f7fa fa61 	bl	8000ae0 <__aeabi_uldivmod>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4611      	mov	r1, r2
 8006624:	4b3b      	ldr	r3, [pc, #236]	@ (8006714 <UART_SetConfig+0x2d4>)
 8006626:	fba3 2301 	umull	r2, r3, r3, r1
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	2264      	movs	r2, #100	@ 0x64
 800662e:	fb02 f303 	mul.w	r3, r2, r3
 8006632:	1acb      	subs	r3, r1, r3
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800663a:	4b36      	ldr	r3, [pc, #216]	@ (8006714 <UART_SetConfig+0x2d4>)
 800663c:	fba3 2302 	umull	r2, r3, r3, r2
 8006640:	095b      	lsrs	r3, r3, #5
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006648:	441c      	add	r4, r3
 800664a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800664e:	2200      	movs	r2, #0
 8006650:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006654:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006658:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	1891      	adds	r1, r2, r2
 8006662:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006664:	415b      	adcs	r3, r3
 8006666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006668:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800666c:	4641      	mov	r1, r8
 800666e:	1851      	adds	r1, r2, r1
 8006670:	6339      	str	r1, [r7, #48]	@ 0x30
 8006672:	4649      	mov	r1, r9
 8006674:	414b      	adcs	r3, r1
 8006676:	637b      	str	r3, [r7, #52]	@ 0x34
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006684:	4659      	mov	r1, fp
 8006686:	00cb      	lsls	r3, r1, #3
 8006688:	4651      	mov	r1, sl
 800668a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668e:	4651      	mov	r1, sl
 8006690:	00ca      	lsls	r2, r1, #3
 8006692:	4610      	mov	r0, r2
 8006694:	4619      	mov	r1, r3
 8006696:	4603      	mov	r3, r0
 8006698:	4642      	mov	r2, r8
 800669a:	189b      	adds	r3, r3, r2
 800669c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066a0:	464b      	mov	r3, r9
 80066a2:	460a      	mov	r2, r1
 80066a4:	eb42 0303 	adc.w	r3, r2, r3
 80066a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80066bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066c0:	460b      	mov	r3, r1
 80066c2:	18db      	adds	r3, r3, r3
 80066c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066c6:	4613      	mov	r3, r2
 80066c8:	eb42 0303 	adc.w	r3, r2, r3
 80066cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80066d6:	f7fa fa03 	bl	8000ae0 <__aeabi_uldivmod>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4b0d      	ldr	r3, [pc, #52]	@ (8006714 <UART_SetConfig+0x2d4>)
 80066e0:	fba3 1302 	umull	r1, r3, r3, r2
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	2164      	movs	r1, #100	@ 0x64
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	3332      	adds	r3, #50	@ 0x32
 80066f2:	4a08      	ldr	r2, [pc, #32]	@ (8006714 <UART_SetConfig+0x2d4>)
 80066f4:	fba2 2303 	umull	r2, r3, r2, r3
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	f003 0207 	and.w	r2, r3, #7
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4422      	add	r2, r4
 8006706:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006708:	e106      	b.n	8006918 <UART_SetConfig+0x4d8>
 800670a:	bf00      	nop
 800670c:	40011000 	.word	0x40011000
 8006710:	40011400 	.word	0x40011400
 8006714:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800671c:	2200      	movs	r2, #0
 800671e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006722:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006726:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800672a:	4642      	mov	r2, r8
 800672c:	464b      	mov	r3, r9
 800672e:	1891      	adds	r1, r2, r2
 8006730:	6239      	str	r1, [r7, #32]
 8006732:	415b      	adcs	r3, r3
 8006734:	627b      	str	r3, [r7, #36]	@ 0x24
 8006736:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800673a:	4641      	mov	r1, r8
 800673c:	1854      	adds	r4, r2, r1
 800673e:	4649      	mov	r1, r9
 8006740:	eb43 0501 	adc.w	r5, r3, r1
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	00eb      	lsls	r3, r5, #3
 800674e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006752:	00e2      	lsls	r2, r4, #3
 8006754:	4614      	mov	r4, r2
 8006756:	461d      	mov	r5, r3
 8006758:	4643      	mov	r3, r8
 800675a:	18e3      	adds	r3, r4, r3
 800675c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006760:	464b      	mov	r3, r9
 8006762:	eb45 0303 	adc.w	r3, r5, r3
 8006766:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800676a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006776:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800677a:	f04f 0200 	mov.w	r2, #0
 800677e:	f04f 0300 	mov.w	r3, #0
 8006782:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006786:	4629      	mov	r1, r5
 8006788:	008b      	lsls	r3, r1, #2
 800678a:	4621      	mov	r1, r4
 800678c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006790:	4621      	mov	r1, r4
 8006792:	008a      	lsls	r2, r1, #2
 8006794:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006798:	f7fa f9a2 	bl	8000ae0 <__aeabi_uldivmod>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4b60      	ldr	r3, [pc, #384]	@ (8006924 <UART_SetConfig+0x4e4>)
 80067a2:	fba3 2302 	umull	r2, r3, r3, r2
 80067a6:	095b      	lsrs	r3, r3, #5
 80067a8:	011c      	lsls	r4, r3, #4
 80067aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80067b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80067bc:	4642      	mov	r2, r8
 80067be:	464b      	mov	r3, r9
 80067c0:	1891      	adds	r1, r2, r2
 80067c2:	61b9      	str	r1, [r7, #24]
 80067c4:	415b      	adcs	r3, r3
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067cc:	4641      	mov	r1, r8
 80067ce:	1851      	adds	r1, r2, r1
 80067d0:	6139      	str	r1, [r7, #16]
 80067d2:	4649      	mov	r1, r9
 80067d4:	414b      	adcs	r3, r1
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067e4:	4659      	mov	r1, fp
 80067e6:	00cb      	lsls	r3, r1, #3
 80067e8:	4651      	mov	r1, sl
 80067ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ee:	4651      	mov	r1, sl
 80067f0:	00ca      	lsls	r2, r1, #3
 80067f2:	4610      	mov	r0, r2
 80067f4:	4619      	mov	r1, r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	4642      	mov	r2, r8
 80067fa:	189b      	adds	r3, r3, r2
 80067fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006800:	464b      	mov	r3, r9
 8006802:	460a      	mov	r2, r1
 8006804:	eb42 0303 	adc.w	r3, r2, r3
 8006808:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006816:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006824:	4649      	mov	r1, r9
 8006826:	008b      	lsls	r3, r1, #2
 8006828:	4641      	mov	r1, r8
 800682a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800682e:	4641      	mov	r1, r8
 8006830:	008a      	lsls	r2, r1, #2
 8006832:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006836:	f7fa f953 	bl	8000ae0 <__aeabi_uldivmod>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4611      	mov	r1, r2
 8006840:	4b38      	ldr	r3, [pc, #224]	@ (8006924 <UART_SetConfig+0x4e4>)
 8006842:	fba3 2301 	umull	r2, r3, r3, r1
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	2264      	movs	r2, #100	@ 0x64
 800684a:	fb02 f303 	mul.w	r3, r2, r3
 800684e:	1acb      	subs	r3, r1, r3
 8006850:	011b      	lsls	r3, r3, #4
 8006852:	3332      	adds	r3, #50	@ 0x32
 8006854:	4a33      	ldr	r2, [pc, #204]	@ (8006924 <UART_SetConfig+0x4e4>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006860:	441c      	add	r4, r3
 8006862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006866:	2200      	movs	r2, #0
 8006868:	673b      	str	r3, [r7, #112]	@ 0x70
 800686a:	677a      	str	r2, [r7, #116]	@ 0x74
 800686c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006870:	4642      	mov	r2, r8
 8006872:	464b      	mov	r3, r9
 8006874:	1891      	adds	r1, r2, r2
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	415b      	adcs	r3, r3
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006880:	4641      	mov	r1, r8
 8006882:	1851      	adds	r1, r2, r1
 8006884:	6039      	str	r1, [r7, #0]
 8006886:	4649      	mov	r1, r9
 8006888:	414b      	adcs	r3, r1
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006898:	4659      	mov	r1, fp
 800689a:	00cb      	lsls	r3, r1, #3
 800689c:	4651      	mov	r1, sl
 800689e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068a2:	4651      	mov	r1, sl
 80068a4:	00ca      	lsls	r2, r1, #3
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	4642      	mov	r2, r8
 80068ae:	189b      	adds	r3, r3, r2
 80068b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068b2:	464b      	mov	r3, r9
 80068b4:	460a      	mov	r2, r1
 80068b6:	eb42 0303 	adc.w	r3, r2, r3
 80068ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80068c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80068d4:	4649      	mov	r1, r9
 80068d6:	008b      	lsls	r3, r1, #2
 80068d8:	4641      	mov	r1, r8
 80068da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068de:	4641      	mov	r1, r8
 80068e0:	008a      	lsls	r2, r1, #2
 80068e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80068e6:	f7fa f8fb 	bl	8000ae0 <__aeabi_uldivmod>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006924 <UART_SetConfig+0x4e4>)
 80068f0:	fba3 1302 	umull	r1, r3, r3, r2
 80068f4:	095b      	lsrs	r3, r3, #5
 80068f6:	2164      	movs	r1, #100	@ 0x64
 80068f8:	fb01 f303 	mul.w	r3, r1, r3
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	3332      	adds	r3, #50	@ 0x32
 8006902:	4a08      	ldr	r2, [pc, #32]	@ (8006924 <UART_SetConfig+0x4e4>)
 8006904:	fba2 2303 	umull	r2, r3, r2, r3
 8006908:	095b      	lsrs	r3, r3, #5
 800690a:	f003 020f 	and.w	r2, r3, #15
 800690e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4422      	add	r2, r4
 8006916:	609a      	str	r2, [r3, #8]
}
 8006918:	bf00      	nop
 800691a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800691e:	46bd      	mov	sp, r7
 8006920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006924:	51eb851f 	.word	0x51eb851f

08006928 <fmod>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	ed2d 8b02 	vpush	{d8}
 800692e:	ec57 6b10 	vmov	r6, r7, d0
 8006932:	ec55 4b11 	vmov	r4, r5, d1
 8006936:	f000 f8a3 	bl	8006a80 <__ieee754_fmod>
 800693a:	4622      	mov	r2, r4
 800693c:	462b      	mov	r3, r5
 800693e:	4630      	mov	r0, r6
 8006940:	4639      	mov	r1, r7
 8006942:	eeb0 8a40 	vmov.f32	s16, s0
 8006946:	eef0 8a60 	vmov.f32	s17, s1
 800694a:	f7fa f893 	bl	8000a74 <__aeabi_dcmpun>
 800694e:	b990      	cbnz	r0, 8006976 <fmod+0x4e>
 8006950:	2200      	movs	r2, #0
 8006952:	2300      	movs	r3, #0
 8006954:	4620      	mov	r0, r4
 8006956:	4629      	mov	r1, r5
 8006958:	f7fa f85a 	bl	8000a10 <__aeabi_dcmpeq>
 800695c:	b158      	cbz	r0, 8006976 <fmod+0x4e>
 800695e:	f000 f9a1 	bl	8006ca4 <__errno>
 8006962:	2321      	movs	r3, #33	@ 0x21
 8006964:	6003      	str	r3, [r0, #0]
 8006966:	2200      	movs	r2, #0
 8006968:	2300      	movs	r3, #0
 800696a:	4610      	mov	r0, r2
 800696c:	4619      	mov	r1, r3
 800696e:	f7f9 ff11 	bl	8000794 <__aeabi_ddiv>
 8006972:	ec41 0b18 	vmov	d8, r0, r1
 8006976:	eeb0 0a48 	vmov.f32	s0, s16
 800697a:	eef0 0a68 	vmov.f32	s1, s17
 800697e:	ecbd 8b02 	vpop	{d8}
 8006982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006984:	0000      	movs	r0, r0
	...

08006988 <floor>:
 8006988:	ec51 0b10 	vmov	r0, r1, d0
 800698c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006994:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006998:	2e13      	cmp	r6, #19
 800699a:	460c      	mov	r4, r1
 800699c:	4605      	mov	r5, r0
 800699e:	4680      	mov	r8, r0
 80069a0:	dc34      	bgt.n	8006a0c <floor+0x84>
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	da17      	bge.n	80069d6 <floor+0x4e>
 80069a6:	a332      	add	r3, pc, #200	@ (adr r3, 8006a70 <floor+0xe8>)
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f7f9 fc12 	bl	80001d4 <__adddf3>
 80069b0:	2200      	movs	r2, #0
 80069b2:	2300      	movs	r3, #0
 80069b4:	f7fa f854 	bl	8000a60 <__aeabi_dcmpgt>
 80069b8:	b150      	cbz	r0, 80069d0 <floor+0x48>
 80069ba:	2c00      	cmp	r4, #0
 80069bc:	da55      	bge.n	8006a6a <floor+0xe2>
 80069be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80069c2:	432c      	orrs	r4, r5
 80069c4:	2500      	movs	r5, #0
 80069c6:	42ac      	cmp	r4, r5
 80069c8:	4c2b      	ldr	r4, [pc, #172]	@ (8006a78 <floor+0xf0>)
 80069ca:	bf08      	it	eq
 80069cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80069d0:	4621      	mov	r1, r4
 80069d2:	4628      	mov	r0, r5
 80069d4:	e023      	b.n	8006a1e <floor+0x96>
 80069d6:	4f29      	ldr	r7, [pc, #164]	@ (8006a7c <floor+0xf4>)
 80069d8:	4137      	asrs	r7, r6
 80069da:	ea01 0307 	and.w	r3, r1, r7
 80069de:	4303      	orrs	r3, r0
 80069e0:	d01d      	beq.n	8006a1e <floor+0x96>
 80069e2:	a323      	add	r3, pc, #140	@ (adr r3, 8006a70 <floor+0xe8>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fbf4 	bl	80001d4 <__adddf3>
 80069ec:	2200      	movs	r2, #0
 80069ee:	2300      	movs	r3, #0
 80069f0:	f7fa f836 	bl	8000a60 <__aeabi_dcmpgt>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d0eb      	beq.n	80069d0 <floor+0x48>
 80069f8:	2c00      	cmp	r4, #0
 80069fa:	bfbe      	ittt	lt
 80069fc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006a00:	4133      	asrlt	r3, r6
 8006a02:	18e4      	addlt	r4, r4, r3
 8006a04:	ea24 0407 	bic.w	r4, r4, r7
 8006a08:	2500      	movs	r5, #0
 8006a0a:	e7e1      	b.n	80069d0 <floor+0x48>
 8006a0c:	2e33      	cmp	r6, #51	@ 0x33
 8006a0e:	dd0a      	ble.n	8006a26 <floor+0x9e>
 8006a10:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006a14:	d103      	bne.n	8006a1e <floor+0x96>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	f7f9 fbdb 	bl	80001d4 <__adddf3>
 8006a1e:	ec41 0b10 	vmov	d0, r0, r1
 8006a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a26:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006a2a:	f04f 37ff 	mov.w	r7, #4294967295
 8006a2e:	40df      	lsrs	r7, r3
 8006a30:	4207      	tst	r7, r0
 8006a32:	d0f4      	beq.n	8006a1e <floor+0x96>
 8006a34:	a30e      	add	r3, pc, #56	@ (adr r3, 8006a70 <floor+0xe8>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f7f9 fbcb 	bl	80001d4 <__adddf3>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2300      	movs	r3, #0
 8006a42:	f7fa f80d 	bl	8000a60 <__aeabi_dcmpgt>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d0c2      	beq.n	80069d0 <floor+0x48>
 8006a4a:	2c00      	cmp	r4, #0
 8006a4c:	da0a      	bge.n	8006a64 <floor+0xdc>
 8006a4e:	2e14      	cmp	r6, #20
 8006a50:	d101      	bne.n	8006a56 <floor+0xce>
 8006a52:	3401      	adds	r4, #1
 8006a54:	e006      	b.n	8006a64 <floor+0xdc>
 8006a56:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	40b3      	lsls	r3, r6
 8006a5e:	441d      	add	r5, r3
 8006a60:	4545      	cmp	r5, r8
 8006a62:	d3f6      	bcc.n	8006a52 <floor+0xca>
 8006a64:	ea25 0507 	bic.w	r5, r5, r7
 8006a68:	e7b2      	b.n	80069d0 <floor+0x48>
 8006a6a:	2500      	movs	r5, #0
 8006a6c:	462c      	mov	r4, r5
 8006a6e:	e7af      	b.n	80069d0 <floor+0x48>
 8006a70:	8800759c 	.word	0x8800759c
 8006a74:	7e37e43c 	.word	0x7e37e43c
 8006a78:	bff00000 	.word	0xbff00000
 8006a7c:	000fffff 	.word	0x000fffff

08006a80 <__ieee754_fmod>:
 8006a80:	ec53 2b11 	vmov	r2, r3, d1
 8006a84:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8006a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8c:	ea52 040c 	orrs.w	r4, r2, ip
 8006a90:	ec51 0b10 	vmov	r0, r1, d0
 8006a94:	461e      	mov	r6, r3
 8006a96:	4617      	mov	r7, r2
 8006a98:	4696      	mov	lr, r2
 8006a9a:	d00c      	beq.n	8006ab6 <__ieee754_fmod+0x36>
 8006a9c:	4c77      	ldr	r4, [pc, #476]	@ (8006c7c <__ieee754_fmod+0x1fc>)
 8006a9e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8006aa2:	45a0      	cmp	r8, r4
 8006aa4:	4689      	mov	r9, r1
 8006aa6:	d806      	bhi.n	8006ab6 <__ieee754_fmod+0x36>
 8006aa8:	4254      	negs	r4, r2
 8006aaa:	4d75      	ldr	r5, [pc, #468]	@ (8006c80 <__ieee754_fmod+0x200>)
 8006aac:	4314      	orrs	r4, r2
 8006aae:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8006ab2:	42ac      	cmp	r4, r5
 8006ab4:	d909      	bls.n	8006aca <__ieee754_fmod+0x4a>
 8006ab6:	f7f9 fd43 	bl	8000540 <__aeabi_dmul>
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	f7f9 fe69 	bl	8000794 <__aeabi_ddiv>
 8006ac2:	ec41 0b10 	vmov	d0, r0, r1
 8006ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aca:	45e0      	cmp	r8, ip
 8006acc:	4682      	mov	sl, r0
 8006ace:	4604      	mov	r4, r0
 8006ad0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8006ad4:	dc09      	bgt.n	8006aea <__ieee754_fmod+0x6a>
 8006ad6:	dbf4      	blt.n	8006ac2 <__ieee754_fmod+0x42>
 8006ad8:	4282      	cmp	r2, r0
 8006ada:	d8f2      	bhi.n	8006ac2 <__ieee754_fmod+0x42>
 8006adc:	d105      	bne.n	8006aea <__ieee754_fmod+0x6a>
 8006ade:	4b69      	ldr	r3, [pc, #420]	@ (8006c84 <__ieee754_fmod+0x204>)
 8006ae0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8006ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ae8:	e7eb      	b.n	8006ac2 <__ieee754_fmod+0x42>
 8006aea:	4a65      	ldr	r2, [pc, #404]	@ (8006c80 <__ieee754_fmod+0x200>)
 8006aec:	ea19 0f02 	tst.w	r9, r2
 8006af0:	d148      	bne.n	8006b84 <__ieee754_fmod+0x104>
 8006af2:	f1b8 0f00 	cmp.w	r8, #0
 8006af6:	d13d      	bne.n	8006b74 <__ieee754_fmod+0xf4>
 8006af8:	4963      	ldr	r1, [pc, #396]	@ (8006c88 <__ieee754_fmod+0x208>)
 8006afa:	4653      	mov	r3, sl
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	dc36      	bgt.n	8006b6e <__ieee754_fmod+0xee>
 8006b00:	4216      	tst	r6, r2
 8006b02:	d14f      	bne.n	8006ba4 <__ieee754_fmod+0x124>
 8006b04:	f1bc 0f00 	cmp.w	ip, #0
 8006b08:	d144      	bne.n	8006b94 <__ieee754_fmod+0x114>
 8006b0a:	4a5f      	ldr	r2, [pc, #380]	@ (8006c88 <__ieee754_fmod+0x208>)
 8006b0c:	463b      	mov	r3, r7
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	dc3d      	bgt.n	8006b8e <__ieee754_fmod+0x10e>
 8006b12:	485e      	ldr	r0, [pc, #376]	@ (8006c8c <__ieee754_fmod+0x20c>)
 8006b14:	4281      	cmp	r1, r0
 8006b16:	db4a      	blt.n	8006bae <__ieee754_fmod+0x12e>
 8006b18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b20:	485a      	ldr	r0, [pc, #360]	@ (8006c8c <__ieee754_fmod+0x20c>)
 8006b22:	4282      	cmp	r2, r0
 8006b24:	db57      	blt.n	8006bd6 <__ieee754_fmod+0x156>
 8006b26:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8006b2a:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8006b2e:	1a89      	subs	r1, r1, r2
 8006b30:	1b98      	subs	r0, r3, r6
 8006b32:	eba4 070e 	sub.w	r7, r4, lr
 8006b36:	2900      	cmp	r1, #0
 8006b38:	d162      	bne.n	8006c00 <__ieee754_fmod+0x180>
 8006b3a:	4574      	cmp	r4, lr
 8006b3c:	bf38      	it	cc
 8006b3e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8006b42:	2800      	cmp	r0, #0
 8006b44:	bfa4      	itt	ge
 8006b46:	463c      	movge	r4, r7
 8006b48:	4603      	movge	r3, r0
 8006b4a:	ea53 0104 	orrs.w	r1, r3, r4
 8006b4e:	d0c6      	beq.n	8006ade <__ieee754_fmod+0x5e>
 8006b50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b54:	db69      	blt.n	8006c2a <__ieee754_fmod+0x1aa>
 8006b56:	494d      	ldr	r1, [pc, #308]	@ (8006c8c <__ieee754_fmod+0x20c>)
 8006b58:	428a      	cmp	r2, r1
 8006b5a:	db6c      	blt.n	8006c36 <__ieee754_fmod+0x1b6>
 8006b5c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006b60:	432b      	orrs	r3, r5
 8006b62:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8006b66:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	e7a9      	b.n	8006ac2 <__ieee754_fmod+0x42>
 8006b6e:	3901      	subs	r1, #1
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	e7c3      	b.n	8006afc <__ieee754_fmod+0x7c>
 8006b74:	4945      	ldr	r1, [pc, #276]	@ (8006c8c <__ieee754_fmod+0x20c>)
 8006b76:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	ddc0      	ble.n	8006b00 <__ieee754_fmod+0x80>
 8006b7e:	3901      	subs	r1, #1
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	e7fa      	b.n	8006b7a <__ieee754_fmod+0xfa>
 8006b84:	ea4f 5128 	mov.w	r1, r8, asr #20
 8006b88:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006b8c:	e7b8      	b.n	8006b00 <__ieee754_fmod+0x80>
 8006b8e:	3a01      	subs	r2, #1
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	e7bc      	b.n	8006b0e <__ieee754_fmod+0x8e>
 8006b94:	4a3d      	ldr	r2, [pc, #244]	@ (8006c8c <__ieee754_fmod+0x20c>)
 8006b96:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	ddb9      	ble.n	8006b12 <__ieee754_fmod+0x92>
 8006b9e:	3a01      	subs	r2, #1
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	e7fa      	b.n	8006b9a <__ieee754_fmod+0x11a>
 8006ba4:	ea4f 522c 	mov.w	r2, ip, asr #20
 8006ba8:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006bac:	e7b1      	b.n	8006b12 <__ieee754_fmod+0x92>
 8006bae:	1a40      	subs	r0, r0, r1
 8006bb0:	281f      	cmp	r0, #31
 8006bb2:	dc0a      	bgt.n	8006bca <__ieee754_fmod+0x14a>
 8006bb4:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8006bb8:	fa08 f800 	lsl.w	r8, r8, r0
 8006bbc:	fa2a f303 	lsr.w	r3, sl, r3
 8006bc0:	ea43 0308 	orr.w	r3, r3, r8
 8006bc4:	fa0a f400 	lsl.w	r4, sl, r0
 8006bc8:	e7aa      	b.n	8006b20 <__ieee754_fmod+0xa0>
 8006bca:	4b31      	ldr	r3, [pc, #196]	@ (8006c90 <__ieee754_fmod+0x210>)
 8006bcc:	1a5b      	subs	r3, r3, r1
 8006bce:	fa0a f303 	lsl.w	r3, sl, r3
 8006bd2:	2400      	movs	r4, #0
 8006bd4:	e7a4      	b.n	8006b20 <__ieee754_fmod+0xa0>
 8006bd6:	1a80      	subs	r0, r0, r2
 8006bd8:	281f      	cmp	r0, #31
 8006bda:	dc0a      	bgt.n	8006bf2 <__ieee754_fmod+0x172>
 8006bdc:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8006be0:	fa0c fc00 	lsl.w	ip, ip, r0
 8006be4:	fa27 f606 	lsr.w	r6, r7, r6
 8006be8:	ea46 060c 	orr.w	r6, r6, ip
 8006bec:	fa07 fe00 	lsl.w	lr, r7, r0
 8006bf0:	e79d      	b.n	8006b2e <__ieee754_fmod+0xae>
 8006bf2:	4e27      	ldr	r6, [pc, #156]	@ (8006c90 <__ieee754_fmod+0x210>)
 8006bf4:	1ab6      	subs	r6, r6, r2
 8006bf6:	fa07 f606 	lsl.w	r6, r7, r6
 8006bfa:	f04f 0e00 	mov.w	lr, #0
 8006bfe:	e796      	b.n	8006b2e <__ieee754_fmod+0xae>
 8006c00:	4574      	cmp	r4, lr
 8006c02:	bf38      	it	cc
 8006c04:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	da05      	bge.n	8006c18 <__ieee754_fmod+0x198>
 8006c0c:	0fe0      	lsrs	r0, r4, #31
 8006c0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006c12:	0064      	lsls	r4, r4, #1
 8006c14:	3901      	subs	r1, #1
 8006c16:	e78b      	b.n	8006b30 <__ieee754_fmod+0xb0>
 8006c18:	ea50 0307 	orrs.w	r3, r0, r7
 8006c1c:	f43f af5f 	beq.w	8006ade <__ieee754_fmod+0x5e>
 8006c20:	0ffb      	lsrs	r3, r7, #31
 8006c22:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006c26:	007c      	lsls	r4, r7, #1
 8006c28:	e7f4      	b.n	8006c14 <__ieee754_fmod+0x194>
 8006c2a:	0fe1      	lsrs	r1, r4, #31
 8006c2c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006c30:	0064      	lsls	r4, r4, #1
 8006c32:	3a01      	subs	r2, #1
 8006c34:	e78c      	b.n	8006b50 <__ieee754_fmod+0xd0>
 8006c36:	1a89      	subs	r1, r1, r2
 8006c38:	2914      	cmp	r1, #20
 8006c3a:	dc0a      	bgt.n	8006c52 <__ieee754_fmod+0x1d2>
 8006c3c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8006c40:	fa03 f202 	lsl.w	r2, r3, r2
 8006c44:	40cc      	lsrs	r4, r1
 8006c46:	4322      	orrs	r2, r4
 8006c48:	410b      	asrs	r3, r1
 8006c4a:	ea43 0105 	orr.w	r1, r3, r5
 8006c4e:	4610      	mov	r0, r2
 8006c50:	e737      	b.n	8006ac2 <__ieee754_fmod+0x42>
 8006c52:	291f      	cmp	r1, #31
 8006c54:	dc07      	bgt.n	8006c66 <__ieee754_fmod+0x1e6>
 8006c56:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8006c5a:	40cc      	lsrs	r4, r1
 8006c5c:	fa03 f202 	lsl.w	r2, r3, r2
 8006c60:	4322      	orrs	r2, r4
 8006c62:	462b      	mov	r3, r5
 8006c64:	e7f1      	b.n	8006c4a <__ieee754_fmod+0x1ca>
 8006c66:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8006c6a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8006c6e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8006c72:	32e2      	adds	r2, #226	@ 0xe2
 8006c74:	fa43 f202 	asr.w	r2, r3, r2
 8006c78:	e7f3      	b.n	8006c62 <__ieee754_fmod+0x1e2>
 8006c7a:	bf00      	nop
 8006c7c:	7fefffff 	.word	0x7fefffff
 8006c80:	7ff00000 	.word	0x7ff00000
 8006c84:	08006d40 	.word	0x08006d40
 8006c88:	fffffbed 	.word	0xfffffbed
 8006c8c:	fffffc02 	.word	0xfffffc02
 8006c90:	fffffbe2 	.word	0xfffffbe2

08006c94 <memset>:
 8006c94:	4402      	add	r2, r0
 8006c96:	4603      	mov	r3, r0
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d100      	bne.n	8006c9e <memset+0xa>
 8006c9c:	4770      	bx	lr
 8006c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006ca2:	e7f9      	b.n	8006c98 <memset+0x4>

08006ca4 <__errno>:
 8006ca4:	4b01      	ldr	r3, [pc, #4]	@ (8006cac <__errno+0x8>)
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20000014 	.word	0x20000014

08006cb0 <__libc_init_array>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8006ce8 <__libc_init_array+0x38>)
 8006cb4:	4c0d      	ldr	r4, [pc, #52]	@ (8006cec <__libc_init_array+0x3c>)
 8006cb6:	1b64      	subs	r4, r4, r5
 8006cb8:	10a4      	asrs	r4, r4, #2
 8006cba:	2600      	movs	r6, #0
 8006cbc:	42a6      	cmp	r6, r4
 8006cbe:	d109      	bne.n	8006cd4 <__libc_init_array+0x24>
 8006cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8006cf0 <__libc_init_array+0x40>)
 8006cc2:	4c0c      	ldr	r4, [pc, #48]	@ (8006cf4 <__libc_init_array+0x44>)
 8006cc4:	f000 f818 	bl	8006cf8 <_init>
 8006cc8:	1b64      	subs	r4, r4, r5
 8006cca:	10a4      	asrs	r4, r4, #2
 8006ccc:	2600      	movs	r6, #0
 8006cce:	42a6      	cmp	r6, r4
 8006cd0:	d105      	bne.n	8006cde <__libc_init_array+0x2e>
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd8:	4798      	blx	r3
 8006cda:	3601      	adds	r6, #1
 8006cdc:	e7ee      	b.n	8006cbc <__libc_init_array+0xc>
 8006cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce2:	4798      	blx	r3
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	e7f2      	b.n	8006cce <__libc_init_array+0x1e>
 8006ce8:	08006d58 	.word	0x08006d58
 8006cec:	08006d58 	.word	0x08006d58
 8006cf0:	08006d58 	.word	0x08006d58
 8006cf4:	08006d5c 	.word	0x08006d5c

08006cf8 <_init>:
 8006cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfa:	bf00      	nop
 8006cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cfe:	bc08      	pop	{r3}
 8006d00:	469e      	mov	lr, r3
 8006d02:	4770      	bx	lr

08006d04 <_fini>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	bf00      	nop
 8006d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	469e      	mov	lr, r3
 8006d0e:	4770      	bx	lr
